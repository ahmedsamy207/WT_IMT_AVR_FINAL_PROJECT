
AVRProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010e  00800060  00003f20  00003fb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000032  0080016e  0080016e  000040c2  2**0
                  ALLOC
  3 .stab         00003b34  00000000  00000000  000040c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001738  00000000  00000000  00007bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00009330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000094d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000096c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000bacd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000ce53  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000e02c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000e1ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000e4e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ee50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__vector_4>
      14:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <__vector_5>
      18:	0c 94 af 10 	jmp	0x215e	; 0x215e <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 65 09 	jmp	0x12ca	; 0x12ca <__vector_10>
      2c:	0c 94 0c 09 	jmp	0x1218	; 0x1218 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e2       	ldi	r30, 0x20	; 32
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3a       	cpi	r26, 0xA0	; 160
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <main>
      8a:	0c 94 8e 1f 	jmp	0x3f1c	; 0x3f1c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 57 1f 	jmp	0x3eae	; 0x3eae <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 73 1f 	jmp	0x3ee6	; 0x3ee6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 63 1f 	jmp	0x3ec6	; 0x3ec6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7f 1f 	jmp	0x3efe	; 0x3efe <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 63 1f 	jmp	0x3ec6	; 0x3ec6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7f 1f 	jmp	0x3efe	; 0x3efe <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 57 1f 	jmp	0x3eae	; 0x3eae <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 73 1f 	jmp	0x3ee6	; 0x3ee6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5f 1f 	jmp	0x3ebe	; 0x3ebe <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 7b 1f 	jmp	0x3ef6	; 0x3ef6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 63 1f 	jmp	0x3ec6	; 0x3ec6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 7f 1f 	jmp	0x3efe	; 0x3efe <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 63 1f 	jmp	0x3ec6	; 0x3ec6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 7f 1f 	jmp	0x3efe	; 0x3efe <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 63 1f 	jmp	0x3ec6	; 0x3ec6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 7f 1f 	jmp	0x3efe	; 0x3efe <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 67 1f 	jmp	0x3ece	; 0x3ece <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 5f 1f 	jmp	0x3ebe	; 0x3ebe <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 7b 1f 	jmp	0x3ef6	; 0x3ef6 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_voidInit>:
#include "UART_private.h"
#include "UART_config.h"


void UART_voidInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <UART_voidInit+0x6>
     e34:	0f 92       	push	r0
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62

/********************************************************** UBRR ***************************************/
	u16 Local_u16UBRRValue ;
	Local_u16UBRRValue = UART_BAUD_RATE_UBRR;
     e3a:	83 e3       	ldi	r24, 0x33	; 51
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	9b 83       	std	Y+3, r25	; 0x03
     e40:	8a 83       	std	Y+2, r24	; 0x02
	UART_u8_UBRRL_REG=(u8)Local_u16UBRRValue;
     e42:	e9 e2       	ldi	r30, 0x29	; 41
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	80 83       	st	Z, r24
	UART_u8_UBRRH_REG=(u8)(Local_u16UBRRValue>>8);
     e4a:	e0 e4       	ldi	r30, 0x40	; 64
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	9b 81       	ldd	r25, Y+3	; 0x03
     e52:	89 2f       	mov	r24, r25
     e54:	99 27       	eor	r25, r25
     e56:	80 83       	st	Z, r24
/************************************* UCSRA *******************************************************/
    #if     UART_SPEED == UART_NORMAL_SPEED
	        CLR_BIT(UART_u8_UCSRA_REG,UART_u8_UCSRA_U2X_BIT);
     e58:	ab e2       	ldi	r26, 0x2B	; 43
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	eb e2       	ldi	r30, 0x2B	; 43
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	8d 7f       	andi	r24, 0xFD	; 253
     e64:	8c 93       	st	X, r24
    #elif   UART_SPEED == UART_DOUBLE_SPEED
	        SET_BIT(UART_u8_UCSRA_REG,UART_u8_UCSRA_U2X_BIT);
    #endif

    #if     UART_PROCESSOR_COMMUNICATION == UART_SINGLE_CYCLE_PRICESSOR
            CLR_BIT(UART_u8_UCSRA_REG,UART_u8_UCSRA_MPCM_BIT);
     e66:	ab e2       	ldi	r26, 0x2B	; 43
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	eb e2       	ldi	r30, 0x2B	; 43
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	8e 7f       	andi	r24, 0xFE	; 254
     e72:	8c 93       	st	X, r24
    #elif   UART_PROCESSOR_COMMUNICATION == UART_MULTI_PRICESSOR
            SET_BIT(UART_u8_UCSRA_REG,UART_u8_UCSRA_MPCM_BIT);
    #endif
/**************************************** UCSRB ****************************************************/
    #if     UART_RX_INTERRUPR == UART_RX_DISABLE_INTERRUPR
            CLR_BIT(UART_u8_UCSRB_REG,UART_u8_UCSRB_RXCIE_BIT);
     e74:	aa e2       	ldi	r26, 0x2A	; 42
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	ea e2       	ldi	r30, 0x2A	; 42
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	8f 77       	andi	r24, 0x7F	; 127
     e80:	8c 93       	st	X, r24
    #elif   UART_RX_INTERRUPR == UART_RX_ENABLE_INTERRUPR
            SET_BIT(UART_u8_UCSRB_REG,UART_u8_UCSRB_RXCIE_BIT);
    #endif

    #if     UART_TX_INTERRUPR == UART_TX_DISABLE_INTERRUPR
            CLR_BIT(UART_u8_UCSRB_REG,UART_u8_UCSRB_TXCIE_BIT);
     e82:	aa e2       	ldi	r26, 0x2A	; 42
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	ea e2       	ldi	r30, 0x2A	; 42
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	8f 7b       	andi	r24, 0xBF	; 191
     e8e:	8c 93       	st	X, r24
    #elif   UART_TX_INTERRUPR == UART_TX_ENABLE_INTERRUPR
            SET_BIT(UART_u8_UCSRB_REG,UART_u8_UCSRB_TXCIE_BIT);
    #endif

    #if     UART_UDRE_EMPTY_INTERRUPR == UART_UDRE_EMPTY_DISABLE_INTERRUPR
            CLR_BIT(UART_u8_UCSRB_REG,UART_u8_UCSRB_UDRIE_BIT);
     e90:	aa e2       	ldi	r26, 0x2A	; 42
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	ea e2       	ldi	r30, 0x2A	; 42
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	8f 7d       	andi	r24, 0xDF	; 223
     e9c:	8c 93       	st	X, r24
    #elif   UART_UDRE_EMPTY_INTERRUPR == UART_UDRE_EMPTY_ENABLE_INTERRUPR
            SET_BIT(UART_u8_UCSRB_REG,UART_u8_UCSRB_UDRIE_BIT);
    #endif


    SET_BIT(UART_u8_UCSRB_REG,UART_u8_UCSRB_TXEN_BIT);
     e9e:	aa e2       	ldi	r26, 0x2A	; 42
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	ea e2       	ldi	r30, 0x2A	; 42
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	88 60       	ori	r24, 0x08	; 8
     eaa:	8c 93       	st	X, r24
    SET_BIT(UART_u8_UCSRB_REG,UART_u8_UCSRB_RXEN_BIT);
     eac:	aa e2       	ldi	r26, 0x2A	; 42
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	ea e2       	ldi	r30, 0x2A	; 42
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	80 61       	ori	r24, 0x10	; 16
     eb8:	8c 93       	st	X, r24
 /********************************************** UCSRC **********************************************/
    u8 Local_u8UCSRCValue= 0b10000000;
     eba:	80 e8       	ldi	r24, 0x80	; 128
     ebc:	89 83       	std	Y+1, r24	; 0x01
    #if     UART_MODE_SELECT == UART_ASYNCHRONOUS_OPERATION
            CLR_BIT(Local_u8UCSRCValue,UART_u8_UCSRC_UMSEL_BIT);
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	8f 7b       	andi	r24, 0xBF	; 191
     ec2:	89 83       	std	Y+1, r24	; 0x01
    #elif   UART_MODE_SELECT == UART_SYNCHRONOUS_OPERATION
            SET_BIT(Local_u8UCSRCValue,UART_u8_UCSRC_UMSEL_BIT);
    #endif

    #if     UART_PARITY_MODE == UART_DISABLE_PARITY
            CLR_BIT(Local_u8UCSRCValue,UART_u8_UCSRC_UPM0_BIT);
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	8f 7e       	andi	r24, 0xEF	; 239
     ec8:	89 83       	std	Y+1, r24	; 0x01
            CLR_BIT(Local_u8UCSRCValue,UART_u8_UCSRC_UPM1_BIT);
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	8f 7d       	andi	r24, 0xDF	; 223
     ece:	89 83       	std	Y+1, r24	; 0x01
            SET_BIT(Local_u8UCSRCValue,UART_u8_UCSRC_UPM1_BIT);
    #endif


    #if     UART_STOP_BIT_SELECT == UART_1_BIT_STOP_SELECT
            CLR_BIT(Local_u8UCSRCValue,UART_u8_UCSRC_USBS_BIT);
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	87 7f       	andi	r24, 0xF7	; 247
     ed4:	89 83       	std	Y+1, r24	; 0x01
    #elif   UART_CHARACTER_SIZE == UART_7_BIT_CHARACTER_SIZE
            CLR_BIT(Local_u8UCSRCValue,UART_u8_UCSRC_UCSZ0_BIT);
            SET_BIT(Local_u8UCSRCValue,UART_u8_UCSRC_UCSZ1_BIT);
            CLR_BIT(UART_u8_UCSRB_REG,UART_u8_UCSRB_UCSZ2_BIT);
    #elif   UART_CHARACTER_SIZE == UART_8_BIT_CHARACTER_SIZE
            SET_BIT(Local_u8UCSRCValue,UART_u8_UCSRC_UCSZ0_BIT);
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	82 60       	ori	r24, 0x02	; 2
     eda:	89 83       	std	Y+1, r24	; 0x01
            SET_BIT(Local_u8UCSRCValue,UART_u8_UCSRC_UCSZ1_BIT);
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	84 60       	ori	r24, 0x04	; 4
     ee0:	89 83       	std	Y+1, r24	; 0x01
            CLR_BIT(UART_u8_UCSRB_REG,UART_u8_UCSRB_UCSZ2_BIT);
     ee2:	aa e2       	ldi	r26, 0x2A	; 42
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	ea e2       	ldi	r30, 0x2A	; 42
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	8b 7f       	andi	r24, 0xFB	; 251
     eee:	8c 93       	st	X, r24
    #elif   UART_CHARACTER_SIZE == UART_9_BIT_CHARACTER_SIZE
            SET_BIT(Local_u8UCSRCValue,UART_u8_UCSRC_UCSZ0_BIT);
            SET_BIT(Local_u8UCSRCValue,UART_u8_UCSRC_UCSZ1_BIT);
            SET_BIT(UART_u8_UCSRB_REG,UART_u8_UCSRB_UCSZ2_BIT);
    #endif
    UART_u8_UCSRC_REG=Local_u8UCSRCValue;
     ef0:	e0 e4       	ldi	r30, 0x40	; 64
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	80 83       	st	Z, r24
}
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <UART_voidSendChar>:
void UART_voidSendChar(u8 Copy_u8Char)
{
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	0f 92       	push	r0
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
     f0e:	89 83       	std	Y+1, r24	; 0x01
	while(!(UART_u8_UCSRA_REG & (1 << UART_u8_UCSRA_UDRE_BIT)));
     f10:	eb e2       	ldi	r30, 0x2B	; 43
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	88 2f       	mov	r24, r24
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	80 72       	andi	r24, 0x20	; 32
     f1c:	90 70       	andi	r25, 0x00	; 0
     f1e:	00 97       	sbiw	r24, 0x00	; 0
     f20:	b9 f3       	breq	.-18     	; 0xf10 <UART_voidSendChar+0xc>
   // while((0)==(GET_BIT(UART_u8_UCSRA_REG,UART_u8_UCSRA_UDRE_BIT)));
    UART_u8_UDR_REG = Copy_u8Char;
     f22:	ec e2       	ldi	r30, 0x2C	; 44
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	80 83       	st	Z, r24
}
     f2a:	0f 90       	pop	r0
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <UART_voidSendString>:
void UART_voidSendString(u8  *Copy_pu8String)
{
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	61 97       	sbiw	r28, 0x11	; 17
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	de bf       	out	0x3e, r29	; 62
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	99 8b       	std	Y+17, r25	; 0x11
     f48:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 Local_u8Counter=0; Copy_pu8String[Local_u8Counter] != '\0' ; Local_u8Counter++)
     f4a:	1f 86       	std	Y+15, r1	; 0x0f
     f4c:	80 c0       	rjmp	.+256    	; 0x104e <UART_voidSendString+0x11c>
	{
		  UART_voidSendChar(Copy_pu8String[Local_u8Counter]);
     f4e:	8f 85       	ldd	r24, Y+15	; 0x0f
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	88 89       	ldd	r24, Y+16	; 0x10
     f56:	99 89       	ldd	r25, Y+17	; 0x11
     f58:	fc 01       	movw	r30, r24
     f5a:	e2 0f       	add	r30, r18
     f5c:	f3 1f       	adc	r31, r19
     f5e:	80 81       	ld	r24, Z
     f60:	0e 94 82 07 	call	0xf04	; 0xf04 <UART_voidSendChar>
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a0 e4       	ldi	r26, 0x40	; 64
     f6a:	b0 e4       	ldi	r27, 0x40	; 64
     f6c:	8b 87       	std	Y+11, r24	; 0x0b
     f6e:	9c 87       	std	Y+12, r25	; 0x0c
     f70:	ad 87       	std	Y+13, r26	; 0x0d
     f72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f74:	6b 85       	ldd	r22, Y+11	; 0x0b
     f76:	7c 85       	ldd	r23, Y+12	; 0x0c
     f78:	8d 85       	ldd	r24, Y+13	; 0x0d
     f7a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	4a ef       	ldi	r20, 0xFA	; 250
     f82:	54 e4       	ldi	r21, 0x44	; 68
     f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f88:	dc 01       	movw	r26, r24
     f8a:	cb 01       	movw	r24, r22
     f8c:	8f 83       	std	Y+7, r24	; 0x07
     f8e:	98 87       	std	Y+8, r25	; 0x08
     f90:	a9 87       	std	Y+9, r26	; 0x09
     f92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f94:	6f 81       	ldd	r22, Y+7	; 0x07
     f96:	78 85       	ldd	r23, Y+8	; 0x08
     f98:	89 85       	ldd	r24, Y+9	; 0x09
     f9a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	40 e8       	ldi	r20, 0x80	; 128
     fa2:	5f e3       	ldi	r21, 0x3F	; 63
     fa4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fa8:	88 23       	and	r24, r24
     faa:	2c f4       	brge	.+10     	; 0xfb6 <UART_voidSendString+0x84>
		__ticks = 1;
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	9e 83       	std	Y+6, r25	; 0x06
     fb2:	8d 83       	std	Y+5, r24	; 0x05
     fb4:	3f c0       	rjmp	.+126    	; 0x1034 <UART_voidSendString+0x102>
	else if (__tmp > 65535)
     fb6:	6f 81       	ldd	r22, Y+7	; 0x07
     fb8:	78 85       	ldd	r23, Y+8	; 0x08
     fba:	89 85       	ldd	r24, Y+9	; 0x09
     fbc:	9a 85       	ldd	r25, Y+10	; 0x0a
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	3f ef       	ldi	r19, 0xFF	; 255
     fc2:	4f e7       	ldi	r20, 0x7F	; 127
     fc4:	57 e4       	ldi	r21, 0x47	; 71
     fc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fca:	18 16       	cp	r1, r24
     fcc:	4c f5       	brge	.+82     	; 0x1020 <UART_voidSendString+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fce:	6b 85       	ldd	r22, Y+11	; 0x0b
     fd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     fd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     fd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e2       	ldi	r20, 0x20	; 32
     fdc:	51 e4       	ldi	r21, 0x41	; 65
     fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe2:	dc 01       	movw	r26, r24
     fe4:	cb 01       	movw	r24, r22
     fe6:	bc 01       	movw	r22, r24
     fe8:	cd 01       	movw	r24, r26
     fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	9e 83       	std	Y+6, r25	; 0x06
     ff4:	8d 83       	std	Y+5, r24	; 0x05
     ff6:	0f c0       	rjmp	.+30     	; 0x1016 <UART_voidSendString+0xe4>
     ff8:	88 ec       	ldi	r24, 0xC8	; 200
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	9c 83       	std	Y+4, r25	; 0x04
     ffe:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	9c 81       	ldd	r25, Y+4	; 0x04
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	f1 f7       	brne	.-4      	; 0x1004 <UART_voidSendString+0xd2>
    1008:	9c 83       	std	Y+4, r25	; 0x04
    100a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    100c:	8d 81       	ldd	r24, Y+5	; 0x05
    100e:	9e 81       	ldd	r25, Y+6	; 0x06
    1010:	01 97       	sbiw	r24, 0x01	; 1
    1012:	9e 83       	std	Y+6, r25	; 0x06
    1014:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1016:	8d 81       	ldd	r24, Y+5	; 0x05
    1018:	9e 81       	ldd	r25, Y+6	; 0x06
    101a:	00 97       	sbiw	r24, 0x00	; 0
    101c:	69 f7       	brne	.-38     	; 0xff8 <UART_voidSendString+0xc6>
    101e:	14 c0       	rjmp	.+40     	; 0x1048 <UART_voidSendString+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1020:	6f 81       	ldd	r22, Y+7	; 0x07
    1022:	78 85       	ldd	r23, Y+8	; 0x08
    1024:	89 85       	ldd	r24, Y+9	; 0x09
    1026:	9a 85       	ldd	r25, Y+10	; 0x0a
    1028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    102c:	dc 01       	movw	r26, r24
    102e:	cb 01       	movw	r24, r22
    1030:	9e 83       	std	Y+6, r25	; 0x06
    1032:	8d 83       	std	Y+5, r24	; 0x05
    1034:	8d 81       	ldd	r24, Y+5	; 0x05
    1036:	9e 81       	ldd	r25, Y+6	; 0x06
    1038:	9a 83       	std	Y+2, r25	; 0x02
    103a:	89 83       	std	Y+1, r24	; 0x01
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	9a 81       	ldd	r25, Y+2	; 0x02
    1040:	01 97       	sbiw	r24, 0x01	; 1
    1042:	f1 f7       	brne	.-4      	; 0x1040 <UART_voidSendString+0x10e>
    1044:	9a 83       	std	Y+2, r25	; 0x02
    1046:	89 83       	std	Y+1, r24	; 0x01
   // while((0)==(GET_BIT(UART_u8_UCSRA_REG,UART_u8_UCSRA_UDRE_BIT)));
    UART_u8_UDR_REG = Copy_u8Char;
}
void UART_voidSendString(u8  *Copy_pu8String)
{
	for(u8 Local_u8Counter=0; Copy_pu8String[Local_u8Counter] != '\0' ; Local_u8Counter++)
    1048:	8f 85       	ldd	r24, Y+15	; 0x0f
    104a:	8f 5f       	subi	r24, 0xFF	; 255
    104c:	8f 87       	std	Y+15, r24	; 0x0f
    104e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	88 89       	ldd	r24, Y+16	; 0x10
    1056:	99 89       	ldd	r25, Y+17	; 0x11
    1058:	fc 01       	movw	r30, r24
    105a:	e2 0f       	add	r30, r18
    105c:	f3 1f       	adc	r31, r19
    105e:	80 81       	ld	r24, Z
    1060:	88 23       	and	r24, r24
    1062:	09 f0       	breq	.+2      	; 0x1066 <UART_voidSendString+0x134>
    1064:	74 cf       	rjmp	.-280    	; 0xf4e <UART_voidSendString+0x1c>
	{
		  UART_voidSendChar(Copy_pu8String[Local_u8Counter]);
		  _delay_ms(3);
	}

}
    1066:	61 96       	adiw	r28, 0x11	; 17
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	de bf       	out	0x3e, r29	; 62
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	cd bf       	out	0x3d, r28	; 61
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	08 95       	ret

00001078 <UART_u8GetCharBlocking>:
u8 UART_u8GetCharBlocking(void)
{
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	0f 92       	push	r0
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
	 u8 Local_u8Char;
	 //while(!(UART_u8_UCSRA_REG & (1 << UART_u8_UCSRA_RXC_BIT)));
	 while((0)==(GET_BIT(UART_u8_UCSRA_REG,UART_u8_UCSRA_RXC_BIT)));
    1082:	eb e2       	ldi	r30, 0x2B	; 43
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	88 23       	and	r24, r24
    108a:	dc f7       	brge	.-10     	; 0x1082 <UART_u8GetCharBlocking+0xa>
	 Local_u8Char=UART_u8_UDR_REG;
    108c:	ec e2       	ldi	r30, 0x2C	; 44
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	89 83       	std	Y+1, r24	; 0x01
     return Local_u8Char;
    1094:	89 81       	ldd	r24, Y+1	; 0x01
}
    1096:	0f 90       	pop	r0
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	08 95       	ret

0000109e <UART_u8GetCharNonBlocking>:
u8 UART_u8GetCharNonBlocking(void)
{
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <UART_u8GetCharNonBlocking+0x6>
    10a4:	0f 92       	push	r0
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    10aa:	05 c0       	rjmp	.+10     	; 0x10b6 <UART_u8GetCharNonBlocking+0x18>
	 u8 Local_u8Char;
	 u16 Local_u16Counter;
	 while(((Local_u16Counter)<(2000))&&(0==(GET_BIT(UART_u8_UCSRA_REG,UART_u8_UCSRA_RXC_BIT))))
	 {
		 Local_u16Counter++;
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	9a 81       	ldd	r25, Y+2	; 0x02
    10b0:	01 96       	adiw	r24, 0x01	; 1
    10b2:	9a 83       	std	Y+2, r25	; 0x02
    10b4:	89 83       	std	Y+1, r24	; 0x01
}
u8 UART_u8GetCharNonBlocking(void)
{
	 u8 Local_u8Char;
	 u16 Local_u16Counter;
	 while(((Local_u16Counter)<(2000))&&(0==(GET_BIT(UART_u8_UCSRA_REG,UART_u8_UCSRA_RXC_BIT))))
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ba:	27 e0       	ldi	r18, 0x07	; 7
    10bc:	80 3d       	cpi	r24, 0xD0	; 208
    10be:	92 07       	cpc	r25, r18
    10c0:	28 f4       	brcc	.+10     	; 0x10cc <UART_u8GetCharNonBlocking+0x2e>
    10c2:	eb e2       	ldi	r30, 0x2B	; 43
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	88 23       	and	r24, r24
    10ca:	84 f7       	brge	.-32     	; 0x10ac <UART_u8GetCharNonBlocking+0xe>
	 {
		 Local_u16Counter++;
	 }
	 Local_u8Char=UART_u8_UDR_REG;
    10cc:	ec e2       	ldi	r30, 0x2C	; 44
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	8b 83       	std	Y+3, r24	; 0x03
     return Local_u8Char;
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <TIMER_voidTimer0Init>:
u32 TIMER0_f32OVCounterTmp;
f32 TIMER0_u16Prescaller;
u32 TIMER0_f32CounterCTC;
/**********************************************************************************/
void TIMER_voidTimer0Init(void)
{
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_TOIE0_BIT);
		CLR_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_OCIE0_BIT);

		TIMER_u8_TCNT0_REG=TIMER0_f32PreloodValue;
	#elif TIMER0_MODE  == TIMER0_MODE_PWM_PHASE_CORRECT
		SET_BIT(TIMER_u8_TCCR0_REG,TIMER_u8_TCCR0_WGM00_BIT);
    10ea:	a3 e5       	ldi	r26, 0x53	; 83
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e3 e5       	ldi	r30, 0x53	; 83
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	80 64       	ori	r24, 0x40	; 64
    10f6:	8c 93       	st	X, r24
	    CLR_BIT(TIMER_u8_TCCR0_REG,TIMER_u8_TCCR0_WGM01_BIT);
    10f8:	a3 e5       	ldi	r26, 0x53	; 83
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e3 e5       	ldi	r30, 0x53	; 83
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	87 7f       	andi	r24, 0xF7	; 247
    1104:	8c 93       	st	X, r24
         CLR_BIT(TIMER_u8_TCCR0_REG,TIMER_u8_TCCR0_COM01_BIT);
    #elif  TIMER0_COMPARE_OUTPUT_MODE==TIMER0_MODE_TOGGLE
         SET_BIT(TIMER_u8_TCCR0_REG,TIMER_u8_TCCR0_COM00_BIT);
         CLR_BIT(TIMER_u8_TCCR0_REG,TIMER_u8_TCCR0_COM01_BIT);
    #elif  TIMER0_COMPARE_OUTPUT_MODE==TIMER0_MODE_CLEAR_OC0
         CLR_BIT(TIMER_u8_TCCR0_REG,TIMER_u8_TCCR0_COM00_BIT);
    1106:	a3 e5       	ldi	r26, 0x53	; 83
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e3 e5       	ldi	r30, 0x53	; 83
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	8f 7e       	andi	r24, 0xEF	; 239
    1112:	8c 93       	st	X, r24
         SET_BIT(TIMER_u8_TCCR0_REG,TIMER_u8_TCCR0_COM01_BIT);
    1114:	a3 e5       	ldi	r26, 0x53	; 83
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e3 e5       	ldi	r30, 0x53	; 83
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	80 62       	ori	r24, 0x20	; 32
    1120:	8c 93       	st	X, r24
        CLR_BIT(TIMER_u8_TCCR0_REG,TIMER_u8_TCCR0_CS00_BIT);
	    CLR_BIT(TIMER_u8_TCCR0_REG,TIMER_u8_TCCR0_CS01_BIT);
	    SET_BIT(TIMER_u8_TCCR0_REG,TIMER_u8_TCCR0_CS02_BIT);
	    TIMER0_u16Prescaller=256;
    #elif  TIMER0_CLOCK_SELECT == TIMER0_SELECT_CLK_DIV_1024
        SET_BIT(TIMER_u8_TCCR0_REG,TIMER_u8_TCCR0_CS00_BIT);
    1122:	a3 e5       	ldi	r26, 0x53	; 83
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	e3 e5       	ldi	r30, 0x53	; 83
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	81 60       	ori	r24, 0x01	; 1
    112e:	8c 93       	st	X, r24
	    CLR_BIT(TIMER_u8_TCCR0_REG,TIMER_u8_TCCR0_CS01_BIT);
    1130:	a3 e5       	ldi	r26, 0x53	; 83
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e3 e5       	ldi	r30, 0x53	; 83
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	8d 7f       	andi	r24, 0xFD	; 253
    113c:	8c 93       	st	X, r24
	    SET_BIT(TIMER_u8_TCCR0_REG,TIMER_u8_TCCR0_CS02_BIT);
    113e:	a3 e5       	ldi	r26, 0x53	; 83
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e3 e5       	ldi	r30, 0x53	; 83
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	84 60       	ori	r24, 0x04	; 4
    114a:	8c 93       	st	X, r24
	    TIMER0_u16Prescaller=1024;
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	a0 e8       	ldi	r26, 0x80	; 128
    1152:	b4 e4       	ldi	r27, 0x44	; 68
    1154:	80 93 88 01 	sts	0x0188, r24
    1158:	90 93 89 01 	sts	0x0189, r25
    115c:	a0 93 8a 01 	sts	0x018A, r26
    1160:	b0 93 8b 01 	sts	0x018B, r27
        SET_BIT(TIMER_u8_TCCR0_REG,TIMER_u8_TCCR0_CS00_BIT);
	    SET_BIT(TIMER_u8_TCCR0_REG,TIMER_u8_TCCR0_CS01_BIT);
	    SET_BIT(TIMER_u8_TCCR0_REG,TIMER_u8_TCCR0_CS02_BIT);
	    TIMER0_u16Prescaller=0;
	#endif
}
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <TIMER_voidTimer0Delay>:
/**********************************************************************************/
void TIMER_voidTimer0Delay(u32 Copy_u32DTime,void(*Copy_pFun)(void))
{
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	00 d0       	rcall	.+0      	; 0x1170 <TIMER_voidTimer0Delay+0x6>
    1170:	00 d0       	rcall	.+0      	; 0x1172 <TIMER_voidTimer0Delay+0x8>
    1172:	00 d0       	rcall	.+0      	; 0x1174 <TIMER_voidTimer0Delay+0xa>
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	69 83       	std	Y+1, r22	; 0x01
    117a:	7a 83       	std	Y+2, r23	; 0x02
    117c:	8b 83       	std	Y+3, r24	; 0x03
    117e:	9c 83       	std	Y+4, r25	; 0x04
    1180:	5e 83       	std	Y+6, r21	; 0x06
    1182:	4d 83       	std	Y+5, r20	; 0x05
    #elif TIMER0_MODE  == TIMER0_MODE_CTC
	   f32 Local_f32TCTC=((TIMER0_CTC_OCR0_VALUE)*(TIMER0_u16Prescaller/8000UL));
	   TIMER0_f32CounterCTC=((f32)Copy_u32DTime/Local_f32TCTC);
	   TIMER0_pSetCallBack=Copy_pFun;
    #endif
}
    1184:	26 96       	adiw	r28, 0x06	; 6
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	de bf       	out	0x3e, r29	; 62
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	cd bf       	out	0x3d, r28	; 61
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <TIMER_voidTimer0GeneratePWM>:
/**********************************************************************************/
void TIMER_voidTimer0GeneratePWM(f32 Copy_u8Intensity)
{
    1196:	0f 93       	push	r16
    1198:	1f 93       	push	r17
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	28 97       	sbiw	r28, 0x08	; 8
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	cd bf       	out	0x3d, r28	; 61
    11ae:	6d 83       	std	Y+5, r22	; 0x05
    11b0:	7e 83       	std	Y+6, r23	; 0x06
    11b2:	8f 83       	std	Y+7, r24	; 0x07
    11b4:	98 87       	std	Y+8, r25	; 0x08
   #if TIMER0_MODE  == TIMER0_MODE_PWM_PHASE_CORRECT
	   f32 Copy_u8OCRValue;
	   Copy_u8OCRValue=(510*Copy_u8Intensity)/200;
    11b6:	6d 81       	ldd	r22, Y+5	; 0x05
    11b8:	7e 81       	ldd	r23, Y+6	; 0x06
    11ba:	8f 81       	ldd	r24, Y+7	; 0x07
    11bc:	98 85       	ldd	r25, Y+8	; 0x08
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	4f ef       	ldi	r20, 0xFF	; 255
    11c4:	53 e4       	ldi	r21, 0x43	; 67
    11c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	bc 01       	movw	r22, r24
    11d0:	cd 01       	movw	r24, r26
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	48 e4       	ldi	r20, 0x48	; 72
    11d8:	53 e4       	ldi	r21, 0x43	; 67
    11da:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    11de:	dc 01       	movw	r26, r24
    11e0:	cb 01       	movw	r24, r22
    11e2:	89 83       	std	Y+1, r24	; 0x01
    11e4:	9a 83       	std	Y+2, r25	; 0x02
    11e6:	ab 83       	std	Y+3, r26	; 0x03
    11e8:	bc 83       	std	Y+4, r27	; 0x04
	   TIMER_u8_OCR0_REG=Copy_u8OCRValue;
    11ea:	0c e5       	ldi	r16, 0x5C	; 92
    11ec:	10 e0       	ldi	r17, 0x00	; 0
    11ee:	69 81       	ldd	r22, Y+1	; 0x01
    11f0:	7a 81       	ldd	r23, Y+2	; 0x02
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	9c 81       	ldd	r25, Y+4	; 0x04
    11f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	f8 01       	movw	r30, r16
    1200:	80 83       	st	Z, r24
   #elif TIMER0_MODE  == TIMER0_MODE_FAST_PWM
	   f32 Copy_u8OCRValue;
	   Copy_u8OCRValue=(256*Copy_u8Intensity/100);
	   TIMER_u8_OCR0_REG=Copy_u8OCRValue;
   #endif
}
    1202:	28 96       	adiw	r28, 0x08	; 8
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	1f 91       	pop	r17
    1214:	0f 91       	pop	r16
    1216:	08 95       	ret

00001218 <__vector_11>:
/**********************************************************************************/
void __vector_11 (void)
{
    1218:	1f 92       	push	r1
    121a:	0f 92       	push	r0
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	0f 92       	push	r0
    1220:	11 24       	eor	r1, r1
    1222:	2f 93       	push	r18
    1224:	3f 93       	push	r19
    1226:	4f 93       	push	r20
    1228:	5f 93       	push	r21
    122a:	6f 93       	push	r22
    122c:	7f 93       	push	r23
    122e:	8f 93       	push	r24
    1230:	9f 93       	push	r25
    1232:	af 93       	push	r26
    1234:	bf 93       	push	r27
    1236:	ef 93       	push	r30
    1238:	ff 93       	push	r31
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
	   static u16 Local_u16Counter=0;
	   Local_u16Counter++;
    1242:	80 91 6e 01 	lds	r24, 0x016E
    1246:	90 91 6f 01 	lds	r25, 0x016F
    124a:	01 96       	adiw	r24, 0x01	; 1
    124c:	90 93 6f 01 	sts	0x016F, r25
    1250:	80 93 6e 01 	sts	0x016E, r24
	   if(TIMER0_f32OVCounterTmp==Local_u16Counter)
    1254:	80 91 6e 01 	lds	r24, 0x016E
    1258:	90 91 6f 01 	lds	r25, 0x016F
    125c:	9c 01       	movw	r18, r24
    125e:	40 e0       	ldi	r20, 0x00	; 0
    1260:	50 e0       	ldi	r21, 0x00	; 0
    1262:	80 91 84 01 	lds	r24, 0x0184
    1266:	90 91 85 01 	lds	r25, 0x0185
    126a:	a0 91 86 01 	lds	r26, 0x0186
    126e:	b0 91 87 01 	lds	r27, 0x0187
    1272:	28 17       	cp	r18, r24
    1274:	39 07       	cpc	r19, r25
    1276:	4a 07       	cpc	r20, r26
    1278:	5b 07       	cpc	r21, r27
    127a:	a1 f4       	brne	.+40     	; 0x12a4 <__vector_11+0x8c>
	   {
		   TIMER_u8_TCNT0_REG=TIMER0_f32PreloodValue;
    127c:	e2 e5       	ldi	r30, 0x52	; 82
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 91 80 01 	lds	r24, 0x0180
    1284:	90 91 81 01 	lds	r25, 0x0181
    1288:	a0 91 82 01 	lds	r26, 0x0182
    128c:	b0 91 83 01 	lds	r27, 0x0183
    1290:	80 83       	st	Z, r24
		   TIMER0_pSetCallBack();
    1292:	e0 91 76 01 	lds	r30, 0x0176
    1296:	f0 91 77 01 	lds	r31, 0x0177
    129a:	09 95       	icall
		   Local_u16Counter=0;
    129c:	10 92 6f 01 	sts	0x016F, r1
    12a0:	10 92 6e 01 	sts	0x016E, r1
	   }
}
    12a4:	cf 91       	pop	r28
    12a6:	df 91       	pop	r29
    12a8:	ff 91       	pop	r31
    12aa:	ef 91       	pop	r30
    12ac:	bf 91       	pop	r27
    12ae:	af 91       	pop	r26
    12b0:	9f 91       	pop	r25
    12b2:	8f 91       	pop	r24
    12b4:	7f 91       	pop	r23
    12b6:	6f 91       	pop	r22
    12b8:	5f 91       	pop	r21
    12ba:	4f 91       	pop	r20
    12bc:	3f 91       	pop	r19
    12be:	2f 91       	pop	r18
    12c0:	0f 90       	pop	r0
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	0f 90       	pop	r0
    12c6:	1f 90       	pop	r1
    12c8:	18 95       	reti

000012ca <__vector_10>:
void __vector_10 (void)
{
    12ca:	1f 92       	push	r1
    12cc:	0f 92       	push	r0
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	0f 92       	push	r0
    12d2:	11 24       	eor	r1, r1
    12d4:	2f 93       	push	r18
    12d6:	3f 93       	push	r19
    12d8:	4f 93       	push	r20
    12da:	5f 93       	push	r21
    12dc:	6f 93       	push	r22
    12de:	7f 93       	push	r23
    12e0:	8f 93       	push	r24
    12e2:	9f 93       	push	r25
    12e4:	af 93       	push	r26
    12e6:	bf 93       	push	r27
    12e8:	ef 93       	push	r30
    12ea:	ff 93       	push	r31
    12ec:	df 93       	push	r29
    12ee:	cf 93       	push	r28
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
	   static u16 Local_u8Counter=0;
	   Local_u8Counter++;
    12f4:	80 91 70 01 	lds	r24, 0x0170
    12f8:	90 91 71 01 	lds	r25, 0x0171
    12fc:	01 96       	adiw	r24, 0x01	; 1
    12fe:	90 93 71 01 	sts	0x0171, r25
    1302:	80 93 70 01 	sts	0x0170, r24
	   if(TIMER0_f32CounterCTC==Local_u8Counter)
    1306:	80 91 70 01 	lds	r24, 0x0170
    130a:	90 91 71 01 	lds	r25, 0x0171
    130e:	9c 01       	movw	r18, r24
    1310:	40 e0       	ldi	r20, 0x00	; 0
    1312:	50 e0       	ldi	r21, 0x00	; 0
    1314:	80 91 94 01 	lds	r24, 0x0194
    1318:	90 91 95 01 	lds	r25, 0x0195
    131c:	a0 91 96 01 	lds	r26, 0x0196
    1320:	b0 91 97 01 	lds	r27, 0x0197
    1324:	28 17       	cp	r18, r24
    1326:	39 07       	cpc	r19, r25
    1328:	4a 07       	cpc	r20, r26
    132a:	5b 07       	cpc	r21, r27
    132c:	49 f4       	brne	.+18     	; 0x1340 <__vector_10+0x76>
	   {
		   Local_u8Counter=0;
    132e:	10 92 71 01 	sts	0x0171, r1
    1332:	10 92 70 01 	sts	0x0170, r1
		   TIMER0_pSetCallBack();
    1336:	e0 91 76 01 	lds	r30, 0x0176
    133a:	f0 91 77 01 	lds	r31, 0x0177
    133e:	09 95       	icall
	   }
}
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	ff 91       	pop	r31
    1346:	ef 91       	pop	r30
    1348:	bf 91       	pop	r27
    134a:	af 91       	pop	r26
    134c:	9f 91       	pop	r25
    134e:	8f 91       	pop	r24
    1350:	7f 91       	pop	r23
    1352:	6f 91       	pop	r22
    1354:	5f 91       	pop	r21
    1356:	4f 91       	pop	r20
    1358:	3f 91       	pop	r19
    135a:	2f 91       	pop	r18
    135c:	0f 90       	pop	r0
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	0f 90       	pop	r0
    1362:	1f 90       	pop	r1
    1364:	18 95       	reti

00001366 <TIMER_voidTimer2Init>:
f32 TIMER2_u16Prescaller;
u32 TIMER2_f32CounterCTC;
/**********************************************************************************/

void TIMER_voidTimer2Init(void)
{
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_TOIE2_BIT);
		CLR_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_OCIE2_BIT);

		TIMER_u8_TCNT2_REG=TIMER2_f32PreloodValue;
	#elif TIMER2_MODE  == TIMER2_MODE_PWM_PHASE_CORRECT
		SET_BIT(TIMER_u8_TCCR2_REG,TIMER_u8_TCCR2_WGM20_BIT);
    136e:	a5 e4       	ldi	r26, 0x45	; 69
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	e5 e4       	ldi	r30, 0x45	; 69
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	80 64       	ori	r24, 0x40	; 64
    137a:	8c 93       	st	X, r24
	    CLR_BIT(TIMER_u8_TCCR2_REG,TIMER_u8_TCCR2_WGM21_BIT);
    137c:	a5 e4       	ldi	r26, 0x45	; 69
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	e5 e4       	ldi	r30, 0x45	; 69
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	87 7f       	andi	r24, 0xF7	; 247
    1388:	8c 93       	st	X, r24
         CLR_BIT(TIMER_u8_TCCR2_REG,TIMER_u8_TCCR2_COM21_BIT);
    #elif  TIMER2_COMPARE_OUTPUT_MODE==TIMER2_MODE_TOGGLE
         SET_BIT(TIMER_u8_TCCR2_REG,TIMER_u8_TCCR2_COM20_BIT);
         CLR_BIT(TIMER_u8_TCCR2_REG,TIMER_u8_TCCR2_COM21_BIT);
    #elif  TIMER2_COMPARE_OUTPUT_MODE==TIMER2_MODE_CLEAR_OC2
         CLR_BIT(TIMER_u8_TCCR2_REG,TIMER_u8_TCCR2_COM20_BIT);
    138a:	a5 e4       	ldi	r26, 0x45	; 69
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	e5 e4       	ldi	r30, 0x45	; 69
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	8f 7e       	andi	r24, 0xEF	; 239
    1396:	8c 93       	st	X, r24
         SET_BIT(TIMER_u8_TCCR2_REG,TIMER_u8_TCCR2_COM21_BIT);
    1398:	a5 e4       	ldi	r26, 0x45	; 69
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e5 e4       	ldi	r30, 0x45	; 69
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	80 62       	ori	r24, 0x20	; 32
    13a4:	8c 93       	st	X, r24
        CLR_BIT(TIMER_u8_TCCR2_REG,TIMER_u8_TCCR2_CS20_BIT);
	    CLR_BIT(TIMER_u8_TCCR2_REG,TIMER_u8_TCCR2_CS21_BIT);
	    SET_BIT(TIMER_u8_TCCR2_REG,TIMER_u8_TCCR2_CS22_BIT);
	    TIMER2_u16Prescaller=256;
    #elif  TIMER2_CLOCK_SELECT == TIMER2_SELECT_CLK_DIV_1024
        SET_BIT(TIMER_u8_TCCR2_REG,TIMER_u8_TCCR2_CS20_BIT);
    13a6:	a5 e4       	ldi	r26, 0x45	; 69
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e5 e4       	ldi	r30, 0x45	; 69
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	81 60       	ori	r24, 0x01	; 1
    13b2:	8c 93       	st	X, r24
	    CLR_BIT(TIMER_u8_TCCR2_REG,TIMER_u8_TCCR2_CS21_BIT);
    13b4:	a5 e4       	ldi	r26, 0x45	; 69
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e5 e4       	ldi	r30, 0x45	; 69
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	8d 7f       	andi	r24, 0xFD	; 253
    13c0:	8c 93       	st	X, r24
	    SET_BIT(TIMER_u8_TCCR2_REG,TIMER_u8_TCCR2_CS22_BIT);
    13c2:	a5 e4       	ldi	r26, 0x45	; 69
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e5 e4       	ldi	r30, 0x45	; 69
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	84 60       	ori	r24, 0x04	; 4
    13ce:	8c 93       	st	X, r24
	    TIMER2_u16Prescaller=1024;
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	a0 e8       	ldi	r26, 0x80	; 128
    13d6:	b4 e4       	ldi	r27, 0x44	; 68
    13d8:	80 93 90 01 	sts	0x0190, r24
    13dc:	90 93 91 01 	sts	0x0191, r25
    13e0:	a0 93 92 01 	sts	0x0192, r26
    13e4:	b0 93 93 01 	sts	0x0193, r27
        SET_BIT(TIMER_u8_TCCR2_REG,TIMER_u8_TCCR2_CS20_BIT);
	    SET_BIT(TIMER_u8_TCCR2_REG,TIMER_u8_TCCR2_CS21_BIT);
	    SET_BIT(TIMER_u8_TCCR2_REG,TIMER_u8_TCCR2_CS22_BIT);
	    TIMER2_u16Prescaller=0;
	#endif
}
    13e8:	cf 91       	pop	r28
    13ea:	df 91       	pop	r29
    13ec:	08 95       	ret

000013ee <TIMER_voidTimer2Delay>:
/**********************************************************************************/
void TIMER_voidTimer2Delay(u32 Copy_u32DTime,void(*Copy_pFun)(void))
{
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	00 d0       	rcall	.+0      	; 0x13f4 <TIMER_voidTimer2Delay+0x6>
    13f4:	00 d0       	rcall	.+0      	; 0x13f6 <TIMER_voidTimer2Delay+0x8>
    13f6:	00 d0       	rcall	.+0      	; 0x13f8 <TIMER_voidTimer2Delay+0xa>
    13f8:	cd b7       	in	r28, 0x3d	; 61
    13fa:	de b7       	in	r29, 0x3e	; 62
    13fc:	69 83       	std	Y+1, r22	; 0x01
    13fe:	7a 83       	std	Y+2, r23	; 0x02
    1400:	8b 83       	std	Y+3, r24	; 0x03
    1402:	9c 83       	std	Y+4, r25	; 0x04
    1404:	5e 83       	std	Y+6, r21	; 0x06
    1406:	4d 83       	std	Y+5, r20	; 0x05
    #elif TIMER2_MODE  == TIMER2_MODE_CTC
	   f32 Local_f32TCTC=((TIMER2_CTC_OCR2_VALUE)*(TIMER2_u16Prescaller/8000UL));
	   TIMER2_f32CounterCTC=((f32)Copy_u32DTime/Local_f32TCTC);
	   TIMER2_pSetCallBack=Copy_pFun;
    #endif
}
    1408:	26 96       	adiw	r28, 0x06	; 6
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	de bf       	out	0x3e, r29	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	cd bf       	out	0x3d, r28	; 61
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <TIMER_voidTimer2GeneratePWM>:
/**********************************************************************************/
void TIMER_voidTimer2GeneratePWM(f32 Copy_u8Intensity)
{
    141a:	0f 93       	push	r16
    141c:	1f 93       	push	r17
    141e:	df 93       	push	r29
    1420:	cf 93       	push	r28
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	28 97       	sbiw	r28, 0x08	; 8
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	de bf       	out	0x3e, r29	; 62
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	cd bf       	out	0x3d, r28	; 61
    1432:	6d 83       	std	Y+5, r22	; 0x05
    1434:	7e 83       	std	Y+6, r23	; 0x06
    1436:	8f 83       	std	Y+7, r24	; 0x07
    1438:	98 87       	std	Y+8, r25	; 0x08
   #if TIMER2_MODE  == TIMER2_MODE_PWM_PHASE_CORRECT
	   f32 Copy_u8OCRValue;
	   Copy_u8OCRValue=(510*Copy_u8Intensity)/200;
    143a:	6d 81       	ldd	r22, Y+5	; 0x05
    143c:	7e 81       	ldd	r23, Y+6	; 0x06
    143e:	8f 81       	ldd	r24, Y+7	; 0x07
    1440:	98 85       	ldd	r25, Y+8	; 0x08
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	4f ef       	ldi	r20, 0xFF	; 255
    1448:	53 e4       	ldi	r21, 0x43	; 67
    144a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	bc 01       	movw	r22, r24
    1454:	cd 01       	movw	r24, r26
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	48 e4       	ldi	r20, 0x48	; 72
    145c:	53 e4       	ldi	r21, 0x43	; 67
    145e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	89 83       	std	Y+1, r24	; 0x01
    1468:	9a 83       	std	Y+2, r25	; 0x02
    146a:	ab 83       	std	Y+3, r26	; 0x03
    146c:	bc 83       	std	Y+4, r27	; 0x04
	   TIMER_u8_OCR2_REG=Copy_u8OCRValue;
    146e:	03 e4       	ldi	r16, 0x43	; 67
    1470:	10 e0       	ldi	r17, 0x00	; 0
    1472:	69 81       	ldd	r22, Y+1	; 0x01
    1474:	7a 81       	ldd	r23, Y+2	; 0x02
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	9c 81       	ldd	r25, Y+4	; 0x04
    147a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    147e:	dc 01       	movw	r26, r24
    1480:	cb 01       	movw	r24, r22
    1482:	f8 01       	movw	r30, r16
    1484:	80 83       	st	Z, r24
   #elif TIMER2_MODE  == TIMER2_MODE_FAST_PWM
	   f32 Copy_u8OCRValue;
	   Copy_u8OCRValue=(256*Copy_u8Intensity/100);
	   TIMER_u8_OCR2_REG=Copy_u8OCRValue;
   #endif
}
    1486:	28 96       	adiw	r28, 0x08	; 8
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	f8 94       	cli
    148c:	de bf       	out	0x3e, r29	; 62
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	cd bf       	out	0x3d, r28	; 61
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	1f 91       	pop	r17
    1498:	0f 91       	pop	r16
    149a:	08 95       	ret

0000149c <__vector_5>:
/**********************************************************************************/
void __vector_5 (void)
{
    149c:	1f 92       	push	r1
    149e:	0f 92       	push	r0
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	0f 92       	push	r0
    14a4:	11 24       	eor	r1, r1
    14a6:	2f 93       	push	r18
    14a8:	3f 93       	push	r19
    14aa:	4f 93       	push	r20
    14ac:	5f 93       	push	r21
    14ae:	6f 93       	push	r22
    14b0:	7f 93       	push	r23
    14b2:	8f 93       	push	r24
    14b4:	9f 93       	push	r25
    14b6:	af 93       	push	r26
    14b8:	bf 93       	push	r27
    14ba:	ef 93       	push	r30
    14bc:	ff 93       	push	r31
    14be:	df 93       	push	r29
    14c0:	cf 93       	push	r28
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
	   static u16 Local_u16Counter=0;
	   Local_u16Counter++;
    14c6:	80 91 72 01 	lds	r24, 0x0172
    14ca:	90 91 73 01 	lds	r25, 0x0173
    14ce:	01 96       	adiw	r24, 0x01	; 1
    14d0:	90 93 73 01 	sts	0x0173, r25
    14d4:	80 93 72 01 	sts	0x0172, r24
	   if(TIMER2_f32OVCounter==Local_u16Counter)
    14d8:	80 91 72 01 	lds	r24, 0x0172
    14dc:	90 91 73 01 	lds	r25, 0x0173
    14e0:	9c 01       	movw	r18, r24
    14e2:	40 e0       	ldi	r20, 0x00	; 0
    14e4:	50 e0       	ldi	r21, 0x00	; 0
    14e6:	80 91 8c 01 	lds	r24, 0x018C
    14ea:	90 91 8d 01 	lds	r25, 0x018D
    14ee:	a0 91 8e 01 	lds	r26, 0x018E
    14f2:	b0 91 8f 01 	lds	r27, 0x018F
    14f6:	28 17       	cp	r18, r24
    14f8:	39 07       	cpc	r19, r25
    14fa:	4a 07       	cpc	r20, r26
    14fc:	5b 07       	cpc	r21, r27
    14fe:	a1 f4       	brne	.+40     	; 0x1528 <__vector_5+0x8c>
	   {
		   TIMER_u8_TCNT2_REG=TIMER2_f32PreloodValue;
    1500:	e4 e4       	ldi	r30, 0x44	; 68
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 91 9c 01 	lds	r24, 0x019C
    1508:	90 91 9d 01 	lds	r25, 0x019D
    150c:	a0 91 9e 01 	lds	r26, 0x019E
    1510:	b0 91 9f 01 	lds	r27, 0x019F
    1514:	80 83       	st	Z, r24
		   TIMER2_pSetCallBack();
    1516:	e0 91 78 01 	lds	r30, 0x0178
    151a:	f0 91 79 01 	lds	r31, 0x0179
    151e:	09 95       	icall
		   Local_u16Counter=0;
    1520:	10 92 73 01 	sts	0x0173, r1
    1524:	10 92 72 01 	sts	0x0172, r1
	   }
}
    1528:	cf 91       	pop	r28
    152a:	df 91       	pop	r29
    152c:	ff 91       	pop	r31
    152e:	ef 91       	pop	r30
    1530:	bf 91       	pop	r27
    1532:	af 91       	pop	r26
    1534:	9f 91       	pop	r25
    1536:	8f 91       	pop	r24
    1538:	7f 91       	pop	r23
    153a:	6f 91       	pop	r22
    153c:	5f 91       	pop	r21
    153e:	4f 91       	pop	r20
    1540:	3f 91       	pop	r19
    1542:	2f 91       	pop	r18
    1544:	0f 90       	pop	r0
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	0f 90       	pop	r0
    154a:	1f 90       	pop	r1
    154c:	18 95       	reti

0000154e <__vector_4>:
void __vector_4 (void)
{
    154e:	1f 92       	push	r1
    1550:	0f 92       	push	r0
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	0f 92       	push	r0
    1556:	11 24       	eor	r1, r1
    1558:	2f 93       	push	r18
    155a:	3f 93       	push	r19
    155c:	4f 93       	push	r20
    155e:	5f 93       	push	r21
    1560:	6f 93       	push	r22
    1562:	7f 93       	push	r23
    1564:	8f 93       	push	r24
    1566:	9f 93       	push	r25
    1568:	af 93       	push	r26
    156a:	bf 93       	push	r27
    156c:	ef 93       	push	r30
    156e:	ff 93       	push	r31
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
	   static u16 Local_u8Counter=0;
	   Local_u8Counter++;
    1578:	80 91 74 01 	lds	r24, 0x0174
    157c:	90 91 75 01 	lds	r25, 0x0175
    1580:	01 96       	adiw	r24, 0x01	; 1
    1582:	90 93 75 01 	sts	0x0175, r25
    1586:	80 93 74 01 	sts	0x0174, r24
	   if(TIMER2_f32CounterCTC==Local_u8Counter)
    158a:	80 91 74 01 	lds	r24, 0x0174
    158e:	90 91 75 01 	lds	r25, 0x0175
    1592:	9c 01       	movw	r18, r24
    1594:	40 e0       	ldi	r20, 0x00	; 0
    1596:	50 e0       	ldi	r21, 0x00	; 0
    1598:	80 91 98 01 	lds	r24, 0x0198
    159c:	90 91 99 01 	lds	r25, 0x0199
    15a0:	a0 91 9a 01 	lds	r26, 0x019A
    15a4:	b0 91 9b 01 	lds	r27, 0x019B
    15a8:	28 17       	cp	r18, r24
    15aa:	39 07       	cpc	r19, r25
    15ac:	4a 07       	cpc	r20, r26
    15ae:	5b 07       	cpc	r21, r27
    15b0:	49 f4       	brne	.+18     	; 0x15c4 <__vector_4+0x76>
	   {
		   TIMER2_pSetCallBack();
    15b2:	e0 91 78 01 	lds	r30, 0x0178
    15b6:	f0 91 79 01 	lds	r31, 0x0179
    15ba:	09 95       	icall
		   Local_u8Counter=0;
    15bc:	10 92 75 01 	sts	0x0175, r1
    15c0:	10 92 74 01 	sts	0x0174, r1
	   }
}
    15c4:	cf 91       	pop	r28
    15c6:	df 91       	pop	r29
    15c8:	ff 91       	pop	r31
    15ca:	ef 91       	pop	r30
    15cc:	bf 91       	pop	r27
    15ce:	af 91       	pop	r26
    15d0:	9f 91       	pop	r25
    15d2:	8f 91       	pop	r24
    15d4:	7f 91       	pop	r23
    15d6:	6f 91       	pop	r22
    15d8:	5f 91       	pop	r21
    15da:	4f 91       	pop	r20
    15dc:	3f 91       	pop	r19
    15de:	2f 91       	pop	r18
    15e0:	0f 90       	pop	r0
    15e2:	0f be       	out	0x3f, r0	; 63
    15e4:	0f 90       	pop	r0
    15e6:	1f 90       	pop	r1
    15e8:	18 95       	reti

000015ea <TIMER_voidTimer1Enable>:
*                                                               Timer 1                                                              *
**************************************************************************************************************************************/
u8 TIMER1_u8MODEPWM;
/************************************************************************************************************************************/
void TIMER_voidTimer1Enable(u8 Copy_u8Timer1Mode,u8 Copy_u8Timer1ModeChannelA,u8 Copy_u8Timer1ModeChannelB)
{
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    15f2:	29 97       	sbiw	r28, 0x09	; 9
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	f8 94       	cli
    15f8:	de bf       	out	0x3e, r29	; 62
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	cd bf       	out	0x3d, r28	; 61
    15fe:	89 83       	std	Y+1, r24	; 0x01
    1600:	6a 83       	std	Y+2, r22	; 0x02
    1602:	4b 83       	std	Y+3, r20	; 0x03
switch(Copy_u8Timer1Mode)
    1604:	89 81       	ldd	r24, Y+1	; 0x01
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	39 87       	std	Y+9, r19	; 0x09
    160c:	28 87       	std	Y+8, r18	; 0x08
    160e:	88 85       	ldd	r24, Y+8	; 0x08
    1610:	99 85       	ldd	r25, Y+9	; 0x09
    1612:	87 30       	cpi	r24, 0x07	; 7
    1614:	91 05       	cpc	r25, r1
    1616:	09 f4       	brne	.+2      	; 0x161a <TIMER_voidTimer1Enable+0x30>
    1618:	6b c1       	rjmp	.+726    	; 0x18f0 <TIMER_voidTimer1Enable+0x306>
    161a:	28 85       	ldd	r18, Y+8	; 0x08
    161c:	39 85       	ldd	r19, Y+9	; 0x09
    161e:	28 30       	cpi	r18, 0x08	; 8
    1620:	31 05       	cpc	r19, r1
    1622:	4c f5       	brge	.+82     	; 0x1676 <TIMER_voidTimer1Enable+0x8c>
    1624:	88 85       	ldd	r24, Y+8	; 0x08
    1626:	99 85       	ldd	r25, Y+9	; 0x09
    1628:	83 30       	cpi	r24, 0x03	; 3
    162a:	91 05       	cpc	r25, r1
    162c:	09 f4       	brne	.+2      	; 0x1630 <TIMER_voidTimer1Enable+0x46>
    162e:	c7 c0       	rjmp	.+398    	; 0x17be <TIMER_voidTimer1Enable+0x1d4>
    1630:	28 85       	ldd	r18, Y+8	; 0x08
    1632:	39 85       	ldd	r19, Y+9	; 0x09
    1634:	24 30       	cpi	r18, 0x04	; 4
    1636:	31 05       	cpc	r19, r1
    1638:	8c f4       	brge	.+34     	; 0x165c <TIMER_voidTimer1Enable+0x72>
    163a:	88 85       	ldd	r24, Y+8	; 0x08
    163c:	99 85       	ldd	r25, Y+9	; 0x09
    163e:	81 30       	cpi	r24, 0x01	; 1
    1640:	91 05       	cpc	r25, r1
    1642:	09 f4       	brne	.+2      	; 0x1646 <TIMER_voidTimer1Enable+0x5c>
    1644:	7c c0       	rjmp	.+248    	; 0x173e <TIMER_voidTimer1Enable+0x154>
    1646:	28 85       	ldd	r18, Y+8	; 0x08
    1648:	39 85       	ldd	r19, Y+9	; 0x09
    164a:	22 30       	cpi	r18, 0x02	; 2
    164c:	31 05       	cpc	r19, r1
    164e:	0c f0       	brlt	.+2      	; 0x1652 <TIMER_voidTimer1Enable+0x68>
    1650:	96 c0       	rjmp	.+300    	; 0x177e <TIMER_voidTimer1Enable+0x194>
    1652:	88 85       	ldd	r24, Y+8	; 0x08
    1654:	99 85       	ldd	r25, Y+9	; 0x09
    1656:	00 97       	sbiw	r24, 0x00	; 0
    1658:	c9 f1       	breq	.+114    	; 0x16cc <TIMER_voidTimer1Enable+0xe2>
    165a:	50 c2       	rjmp	.+1184   	; 0x1afc <TIMER_voidTimer1Enable+0x512>
    165c:	28 85       	ldd	r18, Y+8	; 0x08
    165e:	39 85       	ldd	r19, Y+9	; 0x09
    1660:	25 30       	cpi	r18, 0x05	; 5
    1662:	31 05       	cpc	r19, r1
    1664:	09 f4       	brne	.+2      	; 0x1668 <TIMER_voidTimer1Enable+0x7e>
    1666:	04 c1       	rjmp	.+520    	; 0x1870 <TIMER_voidTimer1Enable+0x286>
    1668:	88 85       	ldd	r24, Y+8	; 0x08
    166a:	99 85       	ldd	r25, Y+9	; 0x09
    166c:	86 30       	cpi	r24, 0x06	; 6
    166e:	91 05       	cpc	r25, r1
    1670:	0c f0       	brlt	.+2      	; 0x1674 <TIMER_voidTimer1Enable+0x8a>
    1672:	1e c1       	rjmp	.+572    	; 0x18b0 <TIMER_voidTimer1Enable+0x2c6>
    1674:	c4 c0       	rjmp	.+392    	; 0x17fe <TIMER_voidTimer1Enable+0x214>
    1676:	28 85       	ldd	r18, Y+8	; 0x08
    1678:	39 85       	ldd	r19, Y+9	; 0x09
    167a:	2b 30       	cpi	r18, 0x0B	; 11
    167c:	31 05       	cpc	r19, r1
    167e:	09 f4       	brne	.+2      	; 0x1682 <TIMER_voidTimer1Enable+0x98>
    1680:	ae c1       	rjmp	.+860    	; 0x19de <TIMER_voidTimer1Enable+0x3f4>
    1682:	88 85       	ldd	r24, Y+8	; 0x08
    1684:	99 85       	ldd	r25, Y+9	; 0x09
    1686:	8c 30       	cpi	r24, 0x0C	; 12
    1688:	91 05       	cpc	r25, r1
    168a:	6c f4       	brge	.+26     	; 0x16a6 <TIMER_voidTimer1Enable+0xbc>
    168c:	28 85       	ldd	r18, Y+8	; 0x08
    168e:	39 85       	ldd	r19, Y+9	; 0x09
    1690:	29 30       	cpi	r18, 0x09	; 9
    1692:	31 05       	cpc	r19, r1
    1694:	09 f4       	brne	.+2      	; 0x1698 <TIMER_voidTimer1Enable+0xae>
    1696:	69 c1       	rjmp	.+722    	; 0x196a <TIMER_voidTimer1Enable+0x380>
    1698:	88 85       	ldd	r24, Y+8	; 0x08
    169a:	99 85       	ldd	r25, Y+9	; 0x09
    169c:	8a 30       	cpi	r24, 0x0A	; 10
    169e:	91 05       	cpc	r25, r1
    16a0:	0c f0       	brlt	.+2      	; 0x16a4 <TIMER_voidTimer1Enable+0xba>
    16a2:	80 c1       	rjmp	.+768    	; 0x19a4 <TIMER_voidTimer1Enable+0x3ba>
    16a4:	45 c1       	rjmp	.+650    	; 0x1930 <TIMER_voidTimer1Enable+0x346>
    16a6:	28 85       	ldd	r18, Y+8	; 0x08
    16a8:	39 85       	ldd	r19, Y+9	; 0x09
    16aa:	2e 30       	cpi	r18, 0x0E	; 14
    16ac:	31 05       	cpc	r19, r1
    16ae:	09 f4       	brne	.+2      	; 0x16b2 <TIMER_voidTimer1Enable+0xc8>
    16b0:	ec c1       	rjmp	.+984    	; 0x1a8a <TIMER_voidTimer1Enable+0x4a0>
    16b2:	88 85       	ldd	r24, Y+8	; 0x08
    16b4:	99 85       	ldd	r25, Y+9	; 0x09
    16b6:	8f 30       	cpi	r24, 0x0F	; 15
    16b8:	91 05       	cpc	r25, r1
    16ba:	09 f4       	brne	.+2      	; 0x16be <TIMER_voidTimer1Enable+0xd4>
    16bc:	03 c2       	rjmp	.+1030   	; 0x1ac4 <TIMER_voidTimer1Enable+0x4da>
    16be:	28 85       	ldd	r18, Y+8	; 0x08
    16c0:	39 85       	ldd	r19, Y+9	; 0x09
    16c2:	2c 30       	cpi	r18, 0x0C	; 12
    16c4:	31 05       	cpc	r19, r1
    16c6:	09 f4       	brne	.+2      	; 0x16ca <TIMER_voidTimer1Enable+0xe0>
    16c8:	a7 c1       	rjmp	.+846    	; 0x1a18 <TIMER_voidTimer1Enable+0x42e>
    16ca:	18 c2       	rjmp	.+1072   	; 0x1afc <TIMER_voidTimer1Enable+0x512>
{
   case  TIMER1_MODE_NORMAL :
	   CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM10_BIT);
    16cc:	af e4       	ldi	r26, 0x4F	; 79
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	ef e4       	ldi	r30, 0x4F	; 79
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	8e 7f       	andi	r24, 0xFE	; 254
    16d8:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM11_BIT);
    16da:	af e4       	ldi	r26, 0x4F	; 79
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	ef e4       	ldi	r30, 0x4F	; 79
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	8d 7f       	andi	r24, 0xFD	; 253
    16e6:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM12_BIT);
    16e8:	ae e4       	ldi	r26, 0x4E	; 78
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	ee e4       	ldi	r30, 0x4E	; 78
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	87 7f       	andi	r24, 0xF7	; 247
    16f4:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM13_BIT);
    16f6:	ae e4       	ldi	r26, 0x4E	; 78
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	ee e4       	ldi	r30, 0x4E	; 78
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	8f 7e       	andi	r24, 0xEF	; 239
    1702:	8c 93       	st	X, r24

		SET_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_TOIE1_BIT);
    1704:	a9 e5       	ldi	r26, 0x59	; 89
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e9 e5       	ldi	r30, 0x59	; 89
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	84 60       	ori	r24, 0x04	; 4
    1710:	8c 93       	st	X, r24
		CLR_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_OCIE1B_BIT);
    1712:	a9 e5       	ldi	r26, 0x59	; 89
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e9 e5       	ldi	r30, 0x59	; 89
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	87 7f       	andi	r24, 0xF7	; 247
    171e:	8c 93       	st	X, r24
		CLR_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_OCIE1A_BIT);
    1720:	a9 e5       	ldi	r26, 0x59	; 89
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	e9 e5       	ldi	r30, 0x59	; 89
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	8f 7e       	andi	r24, 0xEF	; 239
    172c:	8c 93       	st	X, r24
		CLR_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_TICIE1_BIT);
    172e:	a9 e5       	ldi	r26, 0x59	; 89
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	e9 e5       	ldi	r30, 0x59	; 89
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	8f 7d       	andi	r24, 0xDF	; 223
    173a:	8c 93       	st	X, r24
    173c:	df c1       	rjmp	.+958    	; 0x1afc <TIMER_voidTimer1Enable+0x512>

		//TIMER_u16_TCNT1_REG=TIMER_f32Timer1PreloodValue;
   break;
   case TIMER1_MODE_PWM_PHASE_CORRECT_8_BIT :
	   SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM10_BIT);
    173e:	af e4       	ldi	r26, 0x4F	; 79
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	ef e4       	ldi	r30, 0x4F	; 79
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	81 60       	ori	r24, 0x01	; 1
    174a:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM11_BIT);
    174c:	af e4       	ldi	r26, 0x4F	; 79
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	ef e4       	ldi	r30, 0x4F	; 79
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	8d 7f       	andi	r24, 0xFD	; 253
    1758:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM12_BIT);
    175a:	ae e4       	ldi	r26, 0x4E	; 78
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	ee e4       	ldi	r30, 0x4E	; 78
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	87 7f       	andi	r24, 0xF7	; 247
    1766:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM13_BIT);
    1768:	ae e4       	ldi	r26, 0x4E	; 78
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	ee e4       	ldi	r30, 0x4E	; 78
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	8f 7e       	andi	r24, 0xEF	; 239
    1774:	8c 93       	st	X, r24
	   TIMER1_u8MODEPWM=TIMER1_MODE_PWM_PHASE_CORRECT_8_BIT;
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	80 93 7f 01 	sts	0x017F, r24
    177c:	bf c1       	rjmp	.+894    	; 0x1afc <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_PWM_PHASE_CORRECT_9_BIT :
	   CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM10_BIT);
    177e:	af e4       	ldi	r26, 0x4F	; 79
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	ef e4       	ldi	r30, 0x4F	; 79
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	8e 7f       	andi	r24, 0xFE	; 254
    178a:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM11_BIT);
    178c:	af e4       	ldi	r26, 0x4F	; 79
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	ef e4       	ldi	r30, 0x4F	; 79
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	82 60       	ori	r24, 0x02	; 2
    1798:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM12_BIT);
    179a:	ae e4       	ldi	r26, 0x4E	; 78
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	ee e4       	ldi	r30, 0x4E	; 78
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	87 7f       	andi	r24, 0xF7	; 247
    17a6:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM13_BIT);
    17a8:	ae e4       	ldi	r26, 0x4E	; 78
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	ee e4       	ldi	r30, 0x4E	; 78
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	8f 7e       	andi	r24, 0xEF	; 239
    17b4:	8c 93       	st	X, r24
	   TIMER1_u8MODEPWM=TIMER1_MODE_PWM_PHASE_CORRECT_9_BIT;
    17b6:	82 e0       	ldi	r24, 0x02	; 2
    17b8:	80 93 7f 01 	sts	0x017F, r24
    17bc:	9f c1       	rjmp	.+830    	; 0x1afc <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_PWM_PHASE_CORRECT_10_BIT :
	   SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM10_BIT);
    17be:	af e4       	ldi	r26, 0x4F	; 79
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	ef e4       	ldi	r30, 0x4F	; 79
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	81 60       	ori	r24, 0x01	; 1
    17ca:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM11_BIT);
    17cc:	af e4       	ldi	r26, 0x4F	; 79
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	ef e4       	ldi	r30, 0x4F	; 79
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	82 60       	ori	r24, 0x02	; 2
    17d8:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM12_BIT);
    17da:	ae e4       	ldi	r26, 0x4E	; 78
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	ee e4       	ldi	r30, 0x4E	; 78
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	87 7f       	andi	r24, 0xF7	; 247
    17e6:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM13_BIT);
    17e8:	ae e4       	ldi	r26, 0x4E	; 78
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	ee e4       	ldi	r30, 0x4E	; 78
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	8f 7e       	andi	r24, 0xEF	; 239
    17f4:	8c 93       	st	X, r24
	   TIMER1_u8MODEPWM=TIMER1_MODE_PWM_PHASE_CORRECT_10_BIT;
    17f6:	83 e0       	ldi	r24, 0x03	; 3
    17f8:	80 93 7f 01 	sts	0x017F, r24
    17fc:	7f c1       	rjmp	.+766    	; 0x1afc <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_CTC_OCR1A :
	   CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM10_BIT);
    17fe:	af e4       	ldi	r26, 0x4F	; 79
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	ef e4       	ldi	r30, 0x4F	; 79
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	8e 7f       	andi	r24, 0xFE	; 254
    180a:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM11_BIT);
    180c:	af e4       	ldi	r26, 0x4F	; 79
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	ef e4       	ldi	r30, 0x4F	; 79
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	8d 7f       	andi	r24, 0xFD	; 253
    1818:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM12_BIT);
    181a:	ae e4       	ldi	r26, 0x4E	; 78
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	ee e4       	ldi	r30, 0x4E	; 78
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	88 60       	ori	r24, 0x08	; 8
    1826:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM13_BIT);
    1828:	ae e4       	ldi	r26, 0x4E	; 78
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	ee e4       	ldi	r30, 0x4E	; 78
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	8f 7e       	andi	r24, 0xEF	; 239
    1834:	8c 93       	st	X, r24

	   CLR_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_TOIE1_BIT);
    1836:	a9 e5       	ldi	r26, 0x59	; 89
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e9 e5       	ldi	r30, 0x59	; 89
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	8b 7f       	andi	r24, 0xFB	; 251
    1842:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_OCIE1B_BIT);
    1844:	a9 e5       	ldi	r26, 0x59	; 89
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	e9 e5       	ldi	r30, 0x59	; 89
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	87 7f       	andi	r24, 0xF7	; 247
    1850:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_OCIE1A_BIT);
    1852:	a9 e5       	ldi	r26, 0x59	; 89
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	e9 e5       	ldi	r30, 0x59	; 89
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	80 61       	ori	r24, 0x10	; 16
    185e:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_TICIE1_BIT);
    1860:	a9 e5       	ldi	r26, 0x59	; 89
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	e9 e5       	ldi	r30, 0x59	; 89
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	8f 7d       	andi	r24, 0xDF	; 223
    186c:	8c 93       	st	X, r24
    186e:	46 c1       	rjmp	.+652    	; 0x1afc <TIMER_voidTimer1Enable+0x512>

   break;
   case TIMER1_MODE_FAST_PWM_8_BIT :
	   SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM10_BIT);
    1870:	af e4       	ldi	r26, 0x4F	; 79
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	ef e4       	ldi	r30, 0x4F	; 79
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	81 60       	ori	r24, 0x01	; 1
    187c:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM11_BIT);
    187e:	af e4       	ldi	r26, 0x4F	; 79
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	ef e4       	ldi	r30, 0x4F	; 79
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	8d 7f       	andi	r24, 0xFD	; 253
    188a:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM12_BIT);
    188c:	ae e4       	ldi	r26, 0x4E	; 78
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	ee e4       	ldi	r30, 0x4E	; 78
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	88 60       	ori	r24, 0x08	; 8
    1898:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM13_BIT);
    189a:	ae e4       	ldi	r26, 0x4E	; 78
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	ee e4       	ldi	r30, 0x4E	; 78
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	8f 7e       	andi	r24, 0xEF	; 239
    18a6:	8c 93       	st	X, r24
	   TIMER1_u8MODEPWM=TIMER1_MODE_FAST_PWM_8_BIT;
    18a8:	85 e0       	ldi	r24, 0x05	; 5
    18aa:	80 93 7f 01 	sts	0x017F, r24
    18ae:	26 c1       	rjmp	.+588    	; 0x1afc <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_FAST_PWM_9_BIT :
	   CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM10_BIT);
    18b0:	af e4       	ldi	r26, 0x4F	; 79
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	ef e4       	ldi	r30, 0x4F	; 79
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	8e 7f       	andi	r24, 0xFE	; 254
    18bc:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM11_BIT);
    18be:	af e4       	ldi	r26, 0x4F	; 79
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	ef e4       	ldi	r30, 0x4F	; 79
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	82 60       	ori	r24, 0x02	; 2
    18ca:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM12_BIT);
    18cc:	ae e4       	ldi	r26, 0x4E	; 78
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	ee e4       	ldi	r30, 0x4E	; 78
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	88 60       	ori	r24, 0x08	; 8
    18d8:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM13_BIT);
    18da:	ae e4       	ldi	r26, 0x4E	; 78
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	ee e4       	ldi	r30, 0x4E	; 78
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	8f 7e       	andi	r24, 0xEF	; 239
    18e6:	8c 93       	st	X, r24
	   TIMER1_u8MODEPWM=TIMER1_MODE_FAST_PWM_9_BIT;
    18e8:	86 e0       	ldi	r24, 0x06	; 6
    18ea:	80 93 7f 01 	sts	0x017F, r24
    18ee:	06 c1       	rjmp	.+524    	; 0x1afc <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_FAST_PWM_10_BIT :
	   SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM10_BIT);
    18f0:	af e4       	ldi	r26, 0x4F	; 79
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	ef e4       	ldi	r30, 0x4F	; 79
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	81 60       	ori	r24, 0x01	; 1
    18fc:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM11_BIT);
    18fe:	af e4       	ldi	r26, 0x4F	; 79
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	ef e4       	ldi	r30, 0x4F	; 79
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	82 60       	ori	r24, 0x02	; 2
    190a:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM12_BIT);
    190c:	ae e4       	ldi	r26, 0x4E	; 78
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	ee e4       	ldi	r30, 0x4E	; 78
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	88 60       	ori	r24, 0x08	; 8
    1918:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM13_BIT);
    191a:	ae e4       	ldi	r26, 0x4E	; 78
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	ee e4       	ldi	r30, 0x4E	; 78
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	8f 7e       	andi	r24, 0xEF	; 239
    1926:	8c 93       	st	X, r24
	   TIMER1_u8MODEPWM=TIMER1_MODE_FAST_PWM_10_BIT;
    1928:	87 e0       	ldi	r24, 0x07	; 7
    192a:	80 93 7f 01 	sts	0x017F, r24
    192e:	e6 c0       	rjmp	.+460    	; 0x1afc <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_PWM_PHASE_AND_FRQUENCY_CORRECT_ICR1 :
	   CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM10_BIT);
    1930:	af e4       	ldi	r26, 0x4F	; 79
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	ef e4       	ldi	r30, 0x4F	; 79
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	8e 7f       	andi	r24, 0xFE	; 254
    193c:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM11_BIT);
    193e:	af e4       	ldi	r26, 0x4F	; 79
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	ef e4       	ldi	r30, 0x4F	; 79
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	8d 7f       	andi	r24, 0xFD	; 253
    194a:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM12_BIT);
    194c:	ae e4       	ldi	r26, 0x4E	; 78
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	ee e4       	ldi	r30, 0x4E	; 78
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	87 7f       	andi	r24, 0xF7	; 247
    1958:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM13_BIT);
    195a:	ae e4       	ldi	r26, 0x4E	; 78
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	ee e4       	ldi	r30, 0x4E	; 78
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	80 61       	ori	r24, 0x10	; 16
    1966:	8c 93       	st	X, r24
    1968:	c9 c0       	rjmp	.+402    	; 0x1afc <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_PWM_PHASE_AND_FRQUENCY_CORRECT_OCR1A :
	   SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM10_BIT);
    196a:	af e4       	ldi	r26, 0x4F	; 79
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	ef e4       	ldi	r30, 0x4F	; 79
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	81 60       	ori	r24, 0x01	; 1
    1976:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM11_BIT);
    1978:	af e4       	ldi	r26, 0x4F	; 79
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	ef e4       	ldi	r30, 0x4F	; 79
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	8d 7f       	andi	r24, 0xFD	; 253
    1984:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM12_BIT);
    1986:	ae e4       	ldi	r26, 0x4E	; 78
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	ee e4       	ldi	r30, 0x4E	; 78
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	87 7f       	andi	r24, 0xF7	; 247
    1992:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM13_BIT);
    1994:	ae e4       	ldi	r26, 0x4E	; 78
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	ee e4       	ldi	r30, 0x4E	; 78
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	80 61       	ori	r24, 0x10	; 16
    19a0:	8c 93       	st	X, r24
    19a2:	ac c0       	rjmp	.+344    	; 0x1afc <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_PWM_PHASE_CORRECT_ICR1 :
	   CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM10_BIT);
    19a4:	af e4       	ldi	r26, 0x4F	; 79
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	ef e4       	ldi	r30, 0x4F	; 79
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	8e 7f       	andi	r24, 0xFE	; 254
    19b0:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM11_BIT);
    19b2:	af e4       	ldi	r26, 0x4F	; 79
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	ef e4       	ldi	r30, 0x4F	; 79
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	82 60       	ori	r24, 0x02	; 2
    19be:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM12_BIT);
    19c0:	ae e4       	ldi	r26, 0x4E	; 78
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	ee e4       	ldi	r30, 0x4E	; 78
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	87 7f       	andi	r24, 0xF7	; 247
    19cc:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM13_BIT);
    19ce:	ae e4       	ldi	r26, 0x4E	; 78
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	ee e4       	ldi	r30, 0x4E	; 78
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	80 61       	ori	r24, 0x10	; 16
    19da:	8c 93       	st	X, r24
    19dc:	8f c0       	rjmp	.+286    	; 0x1afc <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_PWM_PHASE_CORRECT_OCR1A :
	   SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM10_BIT);
    19de:	af e4       	ldi	r26, 0x4F	; 79
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	ef e4       	ldi	r30, 0x4F	; 79
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	81 60       	ori	r24, 0x01	; 1
    19ea:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM11_BIT);
    19ec:	af e4       	ldi	r26, 0x4F	; 79
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	ef e4       	ldi	r30, 0x4F	; 79
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	82 60       	ori	r24, 0x02	; 2
    19f8:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM12_BIT);
    19fa:	ae e4       	ldi	r26, 0x4E	; 78
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	ee e4       	ldi	r30, 0x4E	; 78
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	87 7f       	andi	r24, 0xF7	; 247
    1a06:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM13_BIT);
    1a08:	ae e4       	ldi	r26, 0x4E	; 78
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	ee e4       	ldi	r30, 0x4E	; 78
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	80 61       	ori	r24, 0x10	; 16
    1a14:	8c 93       	st	X, r24
    1a16:	72 c0       	rjmp	.+228    	; 0x1afc <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_CTC_ICR1 :
	   CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM10_BIT);
    1a18:	af e4       	ldi	r26, 0x4F	; 79
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	ef e4       	ldi	r30, 0x4F	; 79
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	8e 7f       	andi	r24, 0xFE	; 254
    1a24:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM11_BIT);
    1a26:	af e4       	ldi	r26, 0x4F	; 79
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	ef e4       	ldi	r30, 0x4F	; 79
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	82 60       	ori	r24, 0x02	; 2
    1a32:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM12_BIT);
    1a34:	ae e4       	ldi	r26, 0x4E	; 78
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	ee e4       	ldi	r30, 0x4E	; 78
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	88 60       	ori	r24, 0x08	; 8
    1a40:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM13_BIT);
    1a42:	ae e4       	ldi	r26, 0x4E	; 78
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	ee e4       	ldi	r30, 0x4E	; 78
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	8f 7e       	andi	r24, 0xEF	; 239
    1a4e:	8c 93       	st	X, r24

	   CLR_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_TOIE1_BIT);
    1a50:	a9 e5       	ldi	r26, 0x59	; 89
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	e9 e5       	ldi	r30, 0x59	; 89
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	8b 7f       	andi	r24, 0xFB	; 251
    1a5c:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_OCIE1B_BIT);
    1a5e:	a9 e5       	ldi	r26, 0x59	; 89
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	e9 e5       	ldi	r30, 0x59	; 89
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	88 60       	ori	r24, 0x08	; 8
    1a6a:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_OCIE1A_BIT);
    1a6c:	a9 e5       	ldi	r26, 0x59	; 89
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	e9 e5       	ldi	r30, 0x59	; 89
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	80 61       	ori	r24, 0x10	; 16
    1a78:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_TICIE1_BIT);
    1a7a:	a9 e5       	ldi	r26, 0x59	; 89
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	e9 e5       	ldi	r30, 0x59	; 89
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	8f 7d       	andi	r24, 0xDF	; 223
    1a86:	8c 93       	st	X, r24
    1a88:	39 c0       	rjmp	.+114    	; 0x1afc <TIMER_voidTimer1Enable+0x512>

   break;
   case  TIMER1_MODE_FAST_PWM_ICR1 :
	   CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM10_BIT);
    1a8a:	af e4       	ldi	r26, 0x4F	; 79
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	ef e4       	ldi	r30, 0x4F	; 79
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	8e 7f       	andi	r24, 0xFE	; 254
    1a96:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM11_BIT);
    1a98:	af e4       	ldi	r26, 0x4F	; 79
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	ef e4       	ldi	r30, 0x4F	; 79
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	82 60       	ori	r24, 0x02	; 2
    1aa4:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM12_BIT);
    1aa6:	ae e4       	ldi	r26, 0x4E	; 78
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	ee e4       	ldi	r30, 0x4E	; 78
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	88 60       	ori	r24, 0x08	; 8
    1ab2:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM13_BIT);
    1ab4:	ae e4       	ldi	r26, 0x4E	; 78
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	ee e4       	ldi	r30, 0x4E	; 78
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	80 61       	ori	r24, 0x10	; 16
    1ac0:	8c 93       	st	X, r24
    1ac2:	1c c0       	rjmp	.+56     	; 0x1afc <TIMER_voidTimer1Enable+0x512>
   break;
   case  TIMER1_MODE_FAST_PWM_OCR1A :
	   SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM10_BIT);
    1ac4:	af e4       	ldi	r26, 0x4F	; 79
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	ef e4       	ldi	r30, 0x4F	; 79
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	81 60       	ori	r24, 0x01	; 1
    1ad0:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM11_BIT);
    1ad2:	af e4       	ldi	r26, 0x4F	; 79
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	ef e4       	ldi	r30, 0x4F	; 79
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	82 60       	ori	r24, 0x02	; 2
    1ade:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM12_BIT);
    1ae0:	ae e4       	ldi	r26, 0x4E	; 78
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	ee e4       	ldi	r30, 0x4E	; 78
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	88 60       	ori	r24, 0x08	; 8
    1aec:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM13_BIT);
    1aee:	ae e4       	ldi	r26, 0x4E	; 78
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	ee e4       	ldi	r30, 0x4E	; 78
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	80 61       	ori	r24, 0x10	; 16
    1afa:	8c 93       	st	X, r24
   break;
}
/***********************************************************************************************************/
switch(Copy_u8Timer1ModeChannelA)
    1afc:	8a 81       	ldd	r24, Y+2	; 0x02
    1afe:	28 2f       	mov	r18, r24
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	3f 83       	std	Y+7, r19	; 0x07
    1b04:	2e 83       	std	Y+6, r18	; 0x06
    1b06:	8e 81       	ldd	r24, Y+6	; 0x06
    1b08:	9f 81       	ldd	r25, Y+7	; 0x07
    1b0a:	81 30       	cpi	r24, 0x01	; 1
    1b0c:	91 05       	cpc	r25, r1
    1b0e:	21 f1       	breq	.+72     	; 0x1b58 <TIMER_voidTimer1Enable+0x56e>
    1b10:	2e 81       	ldd	r18, Y+6	; 0x06
    1b12:	3f 81       	ldd	r19, Y+7	; 0x07
    1b14:	22 30       	cpi	r18, 0x02	; 2
    1b16:	31 05       	cpc	r19, r1
    1b18:	2c f4       	brge	.+10     	; 0x1b24 <TIMER_voidTimer1Enable+0x53a>
    1b1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b1c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b1e:	00 97       	sbiw	r24, 0x00	; 0
    1b20:	61 f0       	breq	.+24     	; 0x1b3a <TIMER_voidTimer1Enable+0x550>
    1b22:	46 c0       	rjmp	.+140    	; 0x1bb0 <TIMER_voidTimer1Enable+0x5c6>
    1b24:	2e 81       	ldd	r18, Y+6	; 0x06
    1b26:	3f 81       	ldd	r19, Y+7	; 0x07
    1b28:	22 30       	cpi	r18, 0x02	; 2
    1b2a:	31 05       	cpc	r19, r1
    1b2c:	21 f1       	breq	.+72     	; 0x1b76 <TIMER_voidTimer1Enable+0x58c>
    1b2e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b30:	9f 81       	ldd	r25, Y+7	; 0x07
    1b32:	83 30       	cpi	r24, 0x03	; 3
    1b34:	91 05       	cpc	r25, r1
    1b36:	71 f1       	breq	.+92     	; 0x1b94 <TIMER_voidTimer1Enable+0x5aa>
    1b38:	3b c0       	rjmp	.+118    	; 0x1bb0 <TIMER_voidTimer1Enable+0x5c6>
{
    case   TIMER1_MODE_CHANNEL_A_NORMAL :
       CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_COM1A0_BIT);
    1b3a:	af e4       	ldi	r26, 0x4F	; 79
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	ef e4       	ldi	r30, 0x4F	; 79
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	8f 7b       	andi	r24, 0xBF	; 191
    1b46:	8c 93       	st	X, r24
       CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_COM1A1_BIT);
    1b48:	af e4       	ldi	r26, 0x4F	; 79
    1b4a:	b0 e0       	ldi	r27, 0x00	; 0
    1b4c:	ef e4       	ldi	r30, 0x4F	; 79
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
    1b52:	8f 77       	andi	r24, 0x7F	; 127
    1b54:	8c 93       	st	X, r24
    1b56:	2c c0       	rjmp	.+88     	; 0x1bb0 <TIMER_voidTimer1Enable+0x5c6>
    break;
    case   TIMER1_MODE_CHANNEL_A_TOGGLE :
       SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_COM1A0_BIT);
    1b58:	af e4       	ldi	r26, 0x4F	; 79
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	ef e4       	ldi	r30, 0x4F	; 79
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	80 64       	ori	r24, 0x40	; 64
    1b64:	8c 93       	st	X, r24
       CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_COM1A1_BIT);
    1b66:	af e4       	ldi	r26, 0x4F	; 79
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	ef e4       	ldi	r30, 0x4F	; 79
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	8f 77       	andi	r24, 0x7F	; 127
    1b72:	8c 93       	st	X, r24
    1b74:	1d c0       	rjmp	.+58     	; 0x1bb0 <TIMER_voidTimer1Enable+0x5c6>
    break;
    case   TIMER1_MODE_CHANNEL_A_CLEAR_OC1A :
       CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_COM1A0_BIT);
    1b76:	af e4       	ldi	r26, 0x4F	; 79
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	ef e4       	ldi	r30, 0x4F	; 79
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	8f 7b       	andi	r24, 0xBF	; 191
    1b82:	8c 93       	st	X, r24
       SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_COM1A1_BIT);
    1b84:	af e4       	ldi	r26, 0x4F	; 79
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	ef e4       	ldi	r30, 0x4F	; 79
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	80 68       	ori	r24, 0x80	; 128
    1b90:	8c 93       	st	X, r24
    1b92:	0e c0       	rjmp	.+28     	; 0x1bb0 <TIMER_voidTimer1Enable+0x5c6>
    break;
    case   TIMER1_MODE_CHANNEL_A_SET_OC1A :
       SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_COM1A0_BIT);
    1b94:	af e4       	ldi	r26, 0x4F	; 79
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	ef e4       	ldi	r30, 0x4F	; 79
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	80 64       	ori	r24, 0x40	; 64
    1ba0:	8c 93       	st	X, r24
       SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_COM1A1_BIT);
    1ba2:	af e4       	ldi	r26, 0x4F	; 79
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	ef e4       	ldi	r30, 0x4F	; 79
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	80 68       	ori	r24, 0x80	; 128
    1bae:	8c 93       	st	X, r24
    break;
}
/***********************************************************************************************************/
switch(Copy_u8Timer1ModeChannelB)
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	28 2f       	mov	r18, r24
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	3d 83       	std	Y+5, r19	; 0x05
    1bb8:	2c 83       	std	Y+4, r18	; 0x04
    1bba:	8c 81       	ldd	r24, Y+4	; 0x04
    1bbc:	9d 81       	ldd	r25, Y+5	; 0x05
    1bbe:	81 30       	cpi	r24, 0x01	; 1
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	21 f1       	breq	.+72     	; 0x1c0c <TIMER_voidTimer1Enable+0x622>
    1bc4:	2c 81       	ldd	r18, Y+4	; 0x04
    1bc6:	3d 81       	ldd	r19, Y+5	; 0x05
    1bc8:	22 30       	cpi	r18, 0x02	; 2
    1bca:	31 05       	cpc	r19, r1
    1bcc:	2c f4       	brge	.+10     	; 0x1bd8 <TIMER_voidTimer1Enable+0x5ee>
    1bce:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd0:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd2:	00 97       	sbiw	r24, 0x00	; 0
    1bd4:	61 f0       	breq	.+24     	; 0x1bee <TIMER_voidTimer1Enable+0x604>
    1bd6:	46 c0       	rjmp	.+140    	; 0x1c64 <TIMER_voidTimer1Enable+0x67a>
    1bd8:	2c 81       	ldd	r18, Y+4	; 0x04
    1bda:	3d 81       	ldd	r19, Y+5	; 0x05
    1bdc:	22 30       	cpi	r18, 0x02	; 2
    1bde:	31 05       	cpc	r19, r1
    1be0:	21 f1       	breq	.+72     	; 0x1c2a <TIMER_voidTimer1Enable+0x640>
    1be2:	8c 81       	ldd	r24, Y+4	; 0x04
    1be4:	9d 81       	ldd	r25, Y+5	; 0x05
    1be6:	83 30       	cpi	r24, 0x03	; 3
    1be8:	91 05       	cpc	r25, r1
    1bea:	71 f1       	breq	.+92     	; 0x1c48 <TIMER_voidTimer1Enable+0x65e>
    1bec:	3b c0       	rjmp	.+118    	; 0x1c64 <TIMER_voidTimer1Enable+0x67a>
{
    case  TIMER1_MODE_CHANNEL_B_NORMAL :
       CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_COM1B0_BIT);
    1bee:	af e4       	ldi	r26, 0x4F	; 79
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	ef e4       	ldi	r30, 0x4F	; 79
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	8f 7e       	andi	r24, 0xEF	; 239
    1bfa:	8c 93       	st	X, r24
       CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_COM1B1_BIT);
    1bfc:	af e4       	ldi	r26, 0x4F	; 79
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	ef e4       	ldi	r30, 0x4F	; 79
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	8f 7d       	andi	r24, 0xDF	; 223
    1c08:	8c 93       	st	X, r24
    1c0a:	2c c0       	rjmp	.+88     	; 0x1c64 <TIMER_voidTimer1Enable+0x67a>
    break;
    case    TIMER1_MODE_CHANNEL_B_TOGGLE :
       SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_COM1B0_BIT);
    1c0c:	af e4       	ldi	r26, 0x4F	; 79
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	ef e4       	ldi	r30, 0x4F	; 79
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	80 61       	ori	r24, 0x10	; 16
    1c18:	8c 93       	st	X, r24
       CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_COM1B1_BIT);
    1c1a:	af e4       	ldi	r26, 0x4F	; 79
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	ef e4       	ldi	r30, 0x4F	; 79
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	8f 7d       	andi	r24, 0xDF	; 223
    1c26:	8c 93       	st	X, r24
    1c28:	1d c0       	rjmp	.+58     	; 0x1c64 <TIMER_voidTimer1Enable+0x67a>
    break;
    case    TIMER1_MODE_CHANNEL_B_CLEAR_OC1B :
       CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_COM1B0_BIT);
    1c2a:	af e4       	ldi	r26, 0x4F	; 79
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	ef e4       	ldi	r30, 0x4F	; 79
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	8f 7e       	andi	r24, 0xEF	; 239
    1c36:	8c 93       	st	X, r24
       SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_COM1B1_BIT);
    1c38:	af e4       	ldi	r26, 0x4F	; 79
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	ef e4       	ldi	r30, 0x4F	; 79
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	80 62       	ori	r24, 0x20	; 32
    1c44:	8c 93       	st	X, r24
    1c46:	0e c0       	rjmp	.+28     	; 0x1c64 <TIMER_voidTimer1Enable+0x67a>
    break;
    case    TIMER1_MODE_CHANNEL_B_SET_OC1B :
       SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_COM1B0_BIT);
    1c48:	af e4       	ldi	r26, 0x4F	; 79
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	ef e4       	ldi	r30, 0x4F	; 79
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	80 61       	ori	r24, 0x10	; 16
    1c54:	8c 93       	st	X, r24
       SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_COM1B1_BIT);
    1c56:	af e4       	ldi	r26, 0x4F	; 79
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	ef e4       	ldi	r30, 0x4F	; 79
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	80 62       	ori	r24, 0x20	; 32
    1c62:	8c 93       	st	X, r24
  #elif  TIMER1_CLOCK_SELECT == TIMER1_SELECT_NO_PRESCALING
      SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_CS10_BIT);
      CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_CS11_BIT);
      CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_CS12_BIT);
  #elif  TIMER1_CLOCK_SELECT == TIMER1_SELECT_CLK_DIV_8
      CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_CS10_BIT);
    1c64:	ae e4       	ldi	r26, 0x4E	; 78
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	ee e4       	ldi	r30, 0x4E	; 78
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	8e 7f       	andi	r24, 0xFE	; 254
    1c70:	8c 93       	st	X, r24
      SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_CS11_BIT);
    1c72:	ae e4       	ldi	r26, 0x4E	; 78
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	ee e4       	ldi	r30, 0x4E	; 78
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	82 60       	ori	r24, 0x02	; 2
    1c7e:	8c 93       	st	X, r24
      CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_CS12_BIT);
    1c80:	ae e4       	ldi	r26, 0x4E	; 78
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	ee e4       	ldi	r30, 0x4E	; 78
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	8b 7f       	andi	r24, 0xFB	; 251
    1c8c:	8c 93       	st	X, r24
  #elif  TIMER1_CLOCK_SELECT == TIMER1_SELECT_EXIT_CLK_T0_RISING
      SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_CS10_BIT);
      SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_CS11_BIT);
      SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_CS12_BIT);
  #endif
}
    1c8e:	29 96       	adiw	r28, 0x09	; 9
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	de bf       	out	0x3e, r29	; 62
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	cd bf       	out	0x3d, r28	; 61
    1c9a:	cf 91       	pop	r28
    1c9c:	df 91       	pop	r29
    1c9e:	08 95       	ret

00001ca0 <TIMER_voidTimer1GeneratePWMOCR1A>:
/*******************************************************************************************************/
void TIMER_voidTimer1GeneratePWMOCR1A(u8 Copy_u8Intensity)
{
    1ca0:	df 93       	push	r29
    1ca2:	cf 93       	push	r28
    1ca4:	00 d0       	rcall	.+0      	; 0x1ca6 <TIMER_voidTimer1GeneratePWMOCR1A+0x6>
    1ca6:	00 d0       	rcall	.+0      	; 0x1ca8 <TIMER_voidTimer1GeneratePWMOCR1A+0x8>
    1ca8:	0f 92       	push	r0
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	8b 83       	std	Y+3, r24	; 0x03
	u16 Copy_u16OCR1AValue;
	switch(TIMER1_u8MODEPWM)
    1cb0:	80 91 7f 01 	lds	r24, 0x017F
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	3d 83       	std	Y+5, r19	; 0x05
    1cba:	2c 83       	std	Y+4, r18	; 0x04
    1cbc:	4c 81       	ldd	r20, Y+4	; 0x04
    1cbe:	5d 81       	ldd	r21, Y+5	; 0x05
    1cc0:	43 30       	cpi	r20, 0x03	; 3
    1cc2:	51 05       	cpc	r21, r1
    1cc4:	09 f4       	brne	.+2      	; 0x1cc8 <TIMER_voidTimer1GeneratePWMOCR1A+0x28>
    1cc6:	5b c0       	rjmp	.+182    	; 0x1d7e <TIMER_voidTimer1GeneratePWMOCR1A+0xde>
    1cc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cca:	9d 81       	ldd	r25, Y+5	; 0x05
    1ccc:	84 30       	cpi	r24, 0x04	; 4
    1cce:	91 05       	cpc	r25, r1
    1cd0:	5c f4       	brge	.+22     	; 0x1ce8 <TIMER_voidTimer1GeneratePWMOCR1A+0x48>
    1cd2:	2c 81       	ldd	r18, Y+4	; 0x04
    1cd4:	3d 81       	ldd	r19, Y+5	; 0x05
    1cd6:	21 30       	cpi	r18, 0x01	; 1
    1cd8:	31 05       	cpc	r19, r1
    1cda:	c9 f0       	breq	.+50     	; 0x1d0e <TIMER_voidTimer1GeneratePWMOCR1A+0x6e>
    1cdc:	4c 81       	ldd	r20, Y+4	; 0x04
    1cde:	5d 81       	ldd	r21, Y+5	; 0x05
    1ce0:	42 30       	cpi	r20, 0x02	; 2
    1ce2:	51 05       	cpc	r21, r1
    1ce4:	81 f1       	breq	.+96     	; 0x1d46 <TIMER_voidTimer1GeneratePWMOCR1A+0xa6>
    1ce6:	ab c0       	rjmp	.+342    	; 0x1e3e <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
    1ce8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cea:	9d 81       	ldd	r25, Y+5	; 0x05
    1cec:	86 30       	cpi	r24, 0x06	; 6
    1cee:	91 05       	cpc	r25, r1
    1cf0:	09 f4       	brne	.+2      	; 0x1cf4 <TIMER_voidTimer1GeneratePWMOCR1A+0x54>
    1cf2:	75 c0       	rjmp	.+234    	; 0x1dde <TIMER_voidTimer1GeneratePWMOCR1A+0x13e>
    1cf4:	2c 81       	ldd	r18, Y+4	; 0x04
    1cf6:	3d 81       	ldd	r19, Y+5	; 0x05
    1cf8:	27 30       	cpi	r18, 0x07	; 7
    1cfa:	31 05       	cpc	r19, r1
    1cfc:	09 f4       	brne	.+2      	; 0x1d00 <TIMER_voidTimer1GeneratePWMOCR1A+0x60>
    1cfe:	84 c0       	rjmp	.+264    	; 0x1e08 <TIMER_voidTimer1GeneratePWMOCR1A+0x168>
    1d00:	4c 81       	ldd	r20, Y+4	; 0x04
    1d02:	5d 81       	ldd	r21, Y+5	; 0x05
    1d04:	45 30       	cpi	r20, 0x05	; 5
    1d06:	51 05       	cpc	r21, r1
    1d08:	09 f4       	brne	.+2      	; 0x1d0c <TIMER_voidTimer1GeneratePWMOCR1A+0x6c>
    1d0a:	55 c0       	rjmp	.+170    	; 0x1db6 <TIMER_voidTimer1GeneratePWMOCR1A+0x116>
    1d0c:	98 c0       	rjmp	.+304    	; 0x1e3e <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
	{
	   case TIMER1_MODE_PWM_PHASE_CORRECT_8_BIT :
	        Copy_u16OCR1AValue=((u16)510*Copy_u8Intensity/100);
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	28 2f       	mov	r18, r24
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	8e ef       	ldi	r24, 0xFE	; 254
    1d16:	91 e0       	ldi	r25, 0x01	; 1
    1d18:	ac 01       	movw	r20, r24
    1d1a:	24 9f       	mul	r18, r20
    1d1c:	c0 01       	movw	r24, r0
    1d1e:	25 9f       	mul	r18, r21
    1d20:	90 0d       	add	r25, r0
    1d22:	34 9f       	mul	r19, r20
    1d24:	90 0d       	add	r25, r0
    1d26:	11 24       	eor	r1, r1
    1d28:	24 e6       	ldi	r18, 0x64	; 100
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	b9 01       	movw	r22, r18
    1d2e:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <__udivmodhi4>
    1d32:	cb 01       	movw	r24, r22
    1d34:	9a 83       	std	Y+2, r25	; 0x02
    1d36:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1A_REG=Copy_u16OCR1AValue;
    1d38:	ea e4       	ldi	r30, 0x4A	; 74
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d40:	91 83       	std	Z+1, r25	; 0x01
    1d42:	80 83       	st	Z, r24
    1d44:	7c c0       	rjmp	.+248    	; 0x1e3e <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
	   break;
	   case TIMER1_MODE_PWM_PHASE_CORRECT_9_BIT :
	        Copy_u16OCR1AValue=((u16)1022*Copy_u8Intensity/100);
    1d46:	8b 81       	ldd	r24, Y+3	; 0x03
    1d48:	28 2f       	mov	r18, r24
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	8e ef       	ldi	r24, 0xFE	; 254
    1d4e:	93 e0       	ldi	r25, 0x03	; 3
    1d50:	ac 01       	movw	r20, r24
    1d52:	24 9f       	mul	r18, r20
    1d54:	c0 01       	movw	r24, r0
    1d56:	25 9f       	mul	r18, r21
    1d58:	90 0d       	add	r25, r0
    1d5a:	34 9f       	mul	r19, r20
    1d5c:	90 0d       	add	r25, r0
    1d5e:	11 24       	eor	r1, r1
    1d60:	24 e6       	ldi	r18, 0x64	; 100
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	b9 01       	movw	r22, r18
    1d66:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <__udivmodhi4>
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	9a 83       	std	Y+2, r25	; 0x02
    1d6e:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1A_REG=Copy_u16OCR1AValue;
    1d70:	ea e4       	ldi	r30, 0x4A	; 74
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
    1d76:	9a 81       	ldd	r25, Y+2	; 0x02
    1d78:	91 83       	std	Z+1, r25	; 0x01
    1d7a:	80 83       	st	Z, r24
    1d7c:	60 c0       	rjmp	.+192    	; 0x1e3e <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
	   break;
	   case TIMER1_MODE_PWM_PHASE_CORRECT_10_BIT :
	        Copy_u16OCR1AValue=((u16)2046*Copy_u8Intensity/100);
    1d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	8e ef       	ldi	r24, 0xFE	; 254
    1d86:	97 e0       	ldi	r25, 0x07	; 7
    1d88:	ac 01       	movw	r20, r24
    1d8a:	24 9f       	mul	r18, r20
    1d8c:	c0 01       	movw	r24, r0
    1d8e:	25 9f       	mul	r18, r21
    1d90:	90 0d       	add	r25, r0
    1d92:	34 9f       	mul	r19, r20
    1d94:	90 0d       	add	r25, r0
    1d96:	11 24       	eor	r1, r1
    1d98:	24 e6       	ldi	r18, 0x64	; 100
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	b9 01       	movw	r22, r18
    1d9e:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <__udivmodhi4>
    1da2:	cb 01       	movw	r24, r22
    1da4:	9a 83       	std	Y+2, r25	; 0x02
    1da6:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1A_REG=Copy_u16OCR1AValue;
    1da8:	ea e4       	ldi	r30, 0x4A	; 74
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	9a 81       	ldd	r25, Y+2	; 0x02
    1db0:	91 83       	std	Z+1, r25	; 0x01
    1db2:	80 83       	st	Z, r24
    1db4:	44 c0       	rjmp	.+136    	; 0x1e3e <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
	   break;

	   case TIMER1_MODE_FAST_PWM_8_BIT :
	        Copy_u16OCR1AValue=(256*Copy_u8Intensity/100);
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	88 2f       	mov	r24, r24
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	98 2f       	mov	r25, r24
    1dbe:	88 27       	eor	r24, r24
    1dc0:	24 e6       	ldi	r18, 0x64	; 100
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	b9 01       	movw	r22, r18
    1dc6:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <__divmodhi4>
    1dca:	cb 01       	movw	r24, r22
    1dcc:	9a 83       	std	Y+2, r25	; 0x02
    1dce:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1A_REG=Copy_u16OCR1AValue;
    1dd0:	ea e4       	ldi	r30, 0x4A	; 74
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd8:	91 83       	std	Z+1, r25	; 0x01
    1dda:	80 83       	st	Z, r24
    1ddc:	30 c0       	rjmp	.+96     	; 0x1e3e <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
	   break;
	   case TIMER1_MODE_FAST_PWM_9_BIT :
	        Copy_u16OCR1AValue=(512*Copy_u8Intensity/100);
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	88 2f       	mov	r24, r24
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	98 2f       	mov	r25, r24
    1de6:	88 27       	eor	r24, r24
    1de8:	99 0f       	add	r25, r25
    1dea:	24 e6       	ldi	r18, 0x64	; 100
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	b9 01       	movw	r22, r18
    1df0:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <__divmodhi4>
    1df4:	cb 01       	movw	r24, r22
    1df6:	9a 83       	std	Y+2, r25	; 0x02
    1df8:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1A_REG=Copy_u16OCR1AValue;
    1dfa:	ea e4       	ldi	r30, 0x4A	; 74
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	9a 81       	ldd	r25, Y+2	; 0x02
    1e02:	91 83       	std	Z+1, r25	; 0x01
    1e04:	80 83       	st	Z, r24
    1e06:	1b c0       	rjmp	.+54     	; 0x1e3e <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
	   break;
	   case TIMER1_MODE_FAST_PWM_10_BIT :
	        Copy_u16OCR1AValue=((u16)1023*Copy_u8Intensity/100);
    1e08:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0a:	28 2f       	mov	r18, r24
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	8f ef       	ldi	r24, 0xFF	; 255
    1e10:	93 e0       	ldi	r25, 0x03	; 3
    1e12:	ac 01       	movw	r20, r24
    1e14:	24 9f       	mul	r18, r20
    1e16:	c0 01       	movw	r24, r0
    1e18:	25 9f       	mul	r18, r21
    1e1a:	90 0d       	add	r25, r0
    1e1c:	34 9f       	mul	r19, r20
    1e1e:	90 0d       	add	r25, r0
    1e20:	11 24       	eor	r1, r1
    1e22:	24 e6       	ldi	r18, 0x64	; 100
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	b9 01       	movw	r22, r18
    1e28:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <__udivmodhi4>
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	9a 83       	std	Y+2, r25	; 0x02
    1e30:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1A_REG=Copy_u16OCR1AValue;
    1e32:	ea e4       	ldi	r30, 0x4A	; 74
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
    1e38:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3a:	91 83       	std	Z+1, r25	; 0x01
    1e3c:	80 83       	st	Z, r24
	   break;
	}
}
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
    1e46:	0f 90       	pop	r0
    1e48:	cf 91       	pop	r28
    1e4a:	df 91       	pop	r29
    1e4c:	08 95       	ret

00001e4e <TIMER_voidTimer1GeneratePWMOCR1B>:
void TIMER_voidTimer1GeneratePWMOCR1B(u8 Copy_u8Intensity)
{
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	00 d0       	rcall	.+0      	; 0x1e54 <TIMER_voidTimer1GeneratePWMOCR1B+0x6>
    1e54:	00 d0       	rcall	.+0      	; 0x1e56 <TIMER_voidTimer1GeneratePWMOCR1B+0x8>
    1e56:	0f 92       	push	r0
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
    1e5c:	8b 83       	std	Y+3, r24	; 0x03
	u16 Copy_u16OCR1BValue;
	switch(TIMER1_u8MODEPWM)
    1e5e:	80 91 7f 01 	lds	r24, 0x017F
    1e62:	28 2f       	mov	r18, r24
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	3d 83       	std	Y+5, r19	; 0x05
    1e68:	2c 83       	std	Y+4, r18	; 0x04
    1e6a:	4c 81       	ldd	r20, Y+4	; 0x04
    1e6c:	5d 81       	ldd	r21, Y+5	; 0x05
    1e6e:	43 30       	cpi	r20, 0x03	; 3
    1e70:	51 05       	cpc	r21, r1
    1e72:	09 f4       	brne	.+2      	; 0x1e76 <TIMER_voidTimer1GeneratePWMOCR1B+0x28>
    1e74:	5b c0       	rjmp	.+182    	; 0x1f2c <TIMER_voidTimer1GeneratePWMOCR1B+0xde>
    1e76:	8c 81       	ldd	r24, Y+4	; 0x04
    1e78:	9d 81       	ldd	r25, Y+5	; 0x05
    1e7a:	84 30       	cpi	r24, 0x04	; 4
    1e7c:	91 05       	cpc	r25, r1
    1e7e:	5c f4       	brge	.+22     	; 0x1e96 <TIMER_voidTimer1GeneratePWMOCR1B+0x48>
    1e80:	2c 81       	ldd	r18, Y+4	; 0x04
    1e82:	3d 81       	ldd	r19, Y+5	; 0x05
    1e84:	21 30       	cpi	r18, 0x01	; 1
    1e86:	31 05       	cpc	r19, r1
    1e88:	c9 f0       	breq	.+50     	; 0x1ebc <TIMER_voidTimer1GeneratePWMOCR1B+0x6e>
    1e8a:	4c 81       	ldd	r20, Y+4	; 0x04
    1e8c:	5d 81       	ldd	r21, Y+5	; 0x05
    1e8e:	42 30       	cpi	r20, 0x02	; 2
    1e90:	51 05       	cpc	r21, r1
    1e92:	81 f1       	breq	.+96     	; 0x1ef4 <TIMER_voidTimer1GeneratePWMOCR1B+0xa6>
    1e94:	ab c0       	rjmp	.+342    	; 0x1fec <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
    1e96:	8c 81       	ldd	r24, Y+4	; 0x04
    1e98:	9d 81       	ldd	r25, Y+5	; 0x05
    1e9a:	86 30       	cpi	r24, 0x06	; 6
    1e9c:	91 05       	cpc	r25, r1
    1e9e:	09 f4       	brne	.+2      	; 0x1ea2 <TIMER_voidTimer1GeneratePWMOCR1B+0x54>
    1ea0:	75 c0       	rjmp	.+234    	; 0x1f8c <TIMER_voidTimer1GeneratePWMOCR1B+0x13e>
    1ea2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ea4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ea6:	27 30       	cpi	r18, 0x07	; 7
    1ea8:	31 05       	cpc	r19, r1
    1eaa:	09 f4       	brne	.+2      	; 0x1eae <TIMER_voidTimer1GeneratePWMOCR1B+0x60>
    1eac:	84 c0       	rjmp	.+264    	; 0x1fb6 <TIMER_voidTimer1GeneratePWMOCR1B+0x168>
    1eae:	4c 81       	ldd	r20, Y+4	; 0x04
    1eb0:	5d 81       	ldd	r21, Y+5	; 0x05
    1eb2:	45 30       	cpi	r20, 0x05	; 5
    1eb4:	51 05       	cpc	r21, r1
    1eb6:	09 f4       	brne	.+2      	; 0x1eba <TIMER_voidTimer1GeneratePWMOCR1B+0x6c>
    1eb8:	55 c0       	rjmp	.+170    	; 0x1f64 <TIMER_voidTimer1GeneratePWMOCR1B+0x116>
    1eba:	98 c0       	rjmp	.+304    	; 0x1fec <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
	{
	   case TIMER1_MODE_PWM_PHASE_CORRECT_8_BIT :
	        Copy_u16OCR1BValue=((u16)510*Copy_u8Intensity/100);
    1ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	8e ef       	ldi	r24, 0xFE	; 254
    1ec4:	91 e0       	ldi	r25, 0x01	; 1
    1ec6:	ac 01       	movw	r20, r24
    1ec8:	24 9f       	mul	r18, r20
    1eca:	c0 01       	movw	r24, r0
    1ecc:	25 9f       	mul	r18, r21
    1ece:	90 0d       	add	r25, r0
    1ed0:	34 9f       	mul	r19, r20
    1ed2:	90 0d       	add	r25, r0
    1ed4:	11 24       	eor	r1, r1
    1ed6:	24 e6       	ldi	r18, 0x64	; 100
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	b9 01       	movw	r22, r18
    1edc:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <__udivmodhi4>
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	9a 83       	std	Y+2, r25	; 0x02
    1ee4:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1B_REG=Copy_u16OCR1BValue;
    1ee6:	e8 e4       	ldi	r30, 0x48	; 72
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	9a 81       	ldd	r25, Y+2	; 0x02
    1eee:	91 83       	std	Z+1, r25	; 0x01
    1ef0:	80 83       	st	Z, r24
    1ef2:	7c c0       	rjmp	.+248    	; 0x1fec <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
	   break;
	   case TIMER1_MODE_PWM_PHASE_CORRECT_9_BIT :
	        Copy_u16OCR1BValue=((u16)1022*Copy_u8Intensity/100);
    1ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef6:	28 2f       	mov	r18, r24
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	8e ef       	ldi	r24, 0xFE	; 254
    1efc:	93 e0       	ldi	r25, 0x03	; 3
    1efe:	ac 01       	movw	r20, r24
    1f00:	24 9f       	mul	r18, r20
    1f02:	c0 01       	movw	r24, r0
    1f04:	25 9f       	mul	r18, r21
    1f06:	90 0d       	add	r25, r0
    1f08:	34 9f       	mul	r19, r20
    1f0a:	90 0d       	add	r25, r0
    1f0c:	11 24       	eor	r1, r1
    1f0e:	24 e6       	ldi	r18, 0x64	; 100
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	b9 01       	movw	r22, r18
    1f14:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <__udivmodhi4>
    1f18:	cb 01       	movw	r24, r22
    1f1a:	9a 83       	std	Y+2, r25	; 0x02
    1f1c:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1B_REG=Copy_u16OCR1BValue;
    1f1e:	e8 e4       	ldi	r30, 0x48	; 72
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	9a 81       	ldd	r25, Y+2	; 0x02
    1f26:	91 83       	std	Z+1, r25	; 0x01
    1f28:	80 83       	st	Z, r24
    1f2a:	60 c0       	rjmp	.+192    	; 0x1fec <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
	   break;
	   case TIMER1_MODE_PWM_PHASE_CORRECT_10_BIT :
	        Copy_u16OCR1BValue=((u16)2046*Copy_u8Intensity/100);
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	28 2f       	mov	r18, r24
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	8e ef       	ldi	r24, 0xFE	; 254
    1f34:	97 e0       	ldi	r25, 0x07	; 7
    1f36:	ac 01       	movw	r20, r24
    1f38:	24 9f       	mul	r18, r20
    1f3a:	c0 01       	movw	r24, r0
    1f3c:	25 9f       	mul	r18, r21
    1f3e:	90 0d       	add	r25, r0
    1f40:	34 9f       	mul	r19, r20
    1f42:	90 0d       	add	r25, r0
    1f44:	11 24       	eor	r1, r1
    1f46:	24 e6       	ldi	r18, 0x64	; 100
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	b9 01       	movw	r22, r18
    1f4c:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <__udivmodhi4>
    1f50:	cb 01       	movw	r24, r22
    1f52:	9a 83       	std	Y+2, r25	; 0x02
    1f54:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1B_REG=Copy_u16OCR1BValue;
    1f56:	e8 e4       	ldi	r30, 0x48	; 72
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5e:	91 83       	std	Z+1, r25	; 0x01
    1f60:	80 83       	st	Z, r24
    1f62:	44 c0       	rjmp	.+136    	; 0x1fec <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
	   break;

	   case TIMER1_MODE_FAST_PWM_8_BIT :
	        Copy_u16OCR1BValue=(256*Copy_u8Intensity/100);
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	88 2f       	mov	r24, r24
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	98 2f       	mov	r25, r24
    1f6c:	88 27       	eor	r24, r24
    1f6e:	24 e6       	ldi	r18, 0x64	; 100
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	b9 01       	movw	r22, r18
    1f74:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <__divmodhi4>
    1f78:	cb 01       	movw	r24, r22
    1f7a:	9a 83       	std	Y+2, r25	; 0x02
    1f7c:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1B_REG=Copy_u16OCR1BValue;
    1f7e:	e8 e4       	ldi	r30, 0x48	; 72
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	89 81       	ldd	r24, Y+1	; 0x01
    1f84:	9a 81       	ldd	r25, Y+2	; 0x02
    1f86:	91 83       	std	Z+1, r25	; 0x01
    1f88:	80 83       	st	Z, r24
    1f8a:	30 c0       	rjmp	.+96     	; 0x1fec <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
	   break;
	   case TIMER1_MODE_FAST_PWM_9_BIT :
	        Copy_u16OCR1BValue=(512*Copy_u8Intensity/100);
    1f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8e:	88 2f       	mov	r24, r24
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	98 2f       	mov	r25, r24
    1f94:	88 27       	eor	r24, r24
    1f96:	99 0f       	add	r25, r25
    1f98:	24 e6       	ldi	r18, 0x64	; 100
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	b9 01       	movw	r22, r18
    1f9e:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <__divmodhi4>
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	9a 83       	std	Y+2, r25	; 0x02
    1fa6:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1B_REG=Copy_u16OCR1BValue;
    1fa8:	e8 e4       	ldi	r30, 0x48	; 72
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	89 81       	ldd	r24, Y+1	; 0x01
    1fae:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb0:	91 83       	std	Z+1, r25	; 0x01
    1fb2:	80 83       	st	Z, r24
    1fb4:	1b c0       	rjmp	.+54     	; 0x1fec <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
	   break;
	   case TIMER1_MODE_FAST_PWM_10_BIT :
	        Copy_u16OCR1BValue=((u16)1023*Copy_u8Intensity/100);
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	28 2f       	mov	r18, r24
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	8f ef       	ldi	r24, 0xFF	; 255
    1fbe:	93 e0       	ldi	r25, 0x03	; 3
    1fc0:	ac 01       	movw	r20, r24
    1fc2:	24 9f       	mul	r18, r20
    1fc4:	c0 01       	movw	r24, r0
    1fc6:	25 9f       	mul	r18, r21
    1fc8:	90 0d       	add	r25, r0
    1fca:	34 9f       	mul	r19, r20
    1fcc:	90 0d       	add	r25, r0
    1fce:	11 24       	eor	r1, r1
    1fd0:	24 e6       	ldi	r18, 0x64	; 100
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	b9 01       	movw	r22, r18
    1fd6:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <__udivmodhi4>
    1fda:	cb 01       	movw	r24, r22
    1fdc:	9a 83       	std	Y+2, r25	; 0x02
    1fde:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1B_REG=Copy_u16OCR1BValue;
    1fe0:	e8 e4       	ldi	r30, 0x48	; 72
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	89 81       	ldd	r24, Y+1	; 0x01
    1fe6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe8:	91 83       	std	Z+1, r25	; 0x01
    1fea:	80 83       	st	Z, r24
	   break;
	}
}
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	0f 90       	pop	r0
    1ff6:	cf 91       	pop	r28
    1ff8:	df 91       	pop	r29
    1ffa:	08 95       	ret

00001ffc <TIMER_voidTimer1SetOCR1A>:

/*************************************************************************************************************/
void TIMER_voidTimer1SetOCR1A(u16 Copy_u16OCR1A)
{
    1ffc:	df 93       	push	r29
    1ffe:	cf 93       	push	r28
    2000:	00 d0       	rcall	.+0      	; 0x2002 <TIMER_voidTimer1SetOCR1A+0x6>
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
    2006:	9a 83       	std	Y+2, r25	; 0x02
    2008:	89 83       	std	Y+1, r24	; 0x01
	  TIMER_u8_OCR1AH_REG = (u8)(Copy_u16OCR1A>>8);
    200a:	eb e4       	ldi	r30, 0x4B	; 75
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	89 81       	ldd	r24, Y+1	; 0x01
    2010:	9a 81       	ldd	r25, Y+2	; 0x02
    2012:	89 2f       	mov	r24, r25
    2014:	99 27       	eor	r25, r25
    2016:	80 83       	st	Z, r24
	  TIMER_u8_OCR1AL_REG = (u8)(Copy_u16OCR1A);
    2018:	ea e4       	ldi	r30, 0x4A	; 74
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	89 81       	ldd	r24, Y+1	; 0x01
    201e:	80 83       	st	Z, r24
}
    2020:	0f 90       	pop	r0
    2022:	0f 90       	pop	r0
    2024:	cf 91       	pop	r28
    2026:	df 91       	pop	r29
    2028:	08 95       	ret

0000202a <TIMER_voidTimer1SetOCR1B>:
void TIMER_voidTimer1SetOCR1B(u16 Copy_u16OCR1B)
{
    202a:	df 93       	push	r29
    202c:	cf 93       	push	r28
    202e:	00 d0       	rcall	.+0      	; 0x2030 <TIMER_voidTimer1SetOCR1B+0x6>
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
    2034:	9a 83       	std	Y+2, r25	; 0x02
    2036:	89 83       	std	Y+1, r24	; 0x01
	TIMER_u16_OCR1B_REG = Copy_u16OCR1B ;
    2038:	e8 e4       	ldi	r30, 0x48	; 72
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	89 81       	ldd	r24, Y+1	; 0x01
    203e:	9a 81       	ldd	r25, Y+2	; 0x02
    2040:	91 83       	std	Z+1, r25	; 0x01
    2042:	80 83       	st	Z, r24
}
    2044:	0f 90       	pop	r0
    2046:	0f 90       	pop	r0
    2048:	cf 91       	pop	r28
    204a:	df 91       	pop	r29
    204c:	08 95       	ret

0000204e <TIMER_voidTimer1SetICR1>:
void TIMER_voidTimer1SetICR1(u16 Copy_u16ICR1)
{
    204e:	df 93       	push	r29
    2050:	cf 93       	push	r28
    2052:	00 d0       	rcall	.+0      	; 0x2054 <TIMER_voidTimer1SetICR1+0x6>
    2054:	cd b7       	in	r28, 0x3d	; 61
    2056:	de b7       	in	r29, 0x3e	; 62
    2058:	9a 83       	std	Y+2, r25	; 0x02
    205a:	89 83       	std	Y+1, r24	; 0x01
	  TIMER_u8_ICR1H_REG = (u8)(Copy_u16ICR1>>8);
    205c:	e7 e4       	ldi	r30, 0x47	; 71
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	9a 81       	ldd	r25, Y+2	; 0x02
    2064:	89 2f       	mov	r24, r25
    2066:	99 27       	eor	r25, r25
    2068:	80 83       	st	Z, r24
	  TIMER_u8_ICR1L_REG = (u8)(Copy_u16ICR1);
    206a:	e6 e4       	ldi	r30, 0x46	; 70
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	80 83       	st	Z, r24
}
    2072:	0f 90       	pop	r0
    2074:	0f 90       	pop	r0
    2076:	cf 91       	pop	r28
    2078:	df 91       	pop	r29
    207a:	08 95       	ret

0000207c <TIMER_voidTimer1ICUInit>:
 *                                                           ICU Timer 1                                                             *
 **************************************************************************************************************************************/
static void(*Timer1_pICUSetCallBack)(void);
/************************************************************************************************************************************/
void TIMER_voidTimer1ICUInit(void)
{
    207c:	df 93       	push	r29
    207e:	cf 93       	push	r28
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
	 SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_ICES1_BIT);
    2084:	ae e4       	ldi	r26, 0x4E	; 78
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	ee e4       	ldi	r30, 0x4E	; 78
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	80 64       	ori	r24, 0x40	; 64
    2090:	8c 93       	st	X, r24
	 SET_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_TICIE1_BIT);
    2092:	a9 e5       	ldi	r26, 0x59	; 89
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	e9 e5       	ldi	r30, 0x59	; 89
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	80 62       	ori	r24, 0x20	; 32
    209e:	8c 93       	st	X, r24

	 CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_CS10_BIT);
    20a0:	ae e4       	ldi	r26, 0x4E	; 78
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	ee e4       	ldi	r30, 0x4E	; 78
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	8e 7f       	andi	r24, 0xFE	; 254
    20ac:	8c 93       	st	X, r24
	 SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_CS11_BIT);
    20ae:	ae e4       	ldi	r26, 0x4E	; 78
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	ee e4       	ldi	r30, 0x4E	; 78
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	82 60       	ori	r24, 0x02	; 2
    20ba:	8c 93       	st	X, r24
	 CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_CS12_BIT);
    20bc:	ae e4       	ldi	r26, 0x4E	; 78
    20be:	b0 e0       	ldi	r27, 0x00	; 0
    20c0:	ee e4       	ldi	r30, 0x4E	; 78
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	80 81       	ld	r24, Z
    20c6:	8b 7f       	andi	r24, 0xFB	; 251
    20c8:	8c 93       	st	X, r24
}
    20ca:	cf 91       	pop	r28
    20cc:	df 91       	pop	r29
    20ce:	08 95       	ret

000020d0 <TIMER_voidTimer1ICUSetTriggerEdge>:
void TIMER_voidTimer1ICUSetTriggerEdge(u8 Copy_u8ICUEdgeType)
{
    20d0:	df 93       	push	r29
    20d2:	cf 93       	push	r28
    20d4:	0f 92       	push	r0
    20d6:	cd b7       	in	r28, 0x3d	; 61
    20d8:	de b7       	in	r29, 0x3e	; 62
    20da:	89 83       	std	Y+1, r24	; 0x01
   if(Copy_u8ICUEdgeType==TIMER1_ICU_RISING_EDGY_TYPE_MODE)
    20dc:	89 81       	ldd	r24, Y+1	; 0x01
    20de:	81 30       	cpi	r24, 0x01	; 1
    20e0:	41 f4       	brne	.+16     	; 0x20f2 <TIMER_voidTimer1ICUSetTriggerEdge+0x22>
   {
	  SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_ICES1_BIT);
    20e2:	ae e4       	ldi	r26, 0x4E	; 78
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	ee e4       	ldi	r30, 0x4E	; 78
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	80 64       	ori	r24, 0x40	; 64
    20ee:	8c 93       	st	X, r24
    20f0:	0a c0       	rjmp	.+20     	; 0x2106 <TIMER_voidTimer1ICUSetTriggerEdge+0x36>
   }
   else if(Copy_u8ICUEdgeType==TIMER1_ICU_FALLING_EDGY_TYPE_MODE)
    20f2:	89 81       	ldd	r24, Y+1	; 0x01
    20f4:	88 23       	and	r24, r24
    20f6:	39 f4       	brne	.+14     	; 0x2106 <TIMER_voidTimer1ICUSetTriggerEdge+0x36>
   {
	  CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_ICES1_BIT);
    20f8:	ae e4       	ldi	r26, 0x4E	; 78
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	ee e4       	ldi	r30, 0x4E	; 78
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	8f 7b       	andi	r24, 0xBF	; 191
    2104:	8c 93       	st	X, r24
   }
}
    2106:	0f 90       	pop	r0
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	08 95       	ret

0000210e <TIMER_voidTimer1ICUGetInputCaptureValue>:
u16 TIMER_voidTimer1ICUGetInputCaptureValue(void)
{
    210e:	df 93       	push	r29
    2110:	cf 93       	push	r28
    2112:	cd b7       	in	r28, 0x3d	; 61
    2114:	de b7       	in	r29, 0x3e	; 62
	 return TIMER_u16_ICR1_REG;
    2116:	e6 e4       	ldi	r30, 0x46	; 70
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	80 81       	ld	r24, Z
    211c:	91 81       	ldd	r25, Z+1	; 0x01
}
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret

00002124 <TIMER_voidTimer1ICUSetCallBack>:
void TIMER_voidTimer1ICUSetCallBack(void (*Copy_pFun) (void))
{
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	00 d0       	rcall	.+0      	; 0x212a <TIMER_voidTimer1ICUSetCallBack+0x6>
    212a:	cd b7       	in	r28, 0x3d	; 61
    212c:	de b7       	in	r29, 0x3e	; 62
    212e:	9a 83       	std	Y+2, r25	; 0x02
    2130:	89 83       	std	Y+1, r24	; 0x01
	 Timer1_pICUSetCallBack = Copy_pFun;
    2132:	89 81       	ldd	r24, Y+1	; 0x01
    2134:	9a 81       	ldd	r25, Y+2	; 0x02
    2136:	90 93 7b 01 	sts	0x017B, r25
    213a:	80 93 7a 01 	sts	0x017A, r24
}
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	cf 91       	pop	r28
    2144:	df 91       	pop	r29
    2146:	08 95       	ret

00002148 <TIMER_voidClearTimer1Value>:
void TIMER_voidClearTimer1Value(void)
{
    2148:	df 93       	push	r29
    214a:	cf 93       	push	r28
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62
	 TIMER_u16_TCNT1_REG = 0;
    2150:	ec e4       	ldi	r30, 0x4C	; 76
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	11 82       	std	Z+1, r1	; 0x01
    2156:	10 82       	st	Z, r1
}
    2158:	cf 91       	pop	r28
    215a:	df 91       	pop	r29
    215c:	08 95       	ret

0000215e <__vector_6>:
void __vector_6 (void)
{
    215e:	1f 92       	push	r1
    2160:	0f 92       	push	r0
    2162:	0f b6       	in	r0, 0x3f	; 63
    2164:	0f 92       	push	r0
    2166:	11 24       	eor	r1, r1
    2168:	2f 93       	push	r18
    216a:	3f 93       	push	r19
    216c:	4f 93       	push	r20
    216e:	5f 93       	push	r21
    2170:	6f 93       	push	r22
    2172:	7f 93       	push	r23
    2174:	8f 93       	push	r24
    2176:	9f 93       	push	r25
    2178:	af 93       	push	r26
    217a:	bf 93       	push	r27
    217c:	ef 93       	push	r30
    217e:	ff 93       	push	r31
    2180:	df 93       	push	r29
    2182:	cf 93       	push	r28
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
	if (Timer1_pICUSetCallBack!=NULL)
    2188:	80 91 7a 01 	lds	r24, 0x017A
    218c:	90 91 7b 01 	lds	r25, 0x017B
    2190:	00 97       	sbiw	r24, 0x00	; 0
    2192:	29 f0       	breq	.+10     	; 0x219e <__vector_6+0x40>
	{
		Timer1_pICUSetCallBack();
    2194:	e0 91 7a 01 	lds	r30, 0x017A
    2198:	f0 91 7b 01 	lds	r31, 0x017B
    219c:	09 95       	icall
	}
}
    219e:	cf 91       	pop	r28
    21a0:	df 91       	pop	r29
    21a2:	ff 91       	pop	r31
    21a4:	ef 91       	pop	r30
    21a6:	bf 91       	pop	r27
    21a8:	af 91       	pop	r26
    21aa:	9f 91       	pop	r25
    21ac:	8f 91       	pop	r24
    21ae:	7f 91       	pop	r23
    21b0:	6f 91       	pop	r22
    21b2:	5f 91       	pop	r21
    21b4:	4f 91       	pop	r20
    21b6:	3f 91       	pop	r19
    21b8:	2f 91       	pop	r18
    21ba:	0f 90       	pop	r0
    21bc:	0f be       	out	0x3f, r0	; 63
    21be:	0f 90       	pop	r0
    21c0:	1f 90       	pop	r1
    21c2:	18 95       	reti

000021c4 <Global_Interrupt_Enable>:

#include "Global_Interrupt_private.h"
#include "Global_Interrupt_interface.h"

void Global_Interrupt_Enable(void)
{
    21c4:	df 93       	push	r29
    21c6:	cf 93       	push	r28
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I);
    21cc:	af e5       	ldi	r26, 0x5F	; 95
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	ef e5       	ldi	r30, 0x5F	; 95
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	80 68       	ori	r24, 0x80	; 128
    21d8:	8c 93       	st	X, r24
}
    21da:	cf 91       	pop	r28
    21dc:	df 91       	pop	r29
    21de:	08 95       	ret

000021e0 <Global_Interrupt_Disable>:
void Global_Interrupt_Disable(void)
{
    21e0:	df 93       	push	r29
    21e2:	cf 93       	push	r28
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I);
    21e8:	af e5       	ldi	r26, 0x5F	; 95
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	ef e5       	ldi	r30, 0x5F	; 95
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	8f 77       	andi	r24, 0x7F	; 127
    21f4:	8c 93       	st	X, r24
}
    21f6:	cf 91       	pop	r28
    21f8:	df 91       	pop	r29
    21fa:	08 95       	ret

000021fc <DIO_voidSetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidSetPinDirection(u8 Copy_u8PortNumber ,u8 Copy_u8PinNumber,u8 Copy_u8PinDirection)
{
    21fc:	df 93       	push	r29
    21fe:	cf 93       	push	r28
    2200:	cd b7       	in	r28, 0x3d	; 61
    2202:	de b7       	in	r29, 0x3e	; 62
    2204:	27 97       	sbiw	r28, 0x07	; 7
    2206:	0f b6       	in	r0, 0x3f	; 63
    2208:	f8 94       	cli
    220a:	de bf       	out	0x3e, r29	; 62
    220c:	0f be       	out	0x3f, r0	; 63
    220e:	cd bf       	out	0x3d, r28	; 61
    2210:	89 83       	std	Y+1, r24	; 0x01
    2212:	6a 83       	std	Y+2, r22	; 0x02
    2214:	4b 83       	std	Y+3, r20	; 0x03
	if(DIO_u8_PIN_OUTPUT==Copy_u8PinDirection)
    2216:	8b 81       	ldd	r24, Y+3	; 0x03
    2218:	81 30       	cpi	r24, 0x01	; 1
    221a:	09 f0       	breq	.+2      	; 0x221e <DIO_voidSetPinDirection+0x22>
    221c:	6f c0       	rjmp	.+222    	; 0x22fc <DIO_voidSetPinDirection+0x100>
	{
	    switch (Copy_u8PortNumber)
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	28 2f       	mov	r18, r24
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	3f 83       	std	Y+7, r19	; 0x07
    2226:	2e 83       	std	Y+6, r18	; 0x06
    2228:	8e 81       	ldd	r24, Y+6	; 0x06
    222a:	9f 81       	ldd	r25, Y+7	; 0x07
    222c:	81 30       	cpi	r24, 0x01	; 1
    222e:	91 05       	cpc	r25, r1
    2230:	49 f1       	breq	.+82     	; 0x2284 <DIO_voidSetPinDirection+0x88>
    2232:	2e 81       	ldd	r18, Y+6	; 0x06
    2234:	3f 81       	ldd	r19, Y+7	; 0x07
    2236:	22 30       	cpi	r18, 0x02	; 2
    2238:	31 05       	cpc	r19, r1
    223a:	2c f4       	brge	.+10     	; 0x2246 <DIO_voidSetPinDirection+0x4a>
    223c:	8e 81       	ldd	r24, Y+6	; 0x06
    223e:	9f 81       	ldd	r25, Y+7	; 0x07
    2240:	00 97       	sbiw	r24, 0x00	; 0
    2242:	61 f0       	breq	.+24     	; 0x225c <DIO_voidSetPinDirection+0x60>
    2244:	d2 c0       	rjmp	.+420    	; 0x23ea <DIO_voidSetPinDirection+0x1ee>
    2246:	2e 81       	ldd	r18, Y+6	; 0x06
    2248:	3f 81       	ldd	r19, Y+7	; 0x07
    224a:	22 30       	cpi	r18, 0x02	; 2
    224c:	31 05       	cpc	r19, r1
    224e:	71 f1       	breq	.+92     	; 0x22ac <DIO_voidSetPinDirection+0xb0>
    2250:	8e 81       	ldd	r24, Y+6	; 0x06
    2252:	9f 81       	ldd	r25, Y+7	; 0x07
    2254:	83 30       	cpi	r24, 0x03	; 3
    2256:	91 05       	cpc	r25, r1
    2258:	e9 f1       	breq	.+122    	; 0x22d4 <DIO_voidSetPinDirection+0xd8>
    225a:	c7 c0       	rjmp	.+398    	; 0x23ea <DIO_voidSetPinDirection+0x1ee>
		{
		  case DIO_u8_PORTA: SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinNumber); break;
    225c:	aa e3       	ldi	r26, 0x3A	; 58
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	ea e3       	ldi	r30, 0x3A	; 58
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	48 2f       	mov	r20, r24
    2268:	8a 81       	ldd	r24, Y+2	; 0x02
    226a:	28 2f       	mov	r18, r24
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	02 2e       	mov	r0, r18
    2274:	02 c0       	rjmp	.+4      	; 0x227a <DIO_voidSetPinDirection+0x7e>
    2276:	88 0f       	add	r24, r24
    2278:	99 1f       	adc	r25, r25
    227a:	0a 94       	dec	r0
    227c:	e2 f7       	brpl	.-8      	; 0x2276 <DIO_voidSetPinDirection+0x7a>
    227e:	84 2b       	or	r24, r20
    2280:	8c 93       	st	X, r24
    2282:	b3 c0       	rjmp	.+358    	; 0x23ea <DIO_voidSetPinDirection+0x1ee>
		  case DIO_u8_PORTB: SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinNumber); break;
    2284:	a7 e3       	ldi	r26, 0x37	; 55
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	e7 e3       	ldi	r30, 0x37	; 55
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	48 2f       	mov	r20, r24
    2290:	8a 81       	ldd	r24, Y+2	; 0x02
    2292:	28 2f       	mov	r18, r24
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	02 2e       	mov	r0, r18
    229c:	02 c0       	rjmp	.+4      	; 0x22a2 <DIO_voidSetPinDirection+0xa6>
    229e:	88 0f       	add	r24, r24
    22a0:	99 1f       	adc	r25, r25
    22a2:	0a 94       	dec	r0
    22a4:	e2 f7       	brpl	.-8      	; 0x229e <DIO_voidSetPinDirection+0xa2>
    22a6:	84 2b       	or	r24, r20
    22a8:	8c 93       	st	X, r24
    22aa:	9f c0       	rjmp	.+318    	; 0x23ea <DIO_voidSetPinDirection+0x1ee>
		  case DIO_u8_PORTC: SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinNumber); break;
    22ac:	a4 e3       	ldi	r26, 0x34	; 52
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	e4 e3       	ldi	r30, 0x34	; 52
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	48 2f       	mov	r20, r24
    22b8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ba:	28 2f       	mov	r18, r24
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	02 2e       	mov	r0, r18
    22c4:	02 c0       	rjmp	.+4      	; 0x22ca <DIO_voidSetPinDirection+0xce>
    22c6:	88 0f       	add	r24, r24
    22c8:	99 1f       	adc	r25, r25
    22ca:	0a 94       	dec	r0
    22cc:	e2 f7       	brpl	.-8      	; 0x22c6 <DIO_voidSetPinDirection+0xca>
    22ce:	84 2b       	or	r24, r20
    22d0:	8c 93       	st	X, r24
    22d2:	8b c0       	rjmp	.+278    	; 0x23ea <DIO_voidSetPinDirection+0x1ee>
		  case DIO_u8_PORTD: SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinNumber); break;
    22d4:	a1 e3       	ldi	r26, 0x31	; 49
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	e1 e3       	ldi	r30, 0x31	; 49
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	48 2f       	mov	r20, r24
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	28 2f       	mov	r18, r24
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	02 2e       	mov	r0, r18
    22ec:	02 c0       	rjmp	.+4      	; 0x22f2 <DIO_voidSetPinDirection+0xf6>
    22ee:	88 0f       	add	r24, r24
    22f0:	99 1f       	adc	r25, r25
    22f2:	0a 94       	dec	r0
    22f4:	e2 f7       	brpl	.-8      	; 0x22ee <DIO_voidSetPinDirection+0xf2>
    22f6:	84 2b       	or	r24, r20
    22f8:	8c 93       	st	X, r24
    22fa:	77 c0       	rjmp	.+238    	; 0x23ea <DIO_voidSetPinDirection+0x1ee>
		}
	}
	else if (DIO_u8_PIN_INPUT==Copy_u8PinDirection)
    22fc:	8b 81       	ldd	r24, Y+3	; 0x03
    22fe:	88 23       	and	r24, r24
    2300:	09 f0       	breq	.+2      	; 0x2304 <DIO_voidSetPinDirection+0x108>
    2302:	73 c0       	rjmp	.+230    	; 0x23ea <DIO_voidSetPinDirection+0x1ee>
	{
		switch (Copy_u8PortNumber)
    2304:	89 81       	ldd	r24, Y+1	; 0x01
    2306:	28 2f       	mov	r18, r24
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	3d 83       	std	Y+5, r19	; 0x05
    230c:	2c 83       	std	Y+4, r18	; 0x04
    230e:	8c 81       	ldd	r24, Y+4	; 0x04
    2310:	9d 81       	ldd	r25, Y+5	; 0x05
    2312:	81 30       	cpi	r24, 0x01	; 1
    2314:	91 05       	cpc	r25, r1
    2316:	59 f1       	breq	.+86     	; 0x236e <DIO_voidSetPinDirection+0x172>
    2318:	2c 81       	ldd	r18, Y+4	; 0x04
    231a:	3d 81       	ldd	r19, Y+5	; 0x05
    231c:	22 30       	cpi	r18, 0x02	; 2
    231e:	31 05       	cpc	r19, r1
    2320:	2c f4       	brge	.+10     	; 0x232c <DIO_voidSetPinDirection+0x130>
    2322:	8c 81       	ldd	r24, Y+4	; 0x04
    2324:	9d 81       	ldd	r25, Y+5	; 0x05
    2326:	00 97       	sbiw	r24, 0x00	; 0
    2328:	69 f0       	breq	.+26     	; 0x2344 <DIO_voidSetPinDirection+0x148>
    232a:	5f c0       	rjmp	.+190    	; 0x23ea <DIO_voidSetPinDirection+0x1ee>
    232c:	2c 81       	ldd	r18, Y+4	; 0x04
    232e:	3d 81       	ldd	r19, Y+5	; 0x05
    2330:	22 30       	cpi	r18, 0x02	; 2
    2332:	31 05       	cpc	r19, r1
    2334:	89 f1       	breq	.+98     	; 0x2398 <DIO_voidSetPinDirection+0x19c>
    2336:	8c 81       	ldd	r24, Y+4	; 0x04
    2338:	9d 81       	ldd	r25, Y+5	; 0x05
    233a:	83 30       	cpi	r24, 0x03	; 3
    233c:	91 05       	cpc	r25, r1
    233e:	09 f4       	brne	.+2      	; 0x2342 <DIO_voidSetPinDirection+0x146>
    2340:	40 c0       	rjmp	.+128    	; 0x23c2 <DIO_voidSetPinDirection+0x1c6>
    2342:	53 c0       	rjmp	.+166    	; 0x23ea <DIO_voidSetPinDirection+0x1ee>
		{
		  case DIO_u8_PORTA: CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinNumber); break;
    2344:	aa e3       	ldi	r26, 0x3A	; 58
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	ea e3       	ldi	r30, 0x3A	; 58
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
    234e:	48 2f       	mov	r20, r24
    2350:	8a 81       	ldd	r24, Y+2	; 0x02
    2352:	28 2f       	mov	r18, r24
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	02 2e       	mov	r0, r18
    235c:	02 c0       	rjmp	.+4      	; 0x2362 <DIO_voidSetPinDirection+0x166>
    235e:	88 0f       	add	r24, r24
    2360:	99 1f       	adc	r25, r25
    2362:	0a 94       	dec	r0
    2364:	e2 f7       	brpl	.-8      	; 0x235e <DIO_voidSetPinDirection+0x162>
    2366:	80 95       	com	r24
    2368:	84 23       	and	r24, r20
    236a:	8c 93       	st	X, r24
    236c:	3e c0       	rjmp	.+124    	; 0x23ea <DIO_voidSetPinDirection+0x1ee>
		  case DIO_u8_PORTB: CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinNumber); break;
    236e:	a7 e3       	ldi	r26, 0x37	; 55
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	e7 e3       	ldi	r30, 0x37	; 55
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	48 2f       	mov	r20, r24
    237a:	8a 81       	ldd	r24, Y+2	; 0x02
    237c:	28 2f       	mov	r18, r24
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	02 2e       	mov	r0, r18
    2386:	02 c0       	rjmp	.+4      	; 0x238c <DIO_voidSetPinDirection+0x190>
    2388:	88 0f       	add	r24, r24
    238a:	99 1f       	adc	r25, r25
    238c:	0a 94       	dec	r0
    238e:	e2 f7       	brpl	.-8      	; 0x2388 <DIO_voidSetPinDirection+0x18c>
    2390:	80 95       	com	r24
    2392:	84 23       	and	r24, r20
    2394:	8c 93       	st	X, r24
    2396:	29 c0       	rjmp	.+82     	; 0x23ea <DIO_voidSetPinDirection+0x1ee>
		  case DIO_u8_PORTC: CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinNumber); break;
    2398:	a4 e3       	ldi	r26, 0x34	; 52
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	e4 e3       	ldi	r30, 0x34	; 52
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	48 2f       	mov	r20, r24
    23a4:	8a 81       	ldd	r24, Y+2	; 0x02
    23a6:	28 2f       	mov	r18, r24
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	02 2e       	mov	r0, r18
    23b0:	02 c0       	rjmp	.+4      	; 0x23b6 <DIO_voidSetPinDirection+0x1ba>
    23b2:	88 0f       	add	r24, r24
    23b4:	99 1f       	adc	r25, r25
    23b6:	0a 94       	dec	r0
    23b8:	e2 f7       	brpl	.-8      	; 0x23b2 <DIO_voidSetPinDirection+0x1b6>
    23ba:	80 95       	com	r24
    23bc:	84 23       	and	r24, r20
    23be:	8c 93       	st	X, r24
    23c0:	14 c0       	rjmp	.+40     	; 0x23ea <DIO_voidSetPinDirection+0x1ee>
		  case DIO_u8_PORTD: CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinNumber); break;
    23c2:	a1 e3       	ldi	r26, 0x31	; 49
    23c4:	b0 e0       	ldi	r27, 0x00	; 0
    23c6:	e1 e3       	ldi	r30, 0x31	; 49
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	80 81       	ld	r24, Z
    23cc:	48 2f       	mov	r20, r24
    23ce:	8a 81       	ldd	r24, Y+2	; 0x02
    23d0:	28 2f       	mov	r18, r24
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	02 2e       	mov	r0, r18
    23da:	02 c0       	rjmp	.+4      	; 0x23e0 <DIO_voidSetPinDirection+0x1e4>
    23dc:	88 0f       	add	r24, r24
    23de:	99 1f       	adc	r25, r25
    23e0:	0a 94       	dec	r0
    23e2:	e2 f7       	brpl	.-8      	; 0x23dc <DIO_voidSetPinDirection+0x1e0>
    23e4:	80 95       	com	r24
    23e6:	84 23       	and	r24, r20
    23e8:	8c 93       	st	X, r24
		}
	}
}
    23ea:	27 96       	adiw	r28, 0x07	; 7
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	de bf       	out	0x3e, r29	; 62
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	cd bf       	out	0x3d, r28	; 61
    23f6:	cf 91       	pop	r28
    23f8:	df 91       	pop	r29
    23fa:	08 95       	ret

000023fc <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 Copy_u8PortNumber ,u8 Copy_u8PinNumber,u8 Copy_u8PinValue)
{
    23fc:	df 93       	push	r29
    23fe:	cf 93       	push	r28
    2400:	cd b7       	in	r28, 0x3d	; 61
    2402:	de b7       	in	r29, 0x3e	; 62
    2404:	27 97       	sbiw	r28, 0x07	; 7
    2406:	0f b6       	in	r0, 0x3f	; 63
    2408:	f8 94       	cli
    240a:	de bf       	out	0x3e, r29	; 62
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	cd bf       	out	0x3d, r28	; 61
    2410:	89 83       	std	Y+1, r24	; 0x01
    2412:	6a 83       	std	Y+2, r22	; 0x02
    2414:	4b 83       	std	Y+3, r20	; 0x03

	if(DIO_u8_HIGH==Copy_u8PinValue)
    2416:	8b 81       	ldd	r24, Y+3	; 0x03
    2418:	81 30       	cpi	r24, 0x01	; 1
    241a:	09 f0       	breq	.+2      	; 0x241e <DIO_voidSetPinValue+0x22>
    241c:	6f c0       	rjmp	.+222    	; 0x24fc <DIO_voidSetPinValue+0x100>
	{
	    switch (Copy_u8PortNumber)
    241e:	89 81       	ldd	r24, Y+1	; 0x01
    2420:	28 2f       	mov	r18, r24
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	3f 83       	std	Y+7, r19	; 0x07
    2426:	2e 83       	std	Y+6, r18	; 0x06
    2428:	8e 81       	ldd	r24, Y+6	; 0x06
    242a:	9f 81       	ldd	r25, Y+7	; 0x07
    242c:	81 30       	cpi	r24, 0x01	; 1
    242e:	91 05       	cpc	r25, r1
    2430:	49 f1       	breq	.+82     	; 0x2484 <DIO_voidSetPinValue+0x88>
    2432:	2e 81       	ldd	r18, Y+6	; 0x06
    2434:	3f 81       	ldd	r19, Y+7	; 0x07
    2436:	22 30       	cpi	r18, 0x02	; 2
    2438:	31 05       	cpc	r19, r1
    243a:	2c f4       	brge	.+10     	; 0x2446 <DIO_voidSetPinValue+0x4a>
    243c:	8e 81       	ldd	r24, Y+6	; 0x06
    243e:	9f 81       	ldd	r25, Y+7	; 0x07
    2440:	00 97       	sbiw	r24, 0x00	; 0
    2442:	61 f0       	breq	.+24     	; 0x245c <DIO_voidSetPinValue+0x60>
    2444:	d2 c0       	rjmp	.+420    	; 0x25ea <DIO_voidSetPinValue+0x1ee>
    2446:	2e 81       	ldd	r18, Y+6	; 0x06
    2448:	3f 81       	ldd	r19, Y+7	; 0x07
    244a:	22 30       	cpi	r18, 0x02	; 2
    244c:	31 05       	cpc	r19, r1
    244e:	71 f1       	breq	.+92     	; 0x24ac <DIO_voidSetPinValue+0xb0>
    2450:	8e 81       	ldd	r24, Y+6	; 0x06
    2452:	9f 81       	ldd	r25, Y+7	; 0x07
    2454:	83 30       	cpi	r24, 0x03	; 3
    2456:	91 05       	cpc	r25, r1
    2458:	e9 f1       	breq	.+122    	; 0x24d4 <DIO_voidSetPinValue+0xd8>
    245a:	c7 c0       	rjmp	.+398    	; 0x25ea <DIO_voidSetPinValue+0x1ee>
		{
		  case DIO_u8_PORTA: SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinNumber); break;
    245c:	ab e3       	ldi	r26, 0x3B	; 59
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	eb e3       	ldi	r30, 0x3B	; 59
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	80 81       	ld	r24, Z
    2466:	48 2f       	mov	r20, r24
    2468:	8a 81       	ldd	r24, Y+2	; 0x02
    246a:	28 2f       	mov	r18, r24
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	02 2e       	mov	r0, r18
    2474:	02 c0       	rjmp	.+4      	; 0x247a <DIO_voidSetPinValue+0x7e>
    2476:	88 0f       	add	r24, r24
    2478:	99 1f       	adc	r25, r25
    247a:	0a 94       	dec	r0
    247c:	e2 f7       	brpl	.-8      	; 0x2476 <DIO_voidSetPinValue+0x7a>
    247e:	84 2b       	or	r24, r20
    2480:	8c 93       	st	X, r24
    2482:	b3 c0       	rjmp	.+358    	; 0x25ea <DIO_voidSetPinValue+0x1ee>
		  case DIO_u8_PORTB: SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinNumber); break;
    2484:	a8 e3       	ldi	r26, 0x38	; 56
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	e8 e3       	ldi	r30, 0x38	; 56
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	48 2f       	mov	r20, r24
    2490:	8a 81       	ldd	r24, Y+2	; 0x02
    2492:	28 2f       	mov	r18, r24
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	02 2e       	mov	r0, r18
    249c:	02 c0       	rjmp	.+4      	; 0x24a2 <DIO_voidSetPinValue+0xa6>
    249e:	88 0f       	add	r24, r24
    24a0:	99 1f       	adc	r25, r25
    24a2:	0a 94       	dec	r0
    24a4:	e2 f7       	brpl	.-8      	; 0x249e <DIO_voidSetPinValue+0xa2>
    24a6:	84 2b       	or	r24, r20
    24a8:	8c 93       	st	X, r24
    24aa:	9f c0       	rjmp	.+318    	; 0x25ea <DIO_voidSetPinValue+0x1ee>
		  case DIO_u8_PORTC: SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinNumber); break;
    24ac:	a5 e3       	ldi	r26, 0x35	; 53
    24ae:	b0 e0       	ldi	r27, 0x00	; 0
    24b0:	e5 e3       	ldi	r30, 0x35	; 53
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	80 81       	ld	r24, Z
    24b6:	48 2f       	mov	r20, r24
    24b8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ba:	28 2f       	mov	r18, r24
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	02 2e       	mov	r0, r18
    24c4:	02 c0       	rjmp	.+4      	; 0x24ca <DIO_voidSetPinValue+0xce>
    24c6:	88 0f       	add	r24, r24
    24c8:	99 1f       	adc	r25, r25
    24ca:	0a 94       	dec	r0
    24cc:	e2 f7       	brpl	.-8      	; 0x24c6 <DIO_voidSetPinValue+0xca>
    24ce:	84 2b       	or	r24, r20
    24d0:	8c 93       	st	X, r24
    24d2:	8b c0       	rjmp	.+278    	; 0x25ea <DIO_voidSetPinValue+0x1ee>
		  case DIO_u8_PORTD: SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinNumber); break;
    24d4:	a2 e3       	ldi	r26, 0x32	; 50
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	e2 e3       	ldi	r30, 0x32	; 50
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	80 81       	ld	r24, Z
    24de:	48 2f       	mov	r20, r24
    24e0:	8a 81       	ldd	r24, Y+2	; 0x02
    24e2:	28 2f       	mov	r18, r24
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	02 2e       	mov	r0, r18
    24ec:	02 c0       	rjmp	.+4      	; 0x24f2 <DIO_voidSetPinValue+0xf6>
    24ee:	88 0f       	add	r24, r24
    24f0:	99 1f       	adc	r25, r25
    24f2:	0a 94       	dec	r0
    24f4:	e2 f7       	brpl	.-8      	; 0x24ee <DIO_voidSetPinValue+0xf2>
    24f6:	84 2b       	or	r24, r20
    24f8:	8c 93       	st	X, r24
    24fa:	77 c0       	rjmp	.+238    	; 0x25ea <DIO_voidSetPinValue+0x1ee>
		}
	}
	else if (DIO_u8_LOW==Copy_u8PinValue)
    24fc:	8b 81       	ldd	r24, Y+3	; 0x03
    24fe:	88 23       	and	r24, r24
    2500:	09 f0       	breq	.+2      	; 0x2504 <DIO_voidSetPinValue+0x108>
    2502:	73 c0       	rjmp	.+230    	; 0x25ea <DIO_voidSetPinValue+0x1ee>
	{
		switch (Copy_u8PortNumber)
    2504:	89 81       	ldd	r24, Y+1	; 0x01
    2506:	28 2f       	mov	r18, r24
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	3d 83       	std	Y+5, r19	; 0x05
    250c:	2c 83       	std	Y+4, r18	; 0x04
    250e:	8c 81       	ldd	r24, Y+4	; 0x04
    2510:	9d 81       	ldd	r25, Y+5	; 0x05
    2512:	81 30       	cpi	r24, 0x01	; 1
    2514:	91 05       	cpc	r25, r1
    2516:	59 f1       	breq	.+86     	; 0x256e <DIO_voidSetPinValue+0x172>
    2518:	2c 81       	ldd	r18, Y+4	; 0x04
    251a:	3d 81       	ldd	r19, Y+5	; 0x05
    251c:	22 30       	cpi	r18, 0x02	; 2
    251e:	31 05       	cpc	r19, r1
    2520:	2c f4       	brge	.+10     	; 0x252c <DIO_voidSetPinValue+0x130>
    2522:	8c 81       	ldd	r24, Y+4	; 0x04
    2524:	9d 81       	ldd	r25, Y+5	; 0x05
    2526:	00 97       	sbiw	r24, 0x00	; 0
    2528:	69 f0       	breq	.+26     	; 0x2544 <DIO_voidSetPinValue+0x148>
    252a:	5f c0       	rjmp	.+190    	; 0x25ea <DIO_voidSetPinValue+0x1ee>
    252c:	2c 81       	ldd	r18, Y+4	; 0x04
    252e:	3d 81       	ldd	r19, Y+5	; 0x05
    2530:	22 30       	cpi	r18, 0x02	; 2
    2532:	31 05       	cpc	r19, r1
    2534:	89 f1       	breq	.+98     	; 0x2598 <DIO_voidSetPinValue+0x19c>
    2536:	8c 81       	ldd	r24, Y+4	; 0x04
    2538:	9d 81       	ldd	r25, Y+5	; 0x05
    253a:	83 30       	cpi	r24, 0x03	; 3
    253c:	91 05       	cpc	r25, r1
    253e:	09 f4       	brne	.+2      	; 0x2542 <DIO_voidSetPinValue+0x146>
    2540:	40 c0       	rjmp	.+128    	; 0x25c2 <DIO_voidSetPinValue+0x1c6>
    2542:	53 c0       	rjmp	.+166    	; 0x25ea <DIO_voidSetPinValue+0x1ee>
		{
		  case DIO_u8_PORTA: CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinNumber); break;
    2544:	ab e3       	ldi	r26, 0x3B	; 59
    2546:	b0 e0       	ldi	r27, 0x00	; 0
    2548:	eb e3       	ldi	r30, 0x3B	; 59
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 81       	ld	r24, Z
    254e:	48 2f       	mov	r20, r24
    2550:	8a 81       	ldd	r24, Y+2	; 0x02
    2552:	28 2f       	mov	r18, r24
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	02 2e       	mov	r0, r18
    255c:	02 c0       	rjmp	.+4      	; 0x2562 <DIO_voidSetPinValue+0x166>
    255e:	88 0f       	add	r24, r24
    2560:	99 1f       	adc	r25, r25
    2562:	0a 94       	dec	r0
    2564:	e2 f7       	brpl	.-8      	; 0x255e <DIO_voidSetPinValue+0x162>
    2566:	80 95       	com	r24
    2568:	84 23       	and	r24, r20
    256a:	8c 93       	st	X, r24
    256c:	3e c0       	rjmp	.+124    	; 0x25ea <DIO_voidSetPinValue+0x1ee>
		  case DIO_u8_PORTB: CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinNumber); break;
    256e:	a8 e3       	ldi	r26, 0x38	; 56
    2570:	b0 e0       	ldi	r27, 0x00	; 0
    2572:	e8 e3       	ldi	r30, 0x38	; 56
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	80 81       	ld	r24, Z
    2578:	48 2f       	mov	r20, r24
    257a:	8a 81       	ldd	r24, Y+2	; 0x02
    257c:	28 2f       	mov	r18, r24
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	02 2e       	mov	r0, r18
    2586:	02 c0       	rjmp	.+4      	; 0x258c <DIO_voidSetPinValue+0x190>
    2588:	88 0f       	add	r24, r24
    258a:	99 1f       	adc	r25, r25
    258c:	0a 94       	dec	r0
    258e:	e2 f7       	brpl	.-8      	; 0x2588 <DIO_voidSetPinValue+0x18c>
    2590:	80 95       	com	r24
    2592:	84 23       	and	r24, r20
    2594:	8c 93       	st	X, r24
    2596:	29 c0       	rjmp	.+82     	; 0x25ea <DIO_voidSetPinValue+0x1ee>
		  case DIO_u8_PORTC: CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinNumber); break;
    2598:	a5 e3       	ldi	r26, 0x35	; 53
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	e5 e3       	ldi	r30, 0x35	; 53
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	80 81       	ld	r24, Z
    25a2:	48 2f       	mov	r20, r24
    25a4:	8a 81       	ldd	r24, Y+2	; 0x02
    25a6:	28 2f       	mov	r18, r24
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	02 2e       	mov	r0, r18
    25b0:	02 c0       	rjmp	.+4      	; 0x25b6 <DIO_voidSetPinValue+0x1ba>
    25b2:	88 0f       	add	r24, r24
    25b4:	99 1f       	adc	r25, r25
    25b6:	0a 94       	dec	r0
    25b8:	e2 f7       	brpl	.-8      	; 0x25b2 <DIO_voidSetPinValue+0x1b6>
    25ba:	80 95       	com	r24
    25bc:	84 23       	and	r24, r20
    25be:	8c 93       	st	X, r24
    25c0:	14 c0       	rjmp	.+40     	; 0x25ea <DIO_voidSetPinValue+0x1ee>
		  case DIO_u8_PORTD: CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinNumber); break;
    25c2:	a2 e3       	ldi	r26, 0x32	; 50
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	e2 e3       	ldi	r30, 0x32	; 50
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	80 81       	ld	r24, Z
    25cc:	48 2f       	mov	r20, r24
    25ce:	8a 81       	ldd	r24, Y+2	; 0x02
    25d0:	28 2f       	mov	r18, r24
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	02 2e       	mov	r0, r18
    25da:	02 c0       	rjmp	.+4      	; 0x25e0 <DIO_voidSetPinValue+0x1e4>
    25dc:	88 0f       	add	r24, r24
    25de:	99 1f       	adc	r25, r25
    25e0:	0a 94       	dec	r0
    25e2:	e2 f7       	brpl	.-8      	; 0x25dc <DIO_voidSetPinValue+0x1e0>
    25e4:	80 95       	com	r24
    25e6:	84 23       	and	r24, r20
    25e8:	8c 93       	st	X, r24
		}
	}
}
    25ea:	27 96       	adiw	r28, 0x07	; 7
    25ec:	0f b6       	in	r0, 0x3f	; 63
    25ee:	f8 94       	cli
    25f0:	de bf       	out	0x3e, r29	; 62
    25f2:	0f be       	out	0x3f, r0	; 63
    25f4:	cd bf       	out	0x3d, r28	; 61
    25f6:	cf 91       	pop	r28
    25f8:	df 91       	pop	r29
    25fa:	08 95       	ret

000025fc <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8PortNumber ,u8 Copy_u8PinNumber)
{
    25fc:	df 93       	push	r29
    25fe:	cf 93       	push	r28
    2600:	00 d0       	rcall	.+0      	; 0x2602 <DIO_u8GetPinValue+0x6>
    2602:	00 d0       	rcall	.+0      	; 0x2604 <DIO_u8GetPinValue+0x8>
    2604:	0f 92       	push	r0
    2606:	cd b7       	in	r28, 0x3d	; 61
    2608:	de b7       	in	r29, 0x3e	; 62
    260a:	8a 83       	std	Y+2, r24	; 0x02
    260c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8BitValue;
	switch (Copy_u8PortNumber)
    260e:	8a 81       	ldd	r24, Y+2	; 0x02
    2610:	28 2f       	mov	r18, r24
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	3d 83       	std	Y+5, r19	; 0x05
    2616:	2c 83       	std	Y+4, r18	; 0x04
    2618:	4c 81       	ldd	r20, Y+4	; 0x04
    261a:	5d 81       	ldd	r21, Y+5	; 0x05
    261c:	41 30       	cpi	r20, 0x01	; 1
    261e:	51 05       	cpc	r21, r1
    2620:	41 f1       	breq	.+80     	; 0x2672 <DIO_u8GetPinValue+0x76>
    2622:	8c 81       	ldd	r24, Y+4	; 0x04
    2624:	9d 81       	ldd	r25, Y+5	; 0x05
    2626:	82 30       	cpi	r24, 0x02	; 2
    2628:	91 05       	cpc	r25, r1
    262a:	34 f4       	brge	.+12     	; 0x2638 <DIO_u8GetPinValue+0x3c>
    262c:	2c 81       	ldd	r18, Y+4	; 0x04
    262e:	3d 81       	ldd	r19, Y+5	; 0x05
    2630:	21 15       	cp	r18, r1
    2632:	31 05       	cpc	r19, r1
    2634:	61 f0       	breq	.+24     	; 0x264e <DIO_u8GetPinValue+0x52>
    2636:	52 c0       	rjmp	.+164    	; 0x26dc <DIO_u8GetPinValue+0xe0>
    2638:	4c 81       	ldd	r20, Y+4	; 0x04
    263a:	5d 81       	ldd	r21, Y+5	; 0x05
    263c:	42 30       	cpi	r20, 0x02	; 2
    263e:	51 05       	cpc	r21, r1
    2640:	51 f1       	breq	.+84     	; 0x2696 <DIO_u8GetPinValue+0x9a>
    2642:	8c 81       	ldd	r24, Y+4	; 0x04
    2644:	9d 81       	ldd	r25, Y+5	; 0x05
    2646:	83 30       	cpi	r24, 0x03	; 3
    2648:	91 05       	cpc	r25, r1
    264a:	b9 f1       	breq	.+110    	; 0x26ba <DIO_u8GetPinValue+0xbe>
    264c:	47 c0       	rjmp	.+142    	; 0x26dc <DIO_u8GetPinValue+0xe0>
	{
	    case DIO_u8_PORTA: Local_u8BitValue= GET_BIT(DIO_u8_PINA_REG,Copy_u8PinNumber); break;
    264e:	e9 e3       	ldi	r30, 0x39	; 57
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	80 81       	ld	r24, Z
    2654:	28 2f       	mov	r18, r24
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	8b 81       	ldd	r24, Y+3	; 0x03
    265a:	88 2f       	mov	r24, r24
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	a9 01       	movw	r20, r18
    2660:	02 c0       	rjmp	.+4      	; 0x2666 <DIO_u8GetPinValue+0x6a>
    2662:	55 95       	asr	r21
    2664:	47 95       	ror	r20
    2666:	8a 95       	dec	r24
    2668:	e2 f7       	brpl	.-8      	; 0x2662 <DIO_u8GetPinValue+0x66>
    266a:	ca 01       	movw	r24, r20
    266c:	81 70       	andi	r24, 0x01	; 1
    266e:	89 83       	std	Y+1, r24	; 0x01
    2670:	35 c0       	rjmp	.+106    	; 0x26dc <DIO_u8GetPinValue+0xe0>
	    case DIO_u8_PORTB: Local_u8BitValue= GET_BIT(DIO_u8_PINB_REG,Copy_u8PinNumber); break;
    2672:	e6 e3       	ldi	r30, 0x36	; 54
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	80 81       	ld	r24, Z
    2678:	28 2f       	mov	r18, r24
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	8b 81       	ldd	r24, Y+3	; 0x03
    267e:	88 2f       	mov	r24, r24
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	a9 01       	movw	r20, r18
    2684:	02 c0       	rjmp	.+4      	; 0x268a <DIO_u8GetPinValue+0x8e>
    2686:	55 95       	asr	r21
    2688:	47 95       	ror	r20
    268a:	8a 95       	dec	r24
    268c:	e2 f7       	brpl	.-8      	; 0x2686 <DIO_u8GetPinValue+0x8a>
    268e:	ca 01       	movw	r24, r20
    2690:	81 70       	andi	r24, 0x01	; 1
    2692:	89 83       	std	Y+1, r24	; 0x01
    2694:	23 c0       	rjmp	.+70     	; 0x26dc <DIO_u8GetPinValue+0xe0>
		case DIO_u8_PORTC: Local_u8BitValue= GET_BIT(DIO_u8_PINC_REG,Copy_u8PinNumber); break;
    2696:	e3 e3       	ldi	r30, 0x33	; 51
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	80 81       	ld	r24, Z
    269c:	28 2f       	mov	r18, r24
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	8b 81       	ldd	r24, Y+3	; 0x03
    26a2:	88 2f       	mov	r24, r24
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	a9 01       	movw	r20, r18
    26a8:	02 c0       	rjmp	.+4      	; 0x26ae <DIO_u8GetPinValue+0xb2>
    26aa:	55 95       	asr	r21
    26ac:	47 95       	ror	r20
    26ae:	8a 95       	dec	r24
    26b0:	e2 f7       	brpl	.-8      	; 0x26aa <DIO_u8GetPinValue+0xae>
    26b2:	ca 01       	movw	r24, r20
    26b4:	81 70       	andi	r24, 0x01	; 1
    26b6:	89 83       	std	Y+1, r24	; 0x01
    26b8:	11 c0       	rjmp	.+34     	; 0x26dc <DIO_u8GetPinValue+0xe0>
		case DIO_u8_PORTD: Local_u8BitValue= GET_BIT(DIO_u8_PIND_REG,Copy_u8PinNumber); break;
    26ba:	e0 e3       	ldi	r30, 0x30	; 48
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	80 81       	ld	r24, Z
    26c0:	28 2f       	mov	r18, r24
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	8b 81       	ldd	r24, Y+3	; 0x03
    26c6:	88 2f       	mov	r24, r24
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	a9 01       	movw	r20, r18
    26cc:	02 c0       	rjmp	.+4      	; 0x26d2 <DIO_u8GetPinValue+0xd6>
    26ce:	55 95       	asr	r21
    26d0:	47 95       	ror	r20
    26d2:	8a 95       	dec	r24
    26d4:	e2 f7       	brpl	.-8      	; 0x26ce <DIO_u8GetPinValue+0xd2>
    26d6:	ca 01       	movw	r24, r20
    26d8:	81 70       	andi	r24, 0x01	; 1
    26da:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8BitValue;
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
    26e6:	0f 90       	pop	r0
    26e8:	cf 91       	pop	r28
    26ea:	df 91       	pop	r29
    26ec:	08 95       	ret

000026ee <DIO_voidTogglePinValue>:
void DIO_voidTogglePinValue(u8 Copy_u8PortNumber ,u8 Copy_u8PinNumber)
{
    26ee:	df 93       	push	r29
    26f0:	cf 93       	push	r28
    26f2:	00 d0       	rcall	.+0      	; 0x26f4 <DIO_voidTogglePinValue+0x6>
    26f4:	00 d0       	rcall	.+0      	; 0x26f6 <DIO_voidTogglePinValue+0x8>
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62
    26fa:	89 83       	std	Y+1, r24	; 0x01
    26fc:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortNumber)
    26fe:	89 81       	ldd	r24, Y+1	; 0x01
    2700:	28 2f       	mov	r18, r24
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	3c 83       	std	Y+4, r19	; 0x04
    2706:	2b 83       	std	Y+3, r18	; 0x03
    2708:	8b 81       	ldd	r24, Y+3	; 0x03
    270a:	9c 81       	ldd	r25, Y+4	; 0x04
    270c:	81 30       	cpi	r24, 0x01	; 1
    270e:	91 05       	cpc	r25, r1
    2710:	49 f1       	breq	.+82     	; 0x2764 <DIO_voidTogglePinValue+0x76>
    2712:	2b 81       	ldd	r18, Y+3	; 0x03
    2714:	3c 81       	ldd	r19, Y+4	; 0x04
    2716:	22 30       	cpi	r18, 0x02	; 2
    2718:	31 05       	cpc	r19, r1
    271a:	2c f4       	brge	.+10     	; 0x2726 <DIO_voidTogglePinValue+0x38>
    271c:	8b 81       	ldd	r24, Y+3	; 0x03
    271e:	9c 81       	ldd	r25, Y+4	; 0x04
    2720:	00 97       	sbiw	r24, 0x00	; 0
    2722:	61 f0       	breq	.+24     	; 0x273c <DIO_voidTogglePinValue+0x4e>
    2724:	5a c0       	rjmp	.+180    	; 0x27da <DIO_voidTogglePinValue+0xec>
    2726:	2b 81       	ldd	r18, Y+3	; 0x03
    2728:	3c 81       	ldd	r19, Y+4	; 0x04
    272a:	22 30       	cpi	r18, 0x02	; 2
    272c:	31 05       	cpc	r19, r1
    272e:	71 f1       	breq	.+92     	; 0x278c <DIO_voidTogglePinValue+0x9e>
    2730:	8b 81       	ldd	r24, Y+3	; 0x03
    2732:	9c 81       	ldd	r25, Y+4	; 0x04
    2734:	83 30       	cpi	r24, 0x03	; 3
    2736:	91 05       	cpc	r25, r1
    2738:	e9 f1       	breq	.+122    	; 0x27b4 <DIO_voidTogglePinValue+0xc6>
    273a:	4f c0       	rjmp	.+158    	; 0x27da <DIO_voidTogglePinValue+0xec>
	{
		  case DIO_u8_PORTA: TOOGLE_BIT(DIO_u8_PORTA_REG,Copy_u8PinNumber); break;
    273c:	ab e3       	ldi	r26, 0x3B	; 59
    273e:	b0 e0       	ldi	r27, 0x00	; 0
    2740:	eb e3       	ldi	r30, 0x3B	; 59
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	80 81       	ld	r24, Z
    2746:	48 2f       	mov	r20, r24
    2748:	8a 81       	ldd	r24, Y+2	; 0x02
    274a:	28 2f       	mov	r18, r24
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	02 2e       	mov	r0, r18
    2754:	02 c0       	rjmp	.+4      	; 0x275a <DIO_voidTogglePinValue+0x6c>
    2756:	88 0f       	add	r24, r24
    2758:	99 1f       	adc	r25, r25
    275a:	0a 94       	dec	r0
    275c:	e2 f7       	brpl	.-8      	; 0x2756 <DIO_voidTogglePinValue+0x68>
    275e:	84 27       	eor	r24, r20
    2760:	8c 93       	st	X, r24
    2762:	3b c0       	rjmp	.+118    	; 0x27da <DIO_voidTogglePinValue+0xec>
		  case DIO_u8_PORTB: TOOGLE_BIT(DIO_u8_PORTB_REG,Copy_u8PinNumber); break;
    2764:	a8 e3       	ldi	r26, 0x38	; 56
    2766:	b0 e0       	ldi	r27, 0x00	; 0
    2768:	e8 e3       	ldi	r30, 0x38	; 56
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	80 81       	ld	r24, Z
    276e:	48 2f       	mov	r20, r24
    2770:	8a 81       	ldd	r24, Y+2	; 0x02
    2772:	28 2f       	mov	r18, r24
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	02 2e       	mov	r0, r18
    277c:	02 c0       	rjmp	.+4      	; 0x2782 <DIO_voidTogglePinValue+0x94>
    277e:	88 0f       	add	r24, r24
    2780:	99 1f       	adc	r25, r25
    2782:	0a 94       	dec	r0
    2784:	e2 f7       	brpl	.-8      	; 0x277e <DIO_voidTogglePinValue+0x90>
    2786:	84 27       	eor	r24, r20
    2788:	8c 93       	st	X, r24
    278a:	27 c0       	rjmp	.+78     	; 0x27da <DIO_voidTogglePinValue+0xec>
		  case DIO_u8_PORTC: TOOGLE_BIT(DIO_u8_PORTC_REG,Copy_u8PinNumber); break;
    278c:	a5 e3       	ldi	r26, 0x35	; 53
    278e:	b0 e0       	ldi	r27, 0x00	; 0
    2790:	e5 e3       	ldi	r30, 0x35	; 53
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	80 81       	ld	r24, Z
    2796:	48 2f       	mov	r20, r24
    2798:	8a 81       	ldd	r24, Y+2	; 0x02
    279a:	28 2f       	mov	r18, r24
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	02 2e       	mov	r0, r18
    27a4:	02 c0       	rjmp	.+4      	; 0x27aa <DIO_voidTogglePinValue+0xbc>
    27a6:	88 0f       	add	r24, r24
    27a8:	99 1f       	adc	r25, r25
    27aa:	0a 94       	dec	r0
    27ac:	e2 f7       	brpl	.-8      	; 0x27a6 <DIO_voidTogglePinValue+0xb8>
    27ae:	84 27       	eor	r24, r20
    27b0:	8c 93       	st	X, r24
    27b2:	13 c0       	rjmp	.+38     	; 0x27da <DIO_voidTogglePinValue+0xec>
		  case DIO_u8_PORTD: TOOGLE_BIT(DIO_u8_PORTD_REG,Copy_u8PinNumber); break;
    27b4:	a2 e3       	ldi	r26, 0x32	; 50
    27b6:	b0 e0       	ldi	r27, 0x00	; 0
    27b8:	e2 e3       	ldi	r30, 0x32	; 50
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	80 81       	ld	r24, Z
    27be:	48 2f       	mov	r20, r24
    27c0:	8a 81       	ldd	r24, Y+2	; 0x02
    27c2:	28 2f       	mov	r18, r24
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	02 2e       	mov	r0, r18
    27cc:	02 c0       	rjmp	.+4      	; 0x27d2 <DIO_voidTogglePinValue+0xe4>
    27ce:	88 0f       	add	r24, r24
    27d0:	99 1f       	adc	r25, r25
    27d2:	0a 94       	dec	r0
    27d4:	e2 f7       	brpl	.-8      	; 0x27ce <DIO_voidTogglePinValue+0xe0>
    27d6:	84 27       	eor	r24, r20
    27d8:	8c 93       	st	X, r24
	}
}
    27da:	0f 90       	pop	r0
    27dc:	0f 90       	pop	r0
    27de:	0f 90       	pop	r0
    27e0:	0f 90       	pop	r0
    27e2:	cf 91       	pop	r28
    27e4:	df 91       	pop	r29
    27e6:	08 95       	ret

000027e8 <DIO_voidSetPortDirection>:
/***************************************************************************************************/
void DIO_voidSetPortDirection(u8 Copy_u8PortNumber ,u8 Copy_u8PortDirection)
{
    27e8:	df 93       	push	r29
    27ea:	cf 93       	push	r28
    27ec:	00 d0       	rcall	.+0      	; 0x27ee <DIO_voidSetPortDirection+0x6>
    27ee:	00 d0       	rcall	.+0      	; 0x27f0 <DIO_voidSetPortDirection+0x8>
    27f0:	cd b7       	in	r28, 0x3d	; 61
    27f2:	de b7       	in	r29, 0x3e	; 62
    27f4:	89 83       	std	Y+1, r24	; 0x01
    27f6:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortNumber)
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	28 2f       	mov	r18, r24
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	3c 83       	std	Y+4, r19	; 0x04
    2800:	2b 83       	std	Y+3, r18	; 0x03
    2802:	8b 81       	ldd	r24, Y+3	; 0x03
    2804:	9c 81       	ldd	r25, Y+4	; 0x04
    2806:	81 30       	cpi	r24, 0x01	; 1
    2808:	91 05       	cpc	r25, r1
    280a:	d1 f0       	breq	.+52     	; 0x2840 <DIO_voidSetPortDirection+0x58>
    280c:	2b 81       	ldd	r18, Y+3	; 0x03
    280e:	3c 81       	ldd	r19, Y+4	; 0x04
    2810:	22 30       	cpi	r18, 0x02	; 2
    2812:	31 05       	cpc	r19, r1
    2814:	2c f4       	brge	.+10     	; 0x2820 <DIO_voidSetPortDirection+0x38>
    2816:	8b 81       	ldd	r24, Y+3	; 0x03
    2818:	9c 81       	ldd	r25, Y+4	; 0x04
    281a:	00 97       	sbiw	r24, 0x00	; 0
    281c:	61 f0       	breq	.+24     	; 0x2836 <DIO_voidSetPortDirection+0x4e>
    281e:	1e c0       	rjmp	.+60     	; 0x285c <DIO_voidSetPortDirection+0x74>
    2820:	2b 81       	ldd	r18, Y+3	; 0x03
    2822:	3c 81       	ldd	r19, Y+4	; 0x04
    2824:	22 30       	cpi	r18, 0x02	; 2
    2826:	31 05       	cpc	r19, r1
    2828:	81 f0       	breq	.+32     	; 0x284a <DIO_voidSetPortDirection+0x62>
    282a:	8b 81       	ldd	r24, Y+3	; 0x03
    282c:	9c 81       	ldd	r25, Y+4	; 0x04
    282e:	83 30       	cpi	r24, 0x03	; 3
    2830:	91 05       	cpc	r25, r1
    2832:	81 f0       	breq	.+32     	; 0x2854 <DIO_voidSetPortDirection+0x6c>
    2834:	13 c0       	rjmp	.+38     	; 0x285c <DIO_voidSetPortDirection+0x74>
	{
		  case DIO_u8_PORTA: DIO_u8_DDRA_REG = Copy_u8PortDirection; break;
    2836:	ea e3       	ldi	r30, 0x3A	; 58
    2838:	f0 e0       	ldi	r31, 0x00	; 0
    283a:	8a 81       	ldd	r24, Y+2	; 0x02
    283c:	80 83       	st	Z, r24
    283e:	0e c0       	rjmp	.+28     	; 0x285c <DIO_voidSetPortDirection+0x74>
		  case DIO_u8_PORTB: DIO_u8_DDRB_REG = Copy_u8PortDirection; break;
    2840:	e7 e3       	ldi	r30, 0x37	; 55
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	8a 81       	ldd	r24, Y+2	; 0x02
    2846:	80 83       	st	Z, r24
    2848:	09 c0       	rjmp	.+18     	; 0x285c <DIO_voidSetPortDirection+0x74>
		  case DIO_u8_PORTC: DIO_u8_DDRC_REG = Copy_u8PortDirection; break;
    284a:	e4 e3       	ldi	r30, 0x34	; 52
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	8a 81       	ldd	r24, Y+2	; 0x02
    2850:	80 83       	st	Z, r24
    2852:	04 c0       	rjmp	.+8      	; 0x285c <DIO_voidSetPortDirection+0x74>
		  case DIO_u8_PORTD: DIO_u8_DDRD_REG = Copy_u8PortDirection; break;
    2854:	e1 e3       	ldi	r30, 0x31	; 49
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	8a 81       	ldd	r24, Y+2	; 0x02
    285a:	80 83       	st	Z, r24
	}
}
    285c:	0f 90       	pop	r0
    285e:	0f 90       	pop	r0
    2860:	0f 90       	pop	r0
    2862:	0f 90       	pop	r0
    2864:	cf 91       	pop	r28
    2866:	df 91       	pop	r29
    2868:	08 95       	ret

0000286a <DIO_voidSetPortValue>:
void DIO_voidSetPortValue(u8 Copy_u8PortNumber ,u8 Copy_u8PortValue)
{
    286a:	df 93       	push	r29
    286c:	cf 93       	push	r28
    286e:	00 d0       	rcall	.+0      	; 0x2870 <DIO_voidSetPortValue+0x6>
    2870:	00 d0       	rcall	.+0      	; 0x2872 <DIO_voidSetPortValue+0x8>
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
    2876:	89 83       	std	Y+1, r24	; 0x01
    2878:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortNumber)
    287a:	89 81       	ldd	r24, Y+1	; 0x01
    287c:	28 2f       	mov	r18, r24
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	3c 83       	std	Y+4, r19	; 0x04
    2882:	2b 83       	std	Y+3, r18	; 0x03
    2884:	8b 81       	ldd	r24, Y+3	; 0x03
    2886:	9c 81       	ldd	r25, Y+4	; 0x04
    2888:	81 30       	cpi	r24, 0x01	; 1
    288a:	91 05       	cpc	r25, r1
    288c:	d1 f0       	breq	.+52     	; 0x28c2 <DIO_voidSetPortValue+0x58>
    288e:	2b 81       	ldd	r18, Y+3	; 0x03
    2890:	3c 81       	ldd	r19, Y+4	; 0x04
    2892:	22 30       	cpi	r18, 0x02	; 2
    2894:	31 05       	cpc	r19, r1
    2896:	2c f4       	brge	.+10     	; 0x28a2 <DIO_voidSetPortValue+0x38>
    2898:	8b 81       	ldd	r24, Y+3	; 0x03
    289a:	9c 81       	ldd	r25, Y+4	; 0x04
    289c:	00 97       	sbiw	r24, 0x00	; 0
    289e:	61 f0       	breq	.+24     	; 0x28b8 <DIO_voidSetPortValue+0x4e>
    28a0:	1e c0       	rjmp	.+60     	; 0x28de <DIO_voidSetPortValue+0x74>
    28a2:	2b 81       	ldd	r18, Y+3	; 0x03
    28a4:	3c 81       	ldd	r19, Y+4	; 0x04
    28a6:	22 30       	cpi	r18, 0x02	; 2
    28a8:	31 05       	cpc	r19, r1
    28aa:	81 f0       	breq	.+32     	; 0x28cc <DIO_voidSetPortValue+0x62>
    28ac:	8b 81       	ldd	r24, Y+3	; 0x03
    28ae:	9c 81       	ldd	r25, Y+4	; 0x04
    28b0:	83 30       	cpi	r24, 0x03	; 3
    28b2:	91 05       	cpc	r25, r1
    28b4:	81 f0       	breq	.+32     	; 0x28d6 <DIO_voidSetPortValue+0x6c>
    28b6:	13 c0       	rjmp	.+38     	; 0x28de <DIO_voidSetPortValue+0x74>
	{
		  case DIO_u8_PORTA: DIO_u8_PORTA_REG = Copy_u8PortValue; break;
    28b8:	eb e3       	ldi	r30, 0x3B	; 59
    28ba:	f0 e0       	ldi	r31, 0x00	; 0
    28bc:	8a 81       	ldd	r24, Y+2	; 0x02
    28be:	80 83       	st	Z, r24
    28c0:	0e c0       	rjmp	.+28     	; 0x28de <DIO_voidSetPortValue+0x74>
		  case DIO_u8_PORTB: DIO_u8_PORTB_REG = Copy_u8PortValue; break;
    28c2:	e8 e3       	ldi	r30, 0x38	; 56
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	8a 81       	ldd	r24, Y+2	; 0x02
    28c8:	80 83       	st	Z, r24
    28ca:	09 c0       	rjmp	.+18     	; 0x28de <DIO_voidSetPortValue+0x74>
		  case DIO_u8_PORTC: DIO_u8_PORTC_REG = Copy_u8PortValue; break;
    28cc:	e5 e3       	ldi	r30, 0x35	; 53
    28ce:	f0 e0       	ldi	r31, 0x00	; 0
    28d0:	8a 81       	ldd	r24, Y+2	; 0x02
    28d2:	80 83       	st	Z, r24
    28d4:	04 c0       	rjmp	.+8      	; 0x28de <DIO_voidSetPortValue+0x74>
		  case DIO_u8_PORTD: DIO_u8_PORTD_REG = Copy_u8PortValue; break;
    28d6:	e2 e3       	ldi	r30, 0x32	; 50
    28d8:	f0 e0       	ldi	r31, 0x00	; 0
    28da:	8a 81       	ldd	r24, Y+2	; 0x02
    28dc:	80 83       	st	Z, r24

	}
}
    28de:	0f 90       	pop	r0
    28e0:	0f 90       	pop	r0
    28e2:	0f 90       	pop	r0
    28e4:	0f 90       	pop	r0
    28e6:	cf 91       	pop	r28
    28e8:	df 91       	pop	r29
    28ea:	08 95       	ret

000028ec <DIO_u8GetPortValue>:
u8  DIO_u8GetPortValue (u8 Copy_u8PortNumber)
{
    28ec:	df 93       	push	r29
    28ee:	cf 93       	push	r28
    28f0:	00 d0       	rcall	.+0      	; 0x28f2 <DIO_u8GetPortValue+0x6>
    28f2:	00 d0       	rcall	.+0      	; 0x28f4 <DIO_u8GetPortValue+0x8>
    28f4:	cd b7       	in	r28, 0x3d	; 61
    28f6:	de b7       	in	r29, 0x3e	; 62
    28f8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PortValue;
	switch (Copy_u8PortNumber)
    28fa:	8a 81       	ldd	r24, Y+2	; 0x02
    28fc:	28 2f       	mov	r18, r24
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	3c 83       	std	Y+4, r19	; 0x04
    2902:	2b 83       	std	Y+3, r18	; 0x03
    2904:	8b 81       	ldd	r24, Y+3	; 0x03
    2906:	9c 81       	ldd	r25, Y+4	; 0x04
    2908:	81 30       	cpi	r24, 0x01	; 1
    290a:	91 05       	cpc	r25, r1
    290c:	d1 f0       	breq	.+52     	; 0x2942 <DIO_u8GetPortValue+0x56>
    290e:	2b 81       	ldd	r18, Y+3	; 0x03
    2910:	3c 81       	ldd	r19, Y+4	; 0x04
    2912:	22 30       	cpi	r18, 0x02	; 2
    2914:	31 05       	cpc	r19, r1
    2916:	2c f4       	brge	.+10     	; 0x2922 <DIO_u8GetPortValue+0x36>
    2918:	8b 81       	ldd	r24, Y+3	; 0x03
    291a:	9c 81       	ldd	r25, Y+4	; 0x04
    291c:	00 97       	sbiw	r24, 0x00	; 0
    291e:	61 f0       	breq	.+24     	; 0x2938 <DIO_u8GetPortValue+0x4c>
    2920:	1e c0       	rjmp	.+60     	; 0x295e <DIO_u8GetPortValue+0x72>
    2922:	2b 81       	ldd	r18, Y+3	; 0x03
    2924:	3c 81       	ldd	r19, Y+4	; 0x04
    2926:	22 30       	cpi	r18, 0x02	; 2
    2928:	31 05       	cpc	r19, r1
    292a:	81 f0       	breq	.+32     	; 0x294c <DIO_u8GetPortValue+0x60>
    292c:	8b 81       	ldd	r24, Y+3	; 0x03
    292e:	9c 81       	ldd	r25, Y+4	; 0x04
    2930:	83 30       	cpi	r24, 0x03	; 3
    2932:	91 05       	cpc	r25, r1
    2934:	81 f0       	breq	.+32     	; 0x2956 <DIO_u8GetPortValue+0x6a>
    2936:	13 c0       	rjmp	.+38     	; 0x295e <DIO_u8GetPortValue+0x72>
	{
		case DIO_u8_PORTA: Local_u8PortValue = DIO_u8_PINA_REG; break;
    2938:	e9 e3       	ldi	r30, 0x39	; 57
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	80 81       	ld	r24, Z
    293e:	89 83       	std	Y+1, r24	; 0x01
    2940:	0e c0       	rjmp	.+28     	; 0x295e <DIO_u8GetPortValue+0x72>
		case DIO_u8_PORTB: Local_u8PortValue = DIO_u8_PINB_REG; break;
    2942:	e6 e3       	ldi	r30, 0x36	; 54
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	80 81       	ld	r24, Z
    2948:	89 83       	std	Y+1, r24	; 0x01
    294a:	09 c0       	rjmp	.+18     	; 0x295e <DIO_u8GetPortValue+0x72>
		case DIO_u8_PORTC: Local_u8PortValue = DIO_u8_PINC_REG; break;
    294c:	e3 e3       	ldi	r30, 0x33	; 51
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	80 81       	ld	r24, Z
    2952:	89 83       	std	Y+1, r24	; 0x01
    2954:	04 c0       	rjmp	.+8      	; 0x295e <DIO_u8GetPortValue+0x72>
		case DIO_u8_PORTD: Local_u8PortValue = DIO_u8_PIND_REG; break;
    2956:	e0 e3       	ldi	r30, 0x30	; 48
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	80 81       	ld	r24, Z
    295c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8PortValue;
    295e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2960:	0f 90       	pop	r0
    2962:	0f 90       	pop	r0
    2964:	0f 90       	pop	r0
    2966:	0f 90       	pop	r0
    2968:	cf 91       	pop	r28
    296a:	df 91       	pop	r29
    296c:	08 95       	ret

0000296e <ULTRASONIC_voidInit>:

u8 ULTRASONIC_u8EdgeCounter = 0;
u16 ULTRASONIC_u16TimeON = 0;

void ULTRASONIC_voidInit(void)
{
    296e:	df 93       	push	r29
    2970:	cf 93       	push	r28
    2972:	cd b7       	in	r28, 0x3d	; 61
    2974:	de b7       	in	r29, 0x3e	; 62
	Global_Interrupt_Enable();
    2976:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <Global_Interrupt_Enable>
	TIMER_voidTimer1ICUInit();
    297a:	0e 94 3e 10 	call	0x207c	; 0x207c <TIMER_voidTimer1ICUInit>
	TIMER_voidTimer1ICUSetCallBack(&ULTRASONIC_voidEdgeProcessing);
    297e:	84 ed       	ldi	r24, 0xD4	; 212
    2980:	95 e1       	ldi	r25, 0x15	; 21
    2982:	0e 94 92 10 	call	0x2124	; 0x2124 <TIMER_voidTimer1ICUSetCallBack>
	DIO_voidSetPinDirection(DIO_u8_PORTD,DIO_u8_PIN6,DIO_u8_PIN_INPUT);
    2986:	83 e0       	ldi	r24, 0x03	; 3
    2988:	66 e0       	ldi	r22, 0x06	; 6
    298a:	40 e0       	ldi	r20, 0x00	; 0
    298c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,DIO_u8_PIN_OUTPUT);
    2990:	83 e0       	ldi	r24, 0x03	; 3
    2992:	65 e0       	ldi	r22, 0x05	; 5
    2994:	41 e0       	ldi	r20, 0x01	; 1
    2996:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,DIO_u8_LOW);
    299a:	83 e0       	ldi	r24, 0x03	; 3
    299c:	65 e0       	ldi	r22, 0x05	; 5
    299e:	40 e0       	ldi	r20, 0x00	; 0
    29a0:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
}
    29a4:	cf 91       	pop	r28
    29a6:	df 91       	pop	r29
    29a8:	08 95       	ret

000029aa <ULTRASONIC_voidTrigger>:
void ULTRASONIC_voidTrigger(void)
{
    29aa:	df 93       	push	r29
    29ac:	cf 93       	push	r28
    29ae:	cd b7       	in	r28, 0x3d	; 61
    29b0:	de b7       	in	r29, 0x3e	; 62
    29b2:	68 97       	sbiw	r28, 0x18	; 24
    29b4:	0f b6       	in	r0, 0x3f	; 63
    29b6:	f8 94       	cli
    29b8:	de bf       	out	0x3e, r29	; 62
    29ba:	0f be       	out	0x3f, r0	; 63
    29bc:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,DIO_u8_HIGH);
    29be:	83 e0       	ldi	r24, 0x03	; 3
    29c0:	65 e0       	ldi	r22, 0x05	; 5
    29c2:	41 e0       	ldi	r20, 0x01	; 1
    29c4:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
    29c8:	80 e0       	ldi	r24, 0x00	; 0
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	a0 e2       	ldi	r26, 0x20	; 32
    29ce:	b1 e4       	ldi	r27, 0x41	; 65
    29d0:	8d 8b       	std	Y+21, r24	; 0x15
    29d2:	9e 8b       	std	Y+22, r25	; 0x16
    29d4:	af 8b       	std	Y+23, r26	; 0x17
    29d6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    29d8:	6d 89       	ldd	r22, Y+21	; 0x15
    29da:	7e 89       	ldd	r23, Y+22	; 0x16
    29dc:	8f 89       	ldd	r24, Y+23	; 0x17
    29de:	98 8d       	ldd	r25, Y+24	; 0x18
    29e0:	2b ea       	ldi	r18, 0xAB	; 171
    29e2:	3a ea       	ldi	r19, 0xAA	; 170
    29e4:	4a e2       	ldi	r20, 0x2A	; 42
    29e6:	50 e4       	ldi	r21, 0x40	; 64
    29e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ec:	dc 01       	movw	r26, r24
    29ee:	cb 01       	movw	r24, r22
    29f0:	89 8b       	std	Y+17, r24	; 0x11
    29f2:	9a 8b       	std	Y+18, r25	; 0x12
    29f4:	ab 8b       	std	Y+19, r26	; 0x13
    29f6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    29f8:	69 89       	ldd	r22, Y+17	; 0x11
    29fa:	7a 89       	ldd	r23, Y+18	; 0x12
    29fc:	8b 89       	ldd	r24, Y+19	; 0x13
    29fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	40 e8       	ldi	r20, 0x80	; 128
    2a06:	5f e3       	ldi	r21, 0x3F	; 63
    2a08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a0c:	88 23       	and	r24, r24
    2a0e:	1c f4       	brge	.+6      	; 0x2a16 <ULTRASONIC_voidTrigger+0x6c>
		__ticks = 1;
    2a10:	81 e0       	ldi	r24, 0x01	; 1
    2a12:	88 8b       	std	Y+16, r24	; 0x10
    2a14:	91 c0       	rjmp	.+290    	; 0x2b38 <ULTRASONIC_voidTrigger+0x18e>
	else if (__tmp > 255)
    2a16:	69 89       	ldd	r22, Y+17	; 0x11
    2a18:	7a 89       	ldd	r23, Y+18	; 0x12
    2a1a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a1c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	4f e7       	ldi	r20, 0x7F	; 127
    2a24:	53 e4       	ldi	r21, 0x43	; 67
    2a26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a2a:	18 16       	cp	r1, r24
    2a2c:	0c f0       	brlt	.+2      	; 0x2a30 <ULTRASONIC_voidTrigger+0x86>
    2a2e:	7b c0       	rjmp	.+246    	; 0x2b26 <ULTRASONIC_voidTrigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    2a30:	6d 89       	ldd	r22, Y+21	; 0x15
    2a32:	7e 89       	ldd	r23, Y+22	; 0x16
    2a34:	8f 89       	ldd	r24, Y+23	; 0x17
    2a36:	98 8d       	ldd	r25, Y+24	; 0x18
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	4a e7       	ldi	r20, 0x7A	; 122
    2a3e:	54 e4       	ldi	r21, 0x44	; 68
    2a40:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	8c 87       	std	Y+12, r24	; 0x0c
    2a4a:	9d 87       	std	Y+13, r25	; 0x0d
    2a4c:	ae 87       	std	Y+14, r26	; 0x0e
    2a4e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a50:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a52:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a54:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a56:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	4a ef       	ldi	r20, 0xFA	; 250
    2a5e:	54 e4       	ldi	r21, 0x44	; 68
    2a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	88 87       	std	Y+8, r24	; 0x08
    2a6a:	99 87       	std	Y+9, r25	; 0x09
    2a6c:	aa 87       	std	Y+10, r26	; 0x0a
    2a6e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2a70:	68 85       	ldd	r22, Y+8	; 0x08
    2a72:	79 85       	ldd	r23, Y+9	; 0x09
    2a74:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a76:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a78:	20 e0       	ldi	r18, 0x00	; 0
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	40 e8       	ldi	r20, 0x80	; 128
    2a7e:	5f e3       	ldi	r21, 0x3F	; 63
    2a80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a84:	88 23       	and	r24, r24
    2a86:	2c f4       	brge	.+10     	; 0x2a92 <ULTRASONIC_voidTrigger+0xe8>
		__ticks = 1;
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	9f 83       	std	Y+7, r25	; 0x07
    2a8e:	8e 83       	std	Y+6, r24	; 0x06
    2a90:	3f c0       	rjmp	.+126    	; 0x2b10 <ULTRASONIC_voidTrigger+0x166>
	else if (__tmp > 65535)
    2a92:	68 85       	ldd	r22, Y+8	; 0x08
    2a94:	79 85       	ldd	r23, Y+9	; 0x09
    2a96:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a98:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a9a:	20 e0       	ldi	r18, 0x00	; 0
    2a9c:	3f ef       	ldi	r19, 0xFF	; 255
    2a9e:	4f e7       	ldi	r20, 0x7F	; 127
    2aa0:	57 e4       	ldi	r21, 0x47	; 71
    2aa2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2aa6:	18 16       	cp	r1, r24
    2aa8:	4c f5       	brge	.+82     	; 0x2afc <ULTRASONIC_voidTrigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aaa:	6c 85       	ldd	r22, Y+12	; 0x0c
    2aac:	7d 85       	ldd	r23, Y+13	; 0x0d
    2aae:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ab0:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	40 e2       	ldi	r20, 0x20	; 32
    2ab8:	51 e4       	ldi	r21, 0x41	; 65
    2aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	bc 01       	movw	r22, r24
    2ac4:	cd 01       	movw	r24, r26
    2ac6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aca:	dc 01       	movw	r26, r24
    2acc:	cb 01       	movw	r24, r22
    2ace:	9f 83       	std	Y+7, r25	; 0x07
    2ad0:	8e 83       	std	Y+6, r24	; 0x06
    2ad2:	0f c0       	rjmp	.+30     	; 0x2af2 <ULTRASONIC_voidTrigger+0x148>
    2ad4:	88 ec       	ldi	r24, 0xC8	; 200
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	9d 83       	std	Y+5, r25	; 0x05
    2ada:	8c 83       	std	Y+4, r24	; 0x04
    2adc:	8c 81       	ldd	r24, Y+4	; 0x04
    2ade:	9d 81       	ldd	r25, Y+5	; 0x05
    2ae0:	01 97       	sbiw	r24, 0x01	; 1
    2ae2:	f1 f7       	brne	.-4      	; 0x2ae0 <ULTRASONIC_voidTrigger+0x136>
    2ae4:	9d 83       	std	Y+5, r25	; 0x05
    2ae6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae8:	8e 81       	ldd	r24, Y+6	; 0x06
    2aea:	9f 81       	ldd	r25, Y+7	; 0x07
    2aec:	01 97       	sbiw	r24, 0x01	; 1
    2aee:	9f 83       	std	Y+7, r25	; 0x07
    2af0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2af2:	8e 81       	ldd	r24, Y+6	; 0x06
    2af4:	9f 81       	ldd	r25, Y+7	; 0x07
    2af6:	00 97       	sbiw	r24, 0x00	; 0
    2af8:	69 f7       	brne	.-38     	; 0x2ad4 <ULTRASONIC_voidTrigger+0x12a>
    2afa:	24 c0       	rjmp	.+72     	; 0x2b44 <ULTRASONIC_voidTrigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2afc:	68 85       	ldd	r22, Y+8	; 0x08
    2afe:	79 85       	ldd	r23, Y+9	; 0x09
    2b00:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b02:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b08:	dc 01       	movw	r26, r24
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	9f 83       	std	Y+7, r25	; 0x07
    2b0e:	8e 83       	std	Y+6, r24	; 0x06
    2b10:	8e 81       	ldd	r24, Y+6	; 0x06
    2b12:	9f 81       	ldd	r25, Y+7	; 0x07
    2b14:	9b 83       	std	Y+3, r25	; 0x03
    2b16:	8a 83       	std	Y+2, r24	; 0x02
    2b18:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b1c:	01 97       	sbiw	r24, 0x01	; 1
    2b1e:	f1 f7       	brne	.-4      	; 0x2b1c <ULTRASONIC_voidTrigger+0x172>
    2b20:	9b 83       	std	Y+3, r25	; 0x03
    2b22:	8a 83       	std	Y+2, r24	; 0x02
    2b24:	0f c0       	rjmp	.+30     	; 0x2b44 <ULTRASONIC_voidTrigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b26:	69 89       	ldd	r22, Y+17	; 0x11
    2b28:	7a 89       	ldd	r23, Y+18	; 0x12
    2b2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	88 8b       	std	Y+16, r24	; 0x10
    2b38:	88 89       	ldd	r24, Y+16	; 0x10
    2b3a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b3c:	89 81       	ldd	r24, Y+1	; 0x01
    2b3e:	8a 95       	dec	r24
    2b40:	f1 f7       	brne	.-4      	; 0x2b3e <ULTRASONIC_voidTrigger+0x194>
    2b42:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	DIO_voidSetPinValue(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,DIO_u8_LOW);
    2b44:	83 e0       	ldi	r24, 0x03	; 3
    2b46:	65 e0       	ldi	r22, 0x05	; 5
    2b48:	40 e0       	ldi	r20, 0x00	; 0
    2b4a:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
}
    2b4e:	68 96       	adiw	r28, 0x18	; 24
    2b50:	0f b6       	in	r0, 0x3f	; 63
    2b52:	f8 94       	cli
    2b54:	de bf       	out	0x3e, r29	; 62
    2b56:	0f be       	out	0x3f, r0	; 63
    2b58:	cd bf       	out	0x3d, r28	; 61
    2b5a:	cf 91       	pop	r28
    2b5c:	df 91       	pop	r29
    2b5e:	08 95       	ret

00002b60 <ULTRASONIC_u16GetDistance>:
u16 ULTRASONIC_u16GetDistance(void)
{
    2b60:	df 93       	push	r29
    2b62:	cf 93       	push	r28
    2b64:	00 d0       	rcall	.+0      	; 0x2b66 <ULTRASONIC_u16GetDistance+0x6>
    2b66:	0f 92       	push	r0
    2b68:	cd b7       	in	r28, 0x3d	; 61
    2b6a:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16Distance;
	for (u8 Local_u8Couter=0;Local_u8Couter<16;Local_u8Couter++)
    2b6c:	19 82       	std	Y+1, r1	; 0x01
    2b6e:	11 c0       	rjmp	.+34     	; 0x2b92 <ULTRASONIC_u16GetDistance+0x32>
	{
		 ULTRASONIC_voidTrigger();
    2b70:	0e 94 d5 14 	call	0x29aa	; 0x29aa <ULTRASONIC_voidTrigger>
		  * Prescaler F_CPU/8 for timer frequency.
		  * The timer gets incremented after 1 us time elapse.
		  * Distance (cm)= 17000 x (TIMER value) x 1 x 10^-6 cm
	      * Distance (cm)= (TIMER value) / 58 cm
	      * */
	     Local_u16Distance=(ULTRASONIC_u16TimeON/(58)); /* Calculating Distance In cm */
    2b74:	80 91 7d 01 	lds	r24, 0x017D
    2b78:	90 91 7e 01 	lds	r25, 0x017E
    2b7c:	2a e3       	ldi	r18, 0x3A	; 58
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	b9 01       	movw	r22, r18
    2b82:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <__udivmodhi4>
    2b86:	cb 01       	movw	r24, r22
    2b88:	9b 83       	std	Y+3, r25	; 0x03
    2b8a:	8a 83       	std	Y+2, r24	; 0x02
	DIO_voidSetPinValue(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,DIO_u8_LOW);
}
u16 ULTRASONIC_u16GetDistance(void)
{
	u16 Local_u16Distance;
	for (u8 Local_u8Couter=0;Local_u8Couter<16;Local_u8Couter++)
    2b8c:	89 81       	ldd	r24, Y+1	; 0x01
    2b8e:	8f 5f       	subi	r24, 0xFF	; 255
    2b90:	89 83       	std	Y+1, r24	; 0x01
    2b92:	89 81       	ldd	r24, Y+1	; 0x01
    2b94:	80 31       	cpi	r24, 0x10	; 16
    2b96:	60 f3       	brcs	.-40     	; 0x2b70 <ULTRASONIC_u16GetDistance+0x10>
		  * Distance (cm)= 17000 x (TIMER value) x 1 x 10^-6 cm
	      * Distance (cm)= (TIMER value) / 58 cm
	      * */
	     Local_u16Distance=(ULTRASONIC_u16TimeON/(58)); /* Calculating Distance In cm */
	}
	return Local_u16Distance;
    2b98:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9a:	9b 81       	ldd	r25, Y+3	; 0x03
}
    2b9c:	0f 90       	pop	r0
    2b9e:	0f 90       	pop	r0
    2ba0:	0f 90       	pop	r0
    2ba2:	cf 91       	pop	r28
    2ba4:	df 91       	pop	r29
    2ba6:	08 95       	ret

00002ba8 <ULTRASONIC_voidEdgeProcessing>:
void ULTRASONIC_voidEdgeProcessing(void)
{
    2ba8:	df 93       	push	r29
    2baa:	cf 93       	push	r28
    2bac:	cd b7       	in	r28, 0x3d	; 61
    2bae:	de b7       	in	r29, 0x3e	; 62
	ULTRASONIC_u8EdgeCounter++;
    2bb0:	80 91 7c 01 	lds	r24, 0x017C
    2bb4:	8f 5f       	subi	r24, 0xFF	; 255
    2bb6:	80 93 7c 01 	sts	0x017C, r24
	if(ULTRASONIC_u8EdgeCounter == 1)
    2bba:	80 91 7c 01 	lds	r24, 0x017C
    2bbe:	81 30       	cpi	r24, 0x01	; 1
    2bc0:	31 f4       	brne	.+12     	; 0x2bce <ULTRASONIC_voidEdgeProcessing+0x26>
	{
		TIMER_voidClearTimer1Value();
    2bc2:	0e 94 a4 10 	call	0x2148	; 0x2148 <TIMER_voidClearTimer1Value>
		TIMER_voidTimer1ICUSetTriggerEdge(TIMER1_ICU_FALLING_EDGY_TYPE_MODE);
    2bc6:	80 e0       	ldi	r24, 0x00	; 0
    2bc8:	0e 94 68 10 	call	0x20d0	; 0x20d0 <TIMER_voidTimer1ICUSetTriggerEdge>
    2bcc:	11 c0       	rjmp	.+34     	; 0x2bf0 <ULTRASONIC_voidEdgeProcessing+0x48>
	}
	else if(ULTRASONIC_u8EdgeCounter == 2)
    2bce:	80 91 7c 01 	lds	r24, 0x017C
    2bd2:	82 30       	cpi	r24, 0x02	; 2
    2bd4:	69 f4       	brne	.+26     	; 0x2bf0 <ULTRASONIC_voidEdgeProcessing+0x48>
	{
		ULTRASONIC_u16TimeON = TIMER_voidTimer1ICUGetInputCaptureValue();
    2bd6:	0e 94 87 10 	call	0x210e	; 0x210e <TIMER_voidTimer1ICUGetInputCaptureValue>
    2bda:	90 93 7e 01 	sts	0x017E, r25
    2bde:	80 93 7d 01 	sts	0x017D, r24
		TIMER_voidClearTimer1Value();
    2be2:	0e 94 a4 10 	call	0x2148	; 0x2148 <TIMER_voidClearTimer1Value>
		ULTRASONIC_u8EdgeCounter=0;
    2be6:	10 92 7c 01 	sts	0x017C, r1
		TIMER_voidTimer1ICUSetTriggerEdge(TIMER1_ICU_RISING_EDGY_TYPE_MODE);
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	0e 94 68 10 	call	0x20d0	; 0x20d0 <TIMER_voidTimer1ICUSetTriggerEdge>
	}
}
    2bf0:	cf 91       	pop	r28
    2bf2:	df 91       	pop	r29
    2bf4:	08 95       	ret

00002bf6 <SevSeg_voidDisplay>:

/* COMMON CATHODE  				  F		B	  R	    L	  S	  */
u8 Seven_SegmentDIRLetter[5]={0x71, 0x7F, 0x50, 0x38, 0x6D};

void SevSeg_voidDisplay(u8 PortNum, u8 u8NumberCpy)
{
    2bf6:	df 93       	push	r29
    2bf8:	cf 93       	push	r28
    2bfa:	00 d0       	rcall	.+0      	; 0x2bfc <SevSeg_voidDisplay+0x6>
    2bfc:	cd b7       	in	r28, 0x3d	; 61
    2bfe:	de b7       	in	r29, 0x3e	; 62
    2c00:	89 83       	std	Y+1, r24	; 0x01
    2c02:	6a 83       	std	Y+2, r22	; 0x02
#if COMMON_TYPE == COMMON_CATHODE
	DIO_voidSetPortValue(PortNum, Seven_SegmentDIRLetter[u8NumberCpy]);
    2c04:	8a 81       	ldd	r24, Y+2	; 0x02
    2c06:	88 2f       	mov	r24, r24
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	fc 01       	movw	r30, r24
    2c0c:	e8 59       	subi	r30, 0x98	; 152
    2c0e:	fe 4f       	sbci	r31, 0xFE	; 254
    2c10:	90 81       	ld	r25, Z
    2c12:	89 81       	ldd	r24, Y+1	; 0x01
    2c14:	69 2f       	mov	r22, r25
    2c16:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_voidSetPortValue>
#elif COMMON_TYPE == COMMON_ANODE
	DIO_voidSetPortValue(PortNum, ~Seven_SegmentDIRLetter[u8NumberCpy]);
#endif
}
    2c1a:	0f 90       	pop	r0
    2c1c:	0f 90       	pop	r0
    2c1e:	cf 91       	pop	r28
    2c20:	df 91       	pop	r29
    2c22:	08 95       	ret

00002c24 <SERVO_voidTimer1InitOCR1A>:
/* MCAL Layer */
#include "SERVO_interface.h"
#include "SERVO_private.h"
#include "SERVO_config.h"
void SERVO_voidTimer1InitOCR1A(void)
{
    2c24:	df 93       	push	r29
    2c26:	cf 93       	push	r28
    2c28:	cd b7       	in	r28, 0x3d	; 61
    2c2a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DIO_u8_PORTD,DIO_u8_PIN5,DIO_u8_PIN_OUTPUT);
    2c2c:	83 e0       	ldi	r24, 0x03	; 3
    2c2e:	65 e0       	ldi	r22, 0x05	; 5
    2c30:	41 e0       	ldi	r20, 0x01	; 1
    2c32:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DIO_voidSetPinDirection>
	TIMER_voidTimer1Enable(TIMER1_MODE_FAST_PWM_ICR1,TIMER1_MODE_CHANNEL_A_CLEAR_OC1A,TIMER1_MODE_CHANNEL_B_NORMAL);
    2c36:	8e e0       	ldi	r24, 0x0E	; 14
    2c38:	62 e0       	ldi	r22, 0x02	; 2
    2c3a:	40 e0       	ldi	r20, 0x00	; 0
    2c3c:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <TIMER_voidTimer1Enable>
}
    2c40:	cf 91       	pop	r28
    2c42:	df 91       	pop	r29
    2c44:	08 95       	ret

00002c46 <SERVO_voidTimer1InitOCR1B>:
void SERVO_voidTimer1InitOCR1B(void)
{
    2c46:	df 93       	push	r29
    2c48:	cf 93       	push	r28
    2c4a:	cd b7       	in	r28, 0x3d	; 61
    2c4c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DIO_u8_PORTD,DIO_u8_PIN4,DIO_u8_PIN_OUTPUT);
    2c4e:	83 e0       	ldi	r24, 0x03	; 3
    2c50:	64 e0       	ldi	r22, 0x04	; 4
    2c52:	41 e0       	ldi	r20, 0x01	; 1
    2c54:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DIO_voidSetPinDirection>
	TIMER_voidTimer1Enable(TIMER1_MODE_FAST_PWM_OCR1A,TIMER1_MODE_CHANNEL_A_NORMAL,TIMER1_MODE_CHANNEL_B_CLEAR_OC1B);
    2c58:	8f e0       	ldi	r24, 0x0F	; 15
    2c5a:	60 e0       	ldi	r22, 0x00	; 0
    2c5c:	42 e0       	ldi	r20, 0x02	; 2
    2c5e:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <TIMER_voidTimer1Enable>
}
    2c62:	cf 91       	pop	r28
    2c64:	df 91       	pop	r29
    2c66:	08 95       	ret

00002c68 <SERVO_voidTimer1ServoSetAngleOCR1A>:
void SERVO_voidTimer1ServoSetAngleOCR1A(u32 Copy_u32Angle)
{
    2c68:	df 93       	push	r29
    2c6a:	cf 93       	push	r28
    2c6c:	cd b7       	in	r28, 0x3d	; 61
    2c6e:	de b7       	in	r29, 0x3e	; 62
    2c70:	28 97       	sbiw	r28, 0x08	; 8
    2c72:	0f b6       	in	r0, 0x3f	; 63
    2c74:	f8 94       	cli
    2c76:	de bf       	out	0x3e, r29	; 62
    2c78:	0f be       	out	0x3f, r0	; 63
    2c7a:	cd bf       	out	0x3d, r28	; 61
    2c7c:	6d 83       	std	Y+5, r22	; 0x05
    2c7e:	7e 83       	std	Y+6, r23	; 0x06
    2c80:	8f 83       	std	Y+7, r24	; 0x07
    2c82:	98 87       	std	Y+8, r25	; 0x08
	TIMER_voidTimer1SetICR1 (19999);
    2c84:	8f e1       	ldi	r24, 0x1F	; 31
    2c86:	9e e4       	ldi	r25, 0x4E	; 78
    2c88:	0e 94 27 10 	call	0x204e	; 0x204e <TIMER_voidTimer1SetICR1>
	u32 Local_u32AnglePulse = (((Copy_u32Angle * 1840 )/180)+480);
    2c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c90:	af 81       	ldd	r26, Y+7	; 0x07
    2c92:	b8 85       	ldd	r27, Y+8	; 0x08
    2c94:	20 e3       	ldi	r18, 0x30	; 48
    2c96:	37 e0       	ldi	r19, 0x07	; 7
    2c98:	40 e0       	ldi	r20, 0x00	; 0
    2c9a:	50 e0       	ldi	r21, 0x00	; 0
    2c9c:	bc 01       	movw	r22, r24
    2c9e:	cd 01       	movw	r24, r26
    2ca0:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <__mulsi3>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	24 eb       	ldi	r18, 0xB4	; 180
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	40 e0       	ldi	r20, 0x00	; 0
    2cae:	50 e0       	ldi	r21, 0x00	; 0
    2cb0:	bc 01       	movw	r22, r24
    2cb2:	cd 01       	movw	r24, r26
    2cb4:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <__udivmodsi4>
    2cb8:	da 01       	movw	r26, r20
    2cba:	c9 01       	movw	r24, r18
    2cbc:	80 52       	subi	r24, 0x20	; 32
    2cbe:	9e 4f       	sbci	r25, 0xFE	; 254
    2cc0:	af 4f       	sbci	r26, 0xFF	; 255
    2cc2:	bf 4f       	sbci	r27, 0xFF	; 255
    2cc4:	89 83       	std	Y+1, r24	; 0x01
    2cc6:	9a 83       	std	Y+2, r25	; 0x02
    2cc8:	ab 83       	std	Y+3, r26	; 0x03
    2cca:	bc 83       	std	Y+4, r27	; 0x04
	TIMER_voidTimer1SetOCR1A(Local_u32AnglePulse);
    2ccc:	89 81       	ldd	r24, Y+1	; 0x01
    2cce:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd0:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <TIMER_voidTimer1SetOCR1A>
}
    2cd4:	28 96       	adiw	r28, 0x08	; 8
    2cd6:	0f b6       	in	r0, 0x3f	; 63
    2cd8:	f8 94       	cli
    2cda:	de bf       	out	0x3e, r29	; 62
    2cdc:	0f be       	out	0x3f, r0	; 63
    2cde:	cd bf       	out	0x3d, r28	; 61
    2ce0:	cf 91       	pop	r28
    2ce2:	df 91       	pop	r29
    2ce4:	08 95       	ret

00002ce6 <SERVO_voidTimer1ServoSetAngleOCR1B>:
void SERVO_voidTimer1ServoSetAngleOCR1B(u32 Copy_u32Angle)
{
    2ce6:	df 93       	push	r29
    2ce8:	cf 93       	push	r28
    2cea:	cd b7       	in	r28, 0x3d	; 61
    2cec:	de b7       	in	r29, 0x3e	; 62
    2cee:	28 97       	sbiw	r28, 0x08	; 8
    2cf0:	0f b6       	in	r0, 0x3f	; 63
    2cf2:	f8 94       	cli
    2cf4:	de bf       	out	0x3e, r29	; 62
    2cf6:	0f be       	out	0x3f, r0	; 63
    2cf8:	cd bf       	out	0x3d, r28	; 61
    2cfa:	6d 83       	std	Y+5, r22	; 0x05
    2cfc:	7e 83       	std	Y+6, r23	; 0x06
    2cfe:	8f 83       	std	Y+7, r24	; 0x07
    2d00:	98 87       	std	Y+8, r25	; 0x08
	TIMER_voidTimer1SetOCR1A (19999);
    2d02:	8f e1       	ldi	r24, 0x1F	; 31
    2d04:	9e e4       	ldi	r25, 0x4E	; 78
    2d06:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <TIMER_voidTimer1SetOCR1A>
	u32 Local_u32AnglePulse = (((Copy_u32Angle * 1840 )/180)+480);
    2d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d0e:	af 81       	ldd	r26, Y+7	; 0x07
    2d10:	b8 85       	ldd	r27, Y+8	; 0x08
    2d12:	20 e3       	ldi	r18, 0x30	; 48
    2d14:	37 e0       	ldi	r19, 0x07	; 7
    2d16:	40 e0       	ldi	r20, 0x00	; 0
    2d18:	50 e0       	ldi	r21, 0x00	; 0
    2d1a:	bc 01       	movw	r22, r24
    2d1c:	cd 01       	movw	r24, r26
    2d1e:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <__mulsi3>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	24 eb       	ldi	r18, 0xB4	; 180
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	40 e0       	ldi	r20, 0x00	; 0
    2d2c:	50 e0       	ldi	r21, 0x00	; 0
    2d2e:	bc 01       	movw	r22, r24
    2d30:	cd 01       	movw	r24, r26
    2d32:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <__udivmodsi4>
    2d36:	da 01       	movw	r26, r20
    2d38:	c9 01       	movw	r24, r18
    2d3a:	80 52       	subi	r24, 0x20	; 32
    2d3c:	9e 4f       	sbci	r25, 0xFE	; 254
    2d3e:	af 4f       	sbci	r26, 0xFF	; 255
    2d40:	bf 4f       	sbci	r27, 0xFF	; 255
    2d42:	89 83       	std	Y+1, r24	; 0x01
    2d44:	9a 83       	std	Y+2, r25	; 0x02
    2d46:	ab 83       	std	Y+3, r26	; 0x03
    2d48:	bc 83       	std	Y+4, r27	; 0x04
	TIMER_voidTimer1SetOCR1B(Local_u32AnglePulse);
    2d4a:	89 81       	ldd	r24, Y+1	; 0x01
    2d4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d4e:	0e 94 15 10 	call	0x202a	; 0x202a <TIMER_voidTimer1SetOCR1B>
}
    2d52:	28 96       	adiw	r28, 0x08	; 8
    2d54:	0f b6       	in	r0, 0x3f	; 63
    2d56:	f8 94       	cli
    2d58:	de bf       	out	0x3e, r29	; 62
    2d5a:	0f be       	out	0x3f, r0	; 63
    2d5c:	cd bf       	out	0x3d, r28	; 61
    2d5e:	cf 91       	pop	r28
    2d60:	df 91       	pop	r29
    2d62:	08 95       	ret

00002d64 <BUZZER_voidBuzzer_Work>:
#include "BUZZER_interface.h"
#include "BUZZER_private.h"
#include "BUZZER_config.h"

void BUZZER_voidBuzzer_Work(u8 copy_u8Sound)
{
    2d64:	df 93       	push	r29
    2d66:	cf 93       	push	r28
    2d68:	00 d0       	rcall	.+0      	; 0x2d6a <BUZZER_voidBuzzer_Work+0x6>
    2d6a:	0f 92       	push	r0
    2d6c:	cd b7       	in	r28, 0x3d	; 61
    2d6e:	de b7       	in	r29, 0x3e	; 62
    2d70:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8Sound)
    2d72:	89 81       	ldd	r24, Y+1	; 0x01
    2d74:	28 2f       	mov	r18, r24
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	3b 83       	std	Y+3, r19	; 0x03
    2d7a:	2a 83       	std	Y+2, r18	; 0x02
    2d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d80:	00 97       	sbiw	r24, 0x00	; 0
    2d82:	59 f0       	breq	.+22     	; 0x2d9a <BUZZER_voidBuzzer_Work+0x36>
    2d84:	2a 81       	ldd	r18, Y+2	; 0x02
    2d86:	3b 81       	ldd	r19, Y+3	; 0x03
    2d88:	21 30       	cpi	r18, 0x01	; 1
    2d8a:	31 05       	cpc	r19, r1
    2d8c:	59 f4       	brne	.+22     	; 0x2da4 <BUZZER_voidBuzzer_Work+0x40>
	{
	case BUZZER_ON : 	DIO_voidSetPinValue(BUZZER_PORT , BUZZER_PIN , DIO_u8_HIGH); break ;
    2d8e:	82 e0       	ldi	r24, 0x02	; 2
    2d90:	65 e0       	ldi	r22, 0x05	; 5
    2d92:	41 e0       	ldi	r20, 0x01	; 1
    2d94:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
    2d98:	05 c0       	rjmp	.+10     	; 0x2da4 <BUZZER_voidBuzzer_Work+0x40>
	case BUZZER_OFF : 	DIO_voidSetPinValue(BUZZER_PORT , BUZZER_PIN , DIO_u8_LOW); break ;
    2d9a:	82 e0       	ldi	r24, 0x02	; 2
    2d9c:	65 e0       	ldi	r22, 0x05	; 5
    2d9e:	40 e0       	ldi	r20, 0x00	; 0
    2da0:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	}
}
    2da4:	0f 90       	pop	r0
    2da6:	0f 90       	pop	r0
    2da8:	0f 90       	pop	r0
    2daa:	cf 91       	pop	r28
    2dac:	df 91       	pop	r29
    2dae:	08 95       	ret

00002db0 <Robot_voidSpeed>:
/* APP */
#include "APP.h"

/****************************************************************** Speed ******************************************************************/
void Robot_voidSpeed(u8 Copy_u8SpeedIntinsty)
{
    2db0:	df 93       	push	r29
    2db2:	cf 93       	push	r28
    2db4:	0f 92       	push	r0
    2db6:	cd b7       	in	r28, 0x3d	; 61
    2db8:	de b7       	in	r29, 0x3e	; 62
    2dba:	89 83       	std	Y+1, r24	; 0x01
	/* Speed control by Timer0 and Timer2 */
	TIMER_voidTimer0GeneratePWM(Copy_u8SpeedIntinsty);
    2dbc:	89 81       	ldd	r24, Y+1	; 0x01
    2dbe:	88 2f       	mov	r24, r24
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	a0 e0       	ldi	r26, 0x00	; 0
    2dc4:	b0 e0       	ldi	r27, 0x00	; 0
    2dc6:	bc 01       	movw	r22, r24
    2dc8:	cd 01       	movw	r24, r26
    2dca:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2dce:	dc 01       	movw	r26, r24
    2dd0:	cb 01       	movw	r24, r22
    2dd2:	bc 01       	movw	r22, r24
    2dd4:	cd 01       	movw	r24, r26
    2dd6:	0e 94 cb 08 	call	0x1196	; 0x1196 <TIMER_voidTimer0GeneratePWM>
	TIMER_voidTimer2GeneratePWM(Copy_u8SpeedIntinsty);
    2dda:	89 81       	ldd	r24, Y+1	; 0x01
    2ddc:	88 2f       	mov	r24, r24
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	a0 e0       	ldi	r26, 0x00	; 0
    2de2:	b0 e0       	ldi	r27, 0x00	; 0
    2de4:	bc 01       	movw	r22, r24
    2de6:	cd 01       	movw	r24, r26
    2de8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2dec:	dc 01       	movw	r26, r24
    2dee:	cb 01       	movw	r24, r22
    2df0:	bc 01       	movw	r22, r24
    2df2:	cd 01       	movw	r24, r26
    2df4:	0e 94 0d 0a 	call	0x141a	; 0x141a <TIMER_voidTimer2GeneratePWM>
}
    2df8:	0f 90       	pop	r0
    2dfa:	cf 91       	pop	r28
    2dfc:	df 91       	pop	r29
    2dfe:	08 95       	ret

00002e00 <Robot_voidStop>:
/************************************************************* Directions ******************************************************************/
void Robot_voidStop(void)
{
    2e00:	df 93       	push	r29
    2e02:	cf 93       	push	r28
    2e04:	cd b7       	in	r28, 0x3d	; 61
    2e06:	de b7       	in	r29, 0x3e	; 62
	/* Stop motors */
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN1,DIO_u8_LOW);
    2e08:	82 e0       	ldi	r24, 0x02	; 2
    2e0a:	61 e0       	ldi	r22, 0x01	; 1
    2e0c:	40 e0       	ldi	r20, 0x00	; 0
    2e0e:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN2,DIO_u8_LOW);
    2e12:	82 e0       	ldi	r24, 0x02	; 2
    2e14:	62 e0       	ldi	r22, 0x02	; 2
    2e16:	40 e0       	ldi	r20, 0x00	; 0
    2e18:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN3,DIO_u8_LOW);
    2e1c:	82 e0       	ldi	r24, 0x02	; 2
    2e1e:	63 e0       	ldi	r22, 0x03	; 3
    2e20:	40 e0       	ldi	r20, 0x00	; 0
    2e22:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN4,DIO_u8_LOW);
    2e26:	82 e0       	ldi	r24, 0x02	; 2
    2e28:	64 e0       	ldi	r22, 0x04	; 4
    2e2a:	40 e0       	ldi	r20, 0x00	; 0
    2e2c:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
}
    2e30:	cf 91       	pop	r28
    2e32:	df 91       	pop	r29
    2e34:	08 95       	ret

00002e36 <Robot_voidForward>:
void Robot_voidForward(void)
{
    2e36:	df 93       	push	r29
    2e38:	cf 93       	push	r28
    2e3a:	cd b7       	in	r28, 0x3d	; 61
    2e3c:	de b7       	in	r29, 0x3e	; 62
	/* all motors forward */
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN1,DIO_u8_LOW);
    2e3e:	82 e0       	ldi	r24, 0x02	; 2
    2e40:	61 e0       	ldi	r22, 0x01	; 1
    2e42:	40 e0       	ldi	r20, 0x00	; 0
    2e44:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN2,DIO_u8_HIGH);
    2e48:	82 e0       	ldi	r24, 0x02	; 2
    2e4a:	62 e0       	ldi	r22, 0x02	; 2
    2e4c:	41 e0       	ldi	r20, 0x01	; 1
    2e4e:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN3,DIO_u8_LOW);
    2e52:	82 e0       	ldi	r24, 0x02	; 2
    2e54:	63 e0       	ldi	r22, 0x03	; 3
    2e56:	40 e0       	ldi	r20, 0x00	; 0
    2e58:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN4,DIO_u8_HIGH);
    2e5c:	82 e0       	ldi	r24, 0x02	; 2
    2e5e:	64 e0       	ldi	r22, 0x04	; 4
    2e60:	41 e0       	ldi	r20, 0x01	; 1
    2e62:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
}
    2e66:	cf 91       	pop	r28
    2e68:	df 91       	pop	r29
    2e6a:	08 95       	ret

00002e6c <Robot_voidBackward>:
void Robot_voidBackward(void)
{
    2e6c:	df 93       	push	r29
    2e6e:	cf 93       	push	r28
    2e70:	cd b7       	in	r28, 0x3d	; 61
    2e72:	de b7       	in	r29, 0x3e	; 62
	/* all motors Backward */
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN1,DIO_u8_HIGH);
    2e74:	82 e0       	ldi	r24, 0x02	; 2
    2e76:	61 e0       	ldi	r22, 0x01	; 1
    2e78:	41 e0       	ldi	r20, 0x01	; 1
    2e7a:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN2,DIO_u8_LOW);
    2e7e:	82 e0       	ldi	r24, 0x02	; 2
    2e80:	62 e0       	ldi	r22, 0x02	; 2
    2e82:	40 e0       	ldi	r20, 0x00	; 0
    2e84:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN3,DIO_u8_HIGH);
    2e88:	82 e0       	ldi	r24, 0x02	; 2
    2e8a:	63 e0       	ldi	r22, 0x03	; 3
    2e8c:	41 e0       	ldi	r20, 0x01	; 1
    2e8e:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN4,DIO_u8_LOW);
    2e92:	82 e0       	ldi	r24, 0x02	; 2
    2e94:	64 e0       	ldi	r22, 0x04	; 4
    2e96:	40 e0       	ldi	r20, 0x00	; 0
    2e98:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
}
    2e9c:	cf 91       	pop	r28
    2e9e:	df 91       	pop	r29
    2ea0:	08 95       	ret

00002ea2 <Robot_voidLeft>:
void Robot_voidLeft(void)
{
    2ea2:	df 93       	push	r29
    2ea4:	cf 93       	push	r28
    2ea6:	cd b7       	in	r28, 0x3d	; 61
    2ea8:	de b7       	in	r29, 0x3e	; 62
	/* Left motors forward and Right motors Backward */
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN1,DIO_u8_HIGH);
    2eaa:	82 e0       	ldi	r24, 0x02	; 2
    2eac:	61 e0       	ldi	r22, 0x01	; 1
    2eae:	41 e0       	ldi	r20, 0x01	; 1
    2eb0:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN2,DIO_u8_LOW);
    2eb4:	82 e0       	ldi	r24, 0x02	; 2
    2eb6:	62 e0       	ldi	r22, 0x02	; 2
    2eb8:	40 e0       	ldi	r20, 0x00	; 0
    2eba:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN3,DIO_u8_LOW);
    2ebe:	82 e0       	ldi	r24, 0x02	; 2
    2ec0:	63 e0       	ldi	r22, 0x03	; 3
    2ec2:	40 e0       	ldi	r20, 0x00	; 0
    2ec4:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN4,DIO_u8_HIGH);
    2ec8:	82 e0       	ldi	r24, 0x02	; 2
    2eca:	64 e0       	ldi	r22, 0x04	; 4
    2ecc:	41 e0       	ldi	r20, 0x01	; 1
    2ece:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
}
    2ed2:	cf 91       	pop	r28
    2ed4:	df 91       	pop	r29
    2ed6:	08 95       	ret

00002ed8 <Robot_voidRight>:
void Robot_voidRight(void)
{
    2ed8:	df 93       	push	r29
    2eda:	cf 93       	push	r28
    2edc:	cd b7       	in	r28, 0x3d	; 61
    2ede:	de b7       	in	r29, 0x3e	; 62
	/* Left motors Backward and Right motors forward */
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN1,DIO_u8_LOW);
    2ee0:	82 e0       	ldi	r24, 0x02	; 2
    2ee2:	61 e0       	ldi	r22, 0x01	; 1
    2ee4:	40 e0       	ldi	r20, 0x00	; 0
    2ee6:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN2,DIO_u8_HIGH);
    2eea:	82 e0       	ldi	r24, 0x02	; 2
    2eec:	62 e0       	ldi	r22, 0x02	; 2
    2eee:	41 e0       	ldi	r20, 0x01	; 1
    2ef0:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN3,DIO_u8_HIGH);
    2ef4:	82 e0       	ldi	r24, 0x02	; 2
    2ef6:	63 e0       	ldi	r22, 0x03	; 3
    2ef8:	41 e0       	ldi	r20, 0x01	; 1
    2efa:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN4,DIO_u8_LOW);
    2efe:	82 e0       	ldi	r24, 0x02	; 2
    2f00:	64 e0       	ldi	r22, 0x04	; 4
    2f02:	40 e0       	ldi	r20, 0x00	; 0
    2f04:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
}
    2f08:	cf 91       	pop	r28
    2f0a:	df 91       	pop	r29
    2f0c:	08 95       	ret

00002f0e <Robot_voidStep>:
void Robot_voidStep(void)
{
    2f0e:	df 93       	push	r29
    2f10:	cf 93       	push	r28
    2f12:	cd b7       	in	r28, 0x3d	; 61
    2f14:	de b7       	in	r29, 0x3e	; 62
    2f16:	2e 97       	sbiw	r28, 0x0e	; 14
    2f18:	0f b6       	in	r0, 0x3f	; 63
    2f1a:	f8 94       	cli
    2f1c:	de bf       	out	0x3e, r29	; 62
    2f1e:	0f be       	out	0x3f, r0	; 63
    2f20:	cd bf       	out	0x3d, r28	; 61
	/* After Stop take Step */
	Robot_voidSpeed(60);
    2f22:	8c e3       	ldi	r24, 0x3C	; 60
    2f24:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <Robot_voidSpeed>
	Robot_voidForward();
    2f28:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <Robot_voidForward>
    2f2c:	80 e0       	ldi	r24, 0x00	; 0
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	aa e2       	ldi	r26, 0x2A	; 42
    2f32:	b3 e4       	ldi	r27, 0x43	; 67
    2f34:	8b 87       	std	Y+11, r24	; 0x0b
    2f36:	9c 87       	std	Y+12, r25	; 0x0c
    2f38:	ad 87       	std	Y+13, r26	; 0x0d
    2f3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f44:	20 e0       	ldi	r18, 0x00	; 0
    2f46:	30 e0       	ldi	r19, 0x00	; 0
    2f48:	4a ef       	ldi	r20, 0xFA	; 250
    2f4a:	54 e4       	ldi	r21, 0x44	; 68
    2f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f50:	dc 01       	movw	r26, r24
    2f52:	cb 01       	movw	r24, r22
    2f54:	8f 83       	std	Y+7, r24	; 0x07
    2f56:	98 87       	std	Y+8, r25	; 0x08
    2f58:	a9 87       	std	Y+9, r26	; 0x09
    2f5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f5e:	78 85       	ldd	r23, Y+8	; 0x08
    2f60:	89 85       	ldd	r24, Y+9	; 0x09
    2f62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	40 e8       	ldi	r20, 0x80	; 128
    2f6a:	5f e3       	ldi	r21, 0x3F	; 63
    2f6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f70:	88 23       	and	r24, r24
    2f72:	2c f4       	brge	.+10     	; 0x2f7e <Robot_voidStep+0x70>
		__ticks = 1;
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	9e 83       	std	Y+6, r25	; 0x06
    2f7a:	8d 83       	std	Y+5, r24	; 0x05
    2f7c:	3f c0       	rjmp	.+126    	; 0x2ffc <Robot_voidStep+0xee>
	else if (__tmp > 65535)
    2f7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f80:	78 85       	ldd	r23, Y+8	; 0x08
    2f82:	89 85       	ldd	r24, Y+9	; 0x09
    2f84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f86:	20 e0       	ldi	r18, 0x00	; 0
    2f88:	3f ef       	ldi	r19, 0xFF	; 255
    2f8a:	4f e7       	ldi	r20, 0x7F	; 127
    2f8c:	57 e4       	ldi	r21, 0x47	; 71
    2f8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f92:	18 16       	cp	r1, r24
    2f94:	4c f5       	brge	.+82     	; 0x2fe8 <Robot_voidStep+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f96:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f98:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f9e:	20 e0       	ldi	r18, 0x00	; 0
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	40 e2       	ldi	r20, 0x20	; 32
    2fa4:	51 e4       	ldi	r21, 0x41	; 65
    2fa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2faa:	dc 01       	movw	r26, r24
    2fac:	cb 01       	movw	r24, r22
    2fae:	bc 01       	movw	r22, r24
    2fb0:	cd 01       	movw	r24, r26
    2fb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	cb 01       	movw	r24, r22
    2fba:	9e 83       	std	Y+6, r25	; 0x06
    2fbc:	8d 83       	std	Y+5, r24	; 0x05
    2fbe:	0f c0       	rjmp	.+30     	; 0x2fde <Robot_voidStep+0xd0>
    2fc0:	88 ec       	ldi	r24, 0xC8	; 200
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	9c 83       	std	Y+4, r25	; 0x04
    2fc6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fca:	9c 81       	ldd	r25, Y+4	; 0x04
    2fcc:	01 97       	sbiw	r24, 0x01	; 1
    2fce:	f1 f7       	brne	.-4      	; 0x2fcc <Robot_voidStep+0xbe>
    2fd0:	9c 83       	std	Y+4, r25	; 0x04
    2fd2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fd4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd6:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd8:	01 97       	sbiw	r24, 0x01	; 1
    2fda:	9e 83       	std	Y+6, r25	; 0x06
    2fdc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fde:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe2:	00 97       	sbiw	r24, 0x00	; 0
    2fe4:	69 f7       	brne	.-38     	; 0x2fc0 <Robot_voidStep+0xb2>
    2fe6:	14 c0       	rjmp	.+40     	; 0x3010 <Robot_voidStep+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fe8:	6f 81       	ldd	r22, Y+7	; 0x07
    2fea:	78 85       	ldd	r23, Y+8	; 0x08
    2fec:	89 85       	ldd	r24, Y+9	; 0x09
    2fee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff4:	dc 01       	movw	r26, r24
    2ff6:	cb 01       	movw	r24, r22
    2ff8:	9e 83       	std	Y+6, r25	; 0x06
    2ffa:	8d 83       	std	Y+5, r24	; 0x05
    2ffc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    3000:	9a 83       	std	Y+2, r25	; 0x02
    3002:	89 83       	std	Y+1, r24	; 0x01
    3004:	89 81       	ldd	r24, Y+1	; 0x01
    3006:	9a 81       	ldd	r25, Y+2	; 0x02
    3008:	01 97       	sbiw	r24, 0x01	; 1
    300a:	f1 f7       	brne	.-4      	; 0x3008 <Robot_voidStep+0xfa>
    300c:	9a 83       	std	Y+2, r25	; 0x02
    300e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(170);
}
    3010:	2e 96       	adiw	r28, 0x0e	; 14
    3012:	0f b6       	in	r0, 0x3f	; 63
    3014:	f8 94       	cli
    3016:	de bf       	out	0x3e, r29	; 62
    3018:	0f be       	out	0x3f, r0	; 63
    301a:	cd bf       	out	0x3d, r28	; 61
    301c:	cf 91       	pop	r28
    301e:	df 91       	pop	r29
    3020:	08 95       	ret

00003022 <Robot_voidComparisonlogic>:
 *                                                            Robot Modes                                                               *
 ****************************************************************************************************************************************/
/************************************************************ Obstacle Avoiding Mode ******************************************************/
/***************************************************************** Comparison *************************************************************/
void Robot_voidComparisonlogic(u16 Copy_u16LeftObject,u16 Copy_u16RightObject)
{
    3022:	df 93       	push	r29
    3024:	cf 93       	push	r28
    3026:	cd b7       	in	r28, 0x3d	; 61
    3028:	de b7       	in	r29, 0x3e	; 62
    302a:	ec 97       	sbiw	r28, 0x3c	; 60
    302c:	0f b6       	in	r0, 0x3f	; 63
    302e:	f8 94       	cli
    3030:	de bf       	out	0x3e, r29	; 62
    3032:	0f be       	out	0x3f, r0	; 63
    3034:	cd bf       	out	0x3d, r28	; 61
    3036:	9a af       	std	Y+58, r25	; 0x3a
    3038:	89 af       	std	Y+57, r24	; 0x39
    303a:	7c af       	std	Y+60, r23	; 0x3c
    303c:	6b af       	std	Y+59, r22	; 0x3b
	/* Comparison between to direction and set Orientation*/
	if (Copy_u16LeftObject > Copy_u16RightObject){
    303e:	29 ad       	ldd	r18, Y+57	; 0x39
    3040:	3a ad       	ldd	r19, Y+58	; 0x3a
    3042:	8b ad       	ldd	r24, Y+59	; 0x3b
    3044:	9c ad       	ldd	r25, Y+60	; 0x3c
    3046:	82 17       	cp	r24, r18
    3048:	93 07       	cpc	r25, r19
    304a:	08 f0       	brcs	.+2      	; 0x304e <Robot_voidComparisonlogic+0x2c>
    304c:	75 c0       	rjmp	.+234    	; 0x3138 <Robot_voidComparisonlogic+0x116>
		Robot_voidLeft();   // turn it on going left
    304e:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <Robot_voidLeft>
    3052:	80 e0       	ldi	r24, 0x00	; 0
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	af ea       	ldi	r26, 0xAF	; 175
    3058:	b3 e4       	ldi	r27, 0x43	; 67
    305a:	8d ab       	std	Y+53, r24	; 0x35
    305c:	9e ab       	std	Y+54, r25	; 0x36
    305e:	af ab       	std	Y+55, r26	; 0x37
    3060:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3062:	6d a9       	ldd	r22, Y+53	; 0x35
    3064:	7e a9       	ldd	r23, Y+54	; 0x36
    3066:	8f a9       	ldd	r24, Y+55	; 0x37
    3068:	98 ad       	ldd	r25, Y+56	; 0x38
    306a:	20 e0       	ldi	r18, 0x00	; 0
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	4a ef       	ldi	r20, 0xFA	; 250
    3070:	54 e4       	ldi	r21, 0x44	; 68
    3072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3076:	dc 01       	movw	r26, r24
    3078:	cb 01       	movw	r24, r22
    307a:	89 ab       	std	Y+49, r24	; 0x31
    307c:	9a ab       	std	Y+50, r25	; 0x32
    307e:	ab ab       	std	Y+51, r26	; 0x33
    3080:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3082:	69 a9       	ldd	r22, Y+49	; 0x31
    3084:	7a a9       	ldd	r23, Y+50	; 0x32
    3086:	8b a9       	ldd	r24, Y+51	; 0x33
    3088:	9c a9       	ldd	r25, Y+52	; 0x34
    308a:	20 e0       	ldi	r18, 0x00	; 0
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	40 e8       	ldi	r20, 0x80	; 128
    3090:	5f e3       	ldi	r21, 0x3F	; 63
    3092:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3096:	88 23       	and	r24, r24
    3098:	2c f4       	brge	.+10     	; 0x30a4 <Robot_voidComparisonlogic+0x82>
		__ticks = 1;
    309a:	81 e0       	ldi	r24, 0x01	; 1
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	98 ab       	std	Y+48, r25	; 0x30
    30a0:	8f a7       	std	Y+47, r24	; 0x2f
    30a2:	3f c0       	rjmp	.+126    	; 0x3122 <Robot_voidComparisonlogic+0x100>
	else if (__tmp > 65535)
    30a4:	69 a9       	ldd	r22, Y+49	; 0x31
    30a6:	7a a9       	ldd	r23, Y+50	; 0x32
    30a8:	8b a9       	ldd	r24, Y+51	; 0x33
    30aa:	9c a9       	ldd	r25, Y+52	; 0x34
    30ac:	20 e0       	ldi	r18, 0x00	; 0
    30ae:	3f ef       	ldi	r19, 0xFF	; 255
    30b0:	4f e7       	ldi	r20, 0x7F	; 127
    30b2:	57 e4       	ldi	r21, 0x47	; 71
    30b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30b8:	18 16       	cp	r1, r24
    30ba:	4c f5       	brge	.+82     	; 0x310e <Robot_voidComparisonlogic+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30bc:	6d a9       	ldd	r22, Y+53	; 0x35
    30be:	7e a9       	ldd	r23, Y+54	; 0x36
    30c0:	8f a9       	ldd	r24, Y+55	; 0x37
    30c2:	98 ad       	ldd	r25, Y+56	; 0x38
    30c4:	20 e0       	ldi	r18, 0x00	; 0
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	40 e2       	ldi	r20, 0x20	; 32
    30ca:	51 e4       	ldi	r21, 0x41	; 65
    30cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d0:	dc 01       	movw	r26, r24
    30d2:	cb 01       	movw	r24, r22
    30d4:	bc 01       	movw	r22, r24
    30d6:	cd 01       	movw	r24, r26
    30d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30dc:	dc 01       	movw	r26, r24
    30de:	cb 01       	movw	r24, r22
    30e0:	98 ab       	std	Y+48, r25	; 0x30
    30e2:	8f a7       	std	Y+47, r24	; 0x2f
    30e4:	0f c0       	rjmp	.+30     	; 0x3104 <Robot_voidComparisonlogic+0xe2>
    30e6:	88 ec       	ldi	r24, 0xC8	; 200
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	9e a7       	std	Y+46, r25	; 0x2e
    30ec:	8d a7       	std	Y+45, r24	; 0x2d
    30ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    30f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    30f2:	01 97       	sbiw	r24, 0x01	; 1
    30f4:	f1 f7       	brne	.-4      	; 0x30f2 <Robot_voidComparisonlogic+0xd0>
    30f6:	9e a7       	std	Y+46, r25	; 0x2e
    30f8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    30fc:	98 a9       	ldd	r25, Y+48	; 0x30
    30fe:	01 97       	sbiw	r24, 0x01	; 1
    3100:	98 ab       	std	Y+48, r25	; 0x30
    3102:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3104:	8f a5       	ldd	r24, Y+47	; 0x2f
    3106:	98 a9       	ldd	r25, Y+48	; 0x30
    3108:	00 97       	sbiw	r24, 0x00	; 0
    310a:	69 f7       	brne	.-38     	; 0x30e6 <Robot_voidComparisonlogic+0xc4>
    310c:	7a c1       	rjmp	.+756    	; 0x3402 <Robot_voidComparisonlogic+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    310e:	69 a9       	ldd	r22, Y+49	; 0x31
    3110:	7a a9       	ldd	r23, Y+50	; 0x32
    3112:	8b a9       	ldd	r24, Y+51	; 0x33
    3114:	9c a9       	ldd	r25, Y+52	; 0x34
    3116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    311a:	dc 01       	movw	r26, r24
    311c:	cb 01       	movw	r24, r22
    311e:	98 ab       	std	Y+48, r25	; 0x30
    3120:	8f a7       	std	Y+47, r24	; 0x2f
    3122:	8f a5       	ldd	r24, Y+47	; 0x2f
    3124:	98 a9       	ldd	r25, Y+48	; 0x30
    3126:	9c a7       	std	Y+44, r25	; 0x2c
    3128:	8b a7       	std	Y+43, r24	; 0x2b
    312a:	8b a5       	ldd	r24, Y+43	; 0x2b
    312c:	9c a5       	ldd	r25, Y+44	; 0x2c
    312e:	01 97       	sbiw	r24, 0x01	; 1
    3130:	f1 f7       	brne	.-4      	; 0x312e <Robot_voidComparisonlogic+0x10c>
    3132:	9c a7       	std	Y+44, r25	; 0x2c
    3134:	8b a7       	std	Y+43, r24	; 0x2b
    3136:	65 c1       	rjmp	.+714    	; 0x3402 <Robot_voidComparisonlogic+0x3e0>
		_delay_ms(350);
	}
	else if (Copy_u16RightObject > Copy_u16LeftObject){
    3138:	2b ad       	ldd	r18, Y+59	; 0x3b
    313a:	3c ad       	ldd	r19, Y+60	; 0x3c
    313c:	89 ad       	ldd	r24, Y+57	; 0x39
    313e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3140:	82 17       	cp	r24, r18
    3142:	93 07       	cpc	r25, r19
    3144:	08 f0       	brcs	.+2      	; 0x3148 <Robot_voidComparisonlogic+0x126>
    3146:	75 c0       	rjmp	.+234    	; 0x3232 <Robot_voidComparisonlogic+0x210>
		Robot_voidRight();  // the other right
    3148:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <Robot_voidRight>
    314c:	80 e0       	ldi	r24, 0x00	; 0
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	af ea       	ldi	r26, 0xAF	; 175
    3152:	b3 e4       	ldi	r27, 0x43	; 67
    3154:	8f a3       	std	Y+39, r24	; 0x27
    3156:	98 a7       	std	Y+40, r25	; 0x28
    3158:	a9 a7       	std	Y+41, r26	; 0x29
    315a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    315c:	6f a1       	ldd	r22, Y+39	; 0x27
    315e:	78 a5       	ldd	r23, Y+40	; 0x28
    3160:	89 a5       	ldd	r24, Y+41	; 0x29
    3162:	9a a5       	ldd	r25, Y+42	; 0x2a
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	4a ef       	ldi	r20, 0xFA	; 250
    316a:	54 e4       	ldi	r21, 0x44	; 68
    316c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3170:	dc 01       	movw	r26, r24
    3172:	cb 01       	movw	r24, r22
    3174:	8b a3       	std	Y+35, r24	; 0x23
    3176:	9c a3       	std	Y+36, r25	; 0x24
    3178:	ad a3       	std	Y+37, r26	; 0x25
    317a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    317c:	6b a1       	ldd	r22, Y+35	; 0x23
    317e:	7c a1       	ldd	r23, Y+36	; 0x24
    3180:	8d a1       	ldd	r24, Y+37	; 0x25
    3182:	9e a1       	ldd	r25, Y+38	; 0x26
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	40 e8       	ldi	r20, 0x80	; 128
    318a:	5f e3       	ldi	r21, 0x3F	; 63
    318c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3190:	88 23       	and	r24, r24
    3192:	2c f4       	brge	.+10     	; 0x319e <Robot_voidComparisonlogic+0x17c>
		__ticks = 1;
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	9a a3       	std	Y+34, r25	; 0x22
    319a:	89 a3       	std	Y+33, r24	; 0x21
    319c:	3f c0       	rjmp	.+126    	; 0x321c <Robot_voidComparisonlogic+0x1fa>
	else if (__tmp > 65535)
    319e:	6b a1       	ldd	r22, Y+35	; 0x23
    31a0:	7c a1       	ldd	r23, Y+36	; 0x24
    31a2:	8d a1       	ldd	r24, Y+37	; 0x25
    31a4:	9e a1       	ldd	r25, Y+38	; 0x26
    31a6:	20 e0       	ldi	r18, 0x00	; 0
    31a8:	3f ef       	ldi	r19, 0xFF	; 255
    31aa:	4f e7       	ldi	r20, 0x7F	; 127
    31ac:	57 e4       	ldi	r21, 0x47	; 71
    31ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31b2:	18 16       	cp	r1, r24
    31b4:	4c f5       	brge	.+82     	; 0x3208 <Robot_voidComparisonlogic+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31b6:	6f a1       	ldd	r22, Y+39	; 0x27
    31b8:	78 a5       	ldd	r23, Y+40	; 0x28
    31ba:	89 a5       	ldd	r24, Y+41	; 0x29
    31bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    31be:	20 e0       	ldi	r18, 0x00	; 0
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	40 e2       	ldi	r20, 0x20	; 32
    31c4:	51 e4       	ldi	r21, 0x41	; 65
    31c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	bc 01       	movw	r22, r24
    31d0:	cd 01       	movw	r24, r26
    31d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	9a a3       	std	Y+34, r25	; 0x22
    31dc:	89 a3       	std	Y+33, r24	; 0x21
    31de:	0f c0       	rjmp	.+30     	; 0x31fe <Robot_voidComparisonlogic+0x1dc>
    31e0:	88 ec       	ldi	r24, 0xC8	; 200
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	98 a3       	std	Y+32, r25	; 0x20
    31e6:	8f 8f       	std	Y+31, r24	; 0x1f
    31e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31ea:	98 a1       	ldd	r25, Y+32	; 0x20
    31ec:	01 97       	sbiw	r24, 0x01	; 1
    31ee:	f1 f7       	brne	.-4      	; 0x31ec <Robot_voidComparisonlogic+0x1ca>
    31f0:	98 a3       	std	Y+32, r25	; 0x20
    31f2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31f4:	89 a1       	ldd	r24, Y+33	; 0x21
    31f6:	9a a1       	ldd	r25, Y+34	; 0x22
    31f8:	01 97       	sbiw	r24, 0x01	; 1
    31fa:	9a a3       	std	Y+34, r25	; 0x22
    31fc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31fe:	89 a1       	ldd	r24, Y+33	; 0x21
    3200:	9a a1       	ldd	r25, Y+34	; 0x22
    3202:	00 97       	sbiw	r24, 0x00	; 0
    3204:	69 f7       	brne	.-38     	; 0x31e0 <Robot_voidComparisonlogic+0x1be>
    3206:	fd c0       	rjmp	.+506    	; 0x3402 <Robot_voidComparisonlogic+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3208:	6b a1       	ldd	r22, Y+35	; 0x23
    320a:	7c a1       	ldd	r23, Y+36	; 0x24
    320c:	8d a1       	ldd	r24, Y+37	; 0x25
    320e:	9e a1       	ldd	r25, Y+38	; 0x26
    3210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3214:	dc 01       	movw	r26, r24
    3216:	cb 01       	movw	r24, r22
    3218:	9a a3       	std	Y+34, r25	; 0x22
    321a:	89 a3       	std	Y+33, r24	; 0x21
    321c:	89 a1       	ldd	r24, Y+33	; 0x21
    321e:	9a a1       	ldd	r25, Y+34	; 0x22
    3220:	9e 8f       	std	Y+30, r25	; 0x1e
    3222:	8d 8f       	std	Y+29, r24	; 0x1d
    3224:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3226:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3228:	01 97       	sbiw	r24, 0x01	; 1
    322a:	f1 f7       	brne	.-4      	; 0x3228 <Robot_voidComparisonlogic+0x206>
    322c:	9e 8f       	std	Y+30, r25	; 0x1e
    322e:	8d 8f       	std	Y+29, r24	; 0x1d
    3230:	e8 c0       	rjmp	.+464    	; 0x3402 <Robot_voidComparisonlogic+0x3e0>
		_delay_ms(350);
	}
	else{
		Robot_voidBackward();  // the other way
    3232:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <Robot_voidBackward>
    3236:	80 e0       	ldi	r24, 0x00	; 0
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	a6 e9       	ldi	r26, 0x96	; 150
    323c:	b3 e4       	ldi	r27, 0x43	; 67
    323e:	89 8f       	std	Y+25, r24	; 0x19
    3240:	9a 8f       	std	Y+26, r25	; 0x1a
    3242:	ab 8f       	std	Y+27, r26	; 0x1b
    3244:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3246:	69 8d       	ldd	r22, Y+25	; 0x19
    3248:	7a 8d       	ldd	r23, Y+26	; 0x1a
    324a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    324c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	4a ef       	ldi	r20, 0xFA	; 250
    3254:	54 e4       	ldi	r21, 0x44	; 68
    3256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    325a:	dc 01       	movw	r26, r24
    325c:	cb 01       	movw	r24, r22
    325e:	8d 8b       	std	Y+21, r24	; 0x15
    3260:	9e 8b       	std	Y+22, r25	; 0x16
    3262:	af 8b       	std	Y+23, r26	; 0x17
    3264:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3266:	6d 89       	ldd	r22, Y+21	; 0x15
    3268:	7e 89       	ldd	r23, Y+22	; 0x16
    326a:	8f 89       	ldd	r24, Y+23	; 0x17
    326c:	98 8d       	ldd	r25, Y+24	; 0x18
    326e:	20 e0       	ldi	r18, 0x00	; 0
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	40 e8       	ldi	r20, 0x80	; 128
    3274:	5f e3       	ldi	r21, 0x3F	; 63
    3276:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    327a:	88 23       	and	r24, r24
    327c:	2c f4       	brge	.+10     	; 0x3288 <Robot_voidComparisonlogic+0x266>
		__ticks = 1;
    327e:	81 e0       	ldi	r24, 0x01	; 1
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	9c 8b       	std	Y+20, r25	; 0x14
    3284:	8b 8b       	std	Y+19, r24	; 0x13
    3286:	3f c0       	rjmp	.+126    	; 0x3306 <Robot_voidComparisonlogic+0x2e4>
	else if (__tmp > 65535)
    3288:	6d 89       	ldd	r22, Y+21	; 0x15
    328a:	7e 89       	ldd	r23, Y+22	; 0x16
    328c:	8f 89       	ldd	r24, Y+23	; 0x17
    328e:	98 8d       	ldd	r25, Y+24	; 0x18
    3290:	20 e0       	ldi	r18, 0x00	; 0
    3292:	3f ef       	ldi	r19, 0xFF	; 255
    3294:	4f e7       	ldi	r20, 0x7F	; 127
    3296:	57 e4       	ldi	r21, 0x47	; 71
    3298:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    329c:	18 16       	cp	r1, r24
    329e:	4c f5       	brge	.+82     	; 0x32f2 <Robot_voidComparisonlogic+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32a0:	69 8d       	ldd	r22, Y+25	; 0x19
    32a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32a8:	20 e0       	ldi	r18, 0x00	; 0
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	40 e2       	ldi	r20, 0x20	; 32
    32ae:	51 e4       	ldi	r21, 0x41	; 65
    32b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b4:	dc 01       	movw	r26, r24
    32b6:	cb 01       	movw	r24, r22
    32b8:	bc 01       	movw	r22, r24
    32ba:	cd 01       	movw	r24, r26
    32bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	9c 8b       	std	Y+20, r25	; 0x14
    32c6:	8b 8b       	std	Y+19, r24	; 0x13
    32c8:	0f c0       	rjmp	.+30     	; 0x32e8 <Robot_voidComparisonlogic+0x2c6>
    32ca:	88 ec       	ldi	r24, 0xC8	; 200
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	9a 8b       	std	Y+18, r25	; 0x12
    32d0:	89 8b       	std	Y+17, r24	; 0x11
    32d2:	89 89       	ldd	r24, Y+17	; 0x11
    32d4:	9a 89       	ldd	r25, Y+18	; 0x12
    32d6:	01 97       	sbiw	r24, 0x01	; 1
    32d8:	f1 f7       	brne	.-4      	; 0x32d6 <Robot_voidComparisonlogic+0x2b4>
    32da:	9a 8b       	std	Y+18, r25	; 0x12
    32dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32de:	8b 89       	ldd	r24, Y+19	; 0x13
    32e0:	9c 89       	ldd	r25, Y+20	; 0x14
    32e2:	01 97       	sbiw	r24, 0x01	; 1
    32e4:	9c 8b       	std	Y+20, r25	; 0x14
    32e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32e8:	8b 89       	ldd	r24, Y+19	; 0x13
    32ea:	9c 89       	ldd	r25, Y+20	; 0x14
    32ec:	00 97       	sbiw	r24, 0x00	; 0
    32ee:	69 f7       	brne	.-38     	; 0x32ca <Robot_voidComparisonlogic+0x2a8>
    32f0:	14 c0       	rjmp	.+40     	; 0x331a <Robot_voidComparisonlogic+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32f2:	6d 89       	ldd	r22, Y+21	; 0x15
    32f4:	7e 89       	ldd	r23, Y+22	; 0x16
    32f6:	8f 89       	ldd	r24, Y+23	; 0x17
    32f8:	98 8d       	ldd	r25, Y+24	; 0x18
    32fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32fe:	dc 01       	movw	r26, r24
    3300:	cb 01       	movw	r24, r22
    3302:	9c 8b       	std	Y+20, r25	; 0x14
    3304:	8b 8b       	std	Y+19, r24	; 0x13
    3306:	8b 89       	ldd	r24, Y+19	; 0x13
    3308:	9c 89       	ldd	r25, Y+20	; 0x14
    330a:	98 8b       	std	Y+16, r25	; 0x10
    330c:	8f 87       	std	Y+15, r24	; 0x0f
    330e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3310:	98 89       	ldd	r25, Y+16	; 0x10
    3312:	01 97       	sbiw	r24, 0x01	; 1
    3314:	f1 f7       	brne	.-4      	; 0x3312 <Robot_voidComparisonlogic+0x2f0>
    3316:	98 8b       	std	Y+16, r25	; 0x10
    3318:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(300);
		Robot_voidLeft();   // turn it on going left
    331a:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <Robot_voidLeft>
    331e:	80 e0       	ldi	r24, 0x00	; 0
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	aa ef       	ldi	r26, 0xFA	; 250
    3324:	b3 e4       	ldi	r27, 0x43	; 67
    3326:	8b 87       	std	Y+11, r24	; 0x0b
    3328:	9c 87       	std	Y+12, r25	; 0x0c
    332a:	ad 87       	std	Y+13, r26	; 0x0d
    332c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    332e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3330:	7c 85       	ldd	r23, Y+12	; 0x0c
    3332:	8d 85       	ldd	r24, Y+13	; 0x0d
    3334:	9e 85       	ldd	r25, Y+14	; 0x0e
    3336:	20 e0       	ldi	r18, 0x00	; 0
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	4a ef       	ldi	r20, 0xFA	; 250
    333c:	54 e4       	ldi	r21, 0x44	; 68
    333e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3342:	dc 01       	movw	r26, r24
    3344:	cb 01       	movw	r24, r22
    3346:	8f 83       	std	Y+7, r24	; 0x07
    3348:	98 87       	std	Y+8, r25	; 0x08
    334a:	a9 87       	std	Y+9, r26	; 0x09
    334c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    334e:	6f 81       	ldd	r22, Y+7	; 0x07
    3350:	78 85       	ldd	r23, Y+8	; 0x08
    3352:	89 85       	ldd	r24, Y+9	; 0x09
    3354:	9a 85       	ldd	r25, Y+10	; 0x0a
    3356:	20 e0       	ldi	r18, 0x00	; 0
    3358:	30 e0       	ldi	r19, 0x00	; 0
    335a:	40 e8       	ldi	r20, 0x80	; 128
    335c:	5f e3       	ldi	r21, 0x3F	; 63
    335e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3362:	88 23       	and	r24, r24
    3364:	2c f4       	brge	.+10     	; 0x3370 <Robot_voidComparisonlogic+0x34e>
		__ticks = 1;
    3366:	81 e0       	ldi	r24, 0x01	; 1
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	9e 83       	std	Y+6, r25	; 0x06
    336c:	8d 83       	std	Y+5, r24	; 0x05
    336e:	3f c0       	rjmp	.+126    	; 0x33ee <Robot_voidComparisonlogic+0x3cc>
	else if (__tmp > 65535)
    3370:	6f 81       	ldd	r22, Y+7	; 0x07
    3372:	78 85       	ldd	r23, Y+8	; 0x08
    3374:	89 85       	ldd	r24, Y+9	; 0x09
    3376:	9a 85       	ldd	r25, Y+10	; 0x0a
    3378:	20 e0       	ldi	r18, 0x00	; 0
    337a:	3f ef       	ldi	r19, 0xFF	; 255
    337c:	4f e7       	ldi	r20, 0x7F	; 127
    337e:	57 e4       	ldi	r21, 0x47	; 71
    3380:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3384:	18 16       	cp	r1, r24
    3386:	4c f5       	brge	.+82     	; 0x33da <Robot_voidComparisonlogic+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3388:	6b 85       	ldd	r22, Y+11	; 0x0b
    338a:	7c 85       	ldd	r23, Y+12	; 0x0c
    338c:	8d 85       	ldd	r24, Y+13	; 0x0d
    338e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3390:	20 e0       	ldi	r18, 0x00	; 0
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	40 e2       	ldi	r20, 0x20	; 32
    3396:	51 e4       	ldi	r21, 0x41	; 65
    3398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    339c:	dc 01       	movw	r26, r24
    339e:	cb 01       	movw	r24, r22
    33a0:	bc 01       	movw	r22, r24
    33a2:	cd 01       	movw	r24, r26
    33a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33a8:	dc 01       	movw	r26, r24
    33aa:	cb 01       	movw	r24, r22
    33ac:	9e 83       	std	Y+6, r25	; 0x06
    33ae:	8d 83       	std	Y+5, r24	; 0x05
    33b0:	0f c0       	rjmp	.+30     	; 0x33d0 <Robot_voidComparisonlogic+0x3ae>
    33b2:	88 ec       	ldi	r24, 0xC8	; 200
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	9c 83       	std	Y+4, r25	; 0x04
    33b8:	8b 83       	std	Y+3, r24	; 0x03
    33ba:	8b 81       	ldd	r24, Y+3	; 0x03
    33bc:	9c 81       	ldd	r25, Y+4	; 0x04
    33be:	01 97       	sbiw	r24, 0x01	; 1
    33c0:	f1 f7       	brne	.-4      	; 0x33be <Robot_voidComparisonlogic+0x39c>
    33c2:	9c 83       	std	Y+4, r25	; 0x04
    33c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33c6:	8d 81       	ldd	r24, Y+5	; 0x05
    33c8:	9e 81       	ldd	r25, Y+6	; 0x06
    33ca:	01 97       	sbiw	r24, 0x01	; 1
    33cc:	9e 83       	std	Y+6, r25	; 0x06
    33ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33d0:	8d 81       	ldd	r24, Y+5	; 0x05
    33d2:	9e 81       	ldd	r25, Y+6	; 0x06
    33d4:	00 97       	sbiw	r24, 0x00	; 0
    33d6:	69 f7       	brne	.-38     	; 0x33b2 <Robot_voidComparisonlogic+0x390>
    33d8:	14 c0       	rjmp	.+40     	; 0x3402 <Robot_voidComparisonlogic+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33da:	6f 81       	ldd	r22, Y+7	; 0x07
    33dc:	78 85       	ldd	r23, Y+8	; 0x08
    33de:	89 85       	ldd	r24, Y+9	; 0x09
    33e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33e6:	dc 01       	movw	r26, r24
    33e8:	cb 01       	movw	r24, r22
    33ea:	9e 83       	std	Y+6, r25	; 0x06
    33ec:	8d 83       	std	Y+5, r24	; 0x05
    33ee:	8d 81       	ldd	r24, Y+5	; 0x05
    33f0:	9e 81       	ldd	r25, Y+6	; 0x06
    33f2:	9a 83       	std	Y+2, r25	; 0x02
    33f4:	89 83       	std	Y+1, r24	; 0x01
    33f6:	89 81       	ldd	r24, Y+1	; 0x01
    33f8:	9a 81       	ldd	r25, Y+2	; 0x02
    33fa:	01 97       	sbiw	r24, 0x01	; 1
    33fc:	f1 f7       	brne	.-4      	; 0x33fa <Robot_voidComparisonlogic+0x3d8>
    33fe:	9a 83       	std	Y+2, r25	; 0x02
    3400:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
	}
}
    3402:	ec 96       	adiw	r28, 0x3c	; 60
    3404:	0f b6       	in	r0, 0x3f	; 63
    3406:	f8 94       	cli
    3408:	de bf       	out	0x3e, r29	; 62
    340a:	0f be       	out	0x3f, r0	; 63
    340c:	cd bf       	out	0x3d, r28	; 61
    340e:	cf 91       	pop	r28
    3410:	df 91       	pop	r29
    3412:	08 95       	ret

00003414 <Robot_voidObstacleAvoidingMode>:

void Robot_voidObstacleAvoidingMode(void)
{
    3414:	0f 93       	push	r16
    3416:	1f 93       	push	r17
    3418:	df 93       	push	r29
    341a:	cf 93       	push	r28
    341c:	cd b7       	in	r28, 0x3d	; 61
    341e:	de b7       	in	r29, 0x3e	; 62
    3420:	cc 55       	subi	r28, 0x5C	; 92
    3422:	d0 40       	sbci	r29, 0x00	; 0
    3424:	0f b6       	in	r0, 0x3f	; 63
    3426:	f8 94       	cli
    3428:	de bf       	out	0x3e, r29	; 62
    342a:	0f be       	out	0x3f, r0	; 63
    342c:	cd bf       	out	0x3d, r28	; 61
	u16 Local_u16distance_L=0, Local_u16distance_F=0, Local_u16distance_R=0;
    342e:	fe 01       	movw	r30, r28
    3430:	e5 5a       	subi	r30, 0xA5	; 165
    3432:	ff 4f       	sbci	r31, 0xFF	; 255
    3434:	11 82       	std	Z+1, r1	; 0x01
    3436:	10 82       	st	Z, r1
    3438:	fe 01       	movw	r30, r28
    343a:	e7 5a       	subi	r30, 0xA7	; 167
    343c:	ff 4f       	sbci	r31, 0xFF	; 255
    343e:	11 82       	std	Z+1, r1	; 0x01
    3440:	10 82       	st	Z, r1
    3442:	fe 01       	movw	r30, r28
    3444:	e9 5a       	subi	r30, 0xA9	; 169
    3446:	ff 4f       	sbci	r31, 0xFF	; 255
    3448:	11 82       	std	Z+1, r1	; 0x01
    344a:	10 82       	st	Z, r1
	u16 Local_u16Set = 20;
    344c:	fe 01       	movw	r30, r28
    344e:	eb 5a       	subi	r30, 0xAB	; 171
    3450:	ff 4f       	sbci	r31, 0xFF	; 255
    3452:	84 e1       	ldi	r24, 0x14	; 20
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	91 83       	std	Z+1, r25	; 0x01
    3458:	80 83       	st	Z, r24
	/* Read distance -->if no object go forward */
	Local_u16distance_F = ULTRASONIC_u16GetDistance();
    345a:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <ULTRASONIC_u16GetDistance>
    345e:	fe 01       	movw	r30, r28
    3460:	e7 5a       	subi	r30, 0xA7	; 167
    3462:	ff 4f       	sbci	r31, 0xFF	; 255
    3464:	91 83       	std	Z+1, r25	; 0x01
    3466:	80 83       	st	Z, r24
	if (Local_u16distance_F==0)
    3468:	fe 01       	movw	r30, r28
    346a:	e7 5a       	subi	r30, 0xA7	; 167
    346c:	ff 4f       	sbci	r31, 0xFF	; 255
    346e:	80 81       	ld	r24, Z
    3470:	91 81       	ldd	r25, Z+1	; 0x01
    3472:	00 97       	sbiw	r24, 0x00	; 0
    3474:	11 f4       	brne	.+4      	; 0x347a <Robot_voidObstacleAvoidingMode+0x66>
	{
		Robot_voidForward();
    3476:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <Robot_voidForward>
	}
	if (Local_u16distance_F > Local_u16Set)
    347a:	fe 01       	movw	r30, r28
    347c:	e7 5a       	subi	r30, 0xA7	; 167
    347e:	ff 4f       	sbci	r31, 0xFF	; 255
    3480:	de 01       	movw	r26, r28
    3482:	ab 5a       	subi	r26, 0xAB	; 171
    3484:	bf 4f       	sbci	r27, 0xFF	; 255
    3486:	20 81       	ld	r18, Z
    3488:	31 81       	ldd	r19, Z+1	; 0x01
    348a:	8d 91       	ld	r24, X+
    348c:	9c 91       	ld	r25, X
    348e:	11 97       	sbiw	r26, 0x01	; 1
    3490:	82 17       	cp	r24, r18
    3492:	93 07       	cpc	r25, r19
    3494:	18 f4       	brcc	.+6      	; 0x349c <Robot_voidObstacleAvoidingMode+0x88>
	{
		Robot_voidForward();
    3496:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <Robot_voidForward>
    349a:	51 c3       	rjmp	.+1698   	; 0x3b3e <Robot_voidObstacleAvoidingMode+0x72a>
	}
	else
	{
		BUZZER_voidBuzzer_Work(BUZZER_ON);
    349c:	81 e0       	ldi	r24, 0x01	; 1
    349e:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <BUZZER_voidBuzzer_Work>
    34a2:	fe 01       	movw	r30, r28
    34a4:	ef 5a       	subi	r30, 0xAF	; 175
    34a6:	ff 4f       	sbci	r31, 0xFF	; 255
    34a8:	80 e0       	ldi	r24, 0x00	; 0
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	a8 e4       	ldi	r26, 0x48	; 72
    34ae:	b3 e4       	ldi	r27, 0x43	; 67
    34b0:	80 83       	st	Z, r24
    34b2:	91 83       	std	Z+1, r25	; 0x01
    34b4:	a2 83       	std	Z+2, r26	; 0x02
    34b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34b8:	8e 01       	movw	r16, r28
    34ba:	03 5b       	subi	r16, 0xB3	; 179
    34bc:	1f 4f       	sbci	r17, 0xFF	; 255
    34be:	fe 01       	movw	r30, r28
    34c0:	ef 5a       	subi	r30, 0xAF	; 175
    34c2:	ff 4f       	sbci	r31, 0xFF	; 255
    34c4:	60 81       	ld	r22, Z
    34c6:	71 81       	ldd	r23, Z+1	; 0x01
    34c8:	82 81       	ldd	r24, Z+2	; 0x02
    34ca:	93 81       	ldd	r25, Z+3	; 0x03
    34cc:	20 e0       	ldi	r18, 0x00	; 0
    34ce:	30 e0       	ldi	r19, 0x00	; 0
    34d0:	4a ef       	ldi	r20, 0xFA	; 250
    34d2:	54 e4       	ldi	r21, 0x44	; 68
    34d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d8:	dc 01       	movw	r26, r24
    34da:	cb 01       	movw	r24, r22
    34dc:	f8 01       	movw	r30, r16
    34de:	80 83       	st	Z, r24
    34e0:	91 83       	std	Z+1, r25	; 0x01
    34e2:	a2 83       	std	Z+2, r26	; 0x02
    34e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34e6:	fe 01       	movw	r30, r28
    34e8:	e3 5b       	subi	r30, 0xB3	; 179
    34ea:	ff 4f       	sbci	r31, 0xFF	; 255
    34ec:	60 81       	ld	r22, Z
    34ee:	71 81       	ldd	r23, Z+1	; 0x01
    34f0:	82 81       	ldd	r24, Z+2	; 0x02
    34f2:	93 81       	ldd	r25, Z+3	; 0x03
    34f4:	20 e0       	ldi	r18, 0x00	; 0
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	40 e8       	ldi	r20, 0x80	; 128
    34fa:	5f e3       	ldi	r21, 0x3F	; 63
    34fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3500:	88 23       	and	r24, r24
    3502:	44 f4       	brge	.+16     	; 0x3514 <Robot_voidObstacleAvoidingMode+0x100>
		__ticks = 1;
    3504:	fe 01       	movw	r30, r28
    3506:	e5 5b       	subi	r30, 0xB5	; 181
    3508:	ff 4f       	sbci	r31, 0xFF	; 255
    350a:	81 e0       	ldi	r24, 0x01	; 1
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	91 83       	std	Z+1, r25	; 0x01
    3510:	80 83       	st	Z, r24
    3512:	64 c0       	rjmp	.+200    	; 0x35dc <Robot_voidObstacleAvoidingMode+0x1c8>
	else if (__tmp > 65535)
    3514:	fe 01       	movw	r30, r28
    3516:	e3 5b       	subi	r30, 0xB3	; 179
    3518:	ff 4f       	sbci	r31, 0xFF	; 255
    351a:	60 81       	ld	r22, Z
    351c:	71 81       	ldd	r23, Z+1	; 0x01
    351e:	82 81       	ldd	r24, Z+2	; 0x02
    3520:	93 81       	ldd	r25, Z+3	; 0x03
    3522:	20 e0       	ldi	r18, 0x00	; 0
    3524:	3f ef       	ldi	r19, 0xFF	; 255
    3526:	4f e7       	ldi	r20, 0x7F	; 127
    3528:	57 e4       	ldi	r21, 0x47	; 71
    352a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    352e:	18 16       	cp	r1, r24
    3530:	0c f0       	brlt	.+2      	; 0x3534 <Robot_voidObstacleAvoidingMode+0x120>
    3532:	43 c0       	rjmp	.+134    	; 0x35ba <Robot_voidObstacleAvoidingMode+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3534:	fe 01       	movw	r30, r28
    3536:	ef 5a       	subi	r30, 0xAF	; 175
    3538:	ff 4f       	sbci	r31, 0xFF	; 255
    353a:	60 81       	ld	r22, Z
    353c:	71 81       	ldd	r23, Z+1	; 0x01
    353e:	82 81       	ldd	r24, Z+2	; 0x02
    3540:	93 81       	ldd	r25, Z+3	; 0x03
    3542:	20 e0       	ldi	r18, 0x00	; 0
    3544:	30 e0       	ldi	r19, 0x00	; 0
    3546:	40 e2       	ldi	r20, 0x20	; 32
    3548:	51 e4       	ldi	r21, 0x41	; 65
    354a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    354e:	dc 01       	movw	r26, r24
    3550:	cb 01       	movw	r24, r22
    3552:	8e 01       	movw	r16, r28
    3554:	05 5b       	subi	r16, 0xB5	; 181
    3556:	1f 4f       	sbci	r17, 0xFF	; 255
    3558:	bc 01       	movw	r22, r24
    355a:	cd 01       	movw	r24, r26
    355c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3560:	dc 01       	movw	r26, r24
    3562:	cb 01       	movw	r24, r22
    3564:	f8 01       	movw	r30, r16
    3566:	91 83       	std	Z+1, r25	; 0x01
    3568:	80 83       	st	Z, r24
    356a:	1f c0       	rjmp	.+62     	; 0x35aa <Robot_voidObstacleAvoidingMode+0x196>
    356c:	fe 01       	movw	r30, r28
    356e:	e7 5b       	subi	r30, 0xB7	; 183
    3570:	ff 4f       	sbci	r31, 0xFF	; 255
    3572:	88 ec       	ldi	r24, 0xC8	; 200
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	91 83       	std	Z+1, r25	; 0x01
    3578:	80 83       	st	Z, r24
    357a:	fe 01       	movw	r30, r28
    357c:	e7 5b       	subi	r30, 0xB7	; 183
    357e:	ff 4f       	sbci	r31, 0xFF	; 255
    3580:	80 81       	ld	r24, Z
    3582:	91 81       	ldd	r25, Z+1	; 0x01
    3584:	01 97       	sbiw	r24, 0x01	; 1
    3586:	f1 f7       	brne	.-4      	; 0x3584 <Robot_voidObstacleAvoidingMode+0x170>
    3588:	fe 01       	movw	r30, r28
    358a:	e7 5b       	subi	r30, 0xB7	; 183
    358c:	ff 4f       	sbci	r31, 0xFF	; 255
    358e:	91 83       	std	Z+1, r25	; 0x01
    3590:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3592:	de 01       	movw	r26, r28
    3594:	a5 5b       	subi	r26, 0xB5	; 181
    3596:	bf 4f       	sbci	r27, 0xFF	; 255
    3598:	fe 01       	movw	r30, r28
    359a:	e5 5b       	subi	r30, 0xB5	; 181
    359c:	ff 4f       	sbci	r31, 0xFF	; 255
    359e:	80 81       	ld	r24, Z
    35a0:	91 81       	ldd	r25, Z+1	; 0x01
    35a2:	01 97       	sbiw	r24, 0x01	; 1
    35a4:	11 96       	adiw	r26, 0x01	; 1
    35a6:	9c 93       	st	X, r25
    35a8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35aa:	fe 01       	movw	r30, r28
    35ac:	e5 5b       	subi	r30, 0xB5	; 181
    35ae:	ff 4f       	sbci	r31, 0xFF	; 255
    35b0:	80 81       	ld	r24, Z
    35b2:	91 81       	ldd	r25, Z+1	; 0x01
    35b4:	00 97       	sbiw	r24, 0x00	; 0
    35b6:	d1 f6       	brne	.-76     	; 0x356c <Robot_voidObstacleAvoidingMode+0x158>
    35b8:	27 c0       	rjmp	.+78     	; 0x3608 <Robot_voidObstacleAvoidingMode+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ba:	8e 01       	movw	r16, r28
    35bc:	05 5b       	subi	r16, 0xB5	; 181
    35be:	1f 4f       	sbci	r17, 0xFF	; 255
    35c0:	fe 01       	movw	r30, r28
    35c2:	e3 5b       	subi	r30, 0xB3	; 179
    35c4:	ff 4f       	sbci	r31, 0xFF	; 255
    35c6:	60 81       	ld	r22, Z
    35c8:	71 81       	ldd	r23, Z+1	; 0x01
    35ca:	82 81       	ldd	r24, Z+2	; 0x02
    35cc:	93 81       	ldd	r25, Z+3	; 0x03
    35ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35d2:	dc 01       	movw	r26, r24
    35d4:	cb 01       	movw	r24, r22
    35d6:	f8 01       	movw	r30, r16
    35d8:	91 83       	std	Z+1, r25	; 0x01
    35da:	80 83       	st	Z, r24
    35dc:	de 01       	movw	r26, r28
    35de:	a9 5b       	subi	r26, 0xB9	; 185
    35e0:	bf 4f       	sbci	r27, 0xFF	; 255
    35e2:	fe 01       	movw	r30, r28
    35e4:	e5 5b       	subi	r30, 0xB5	; 181
    35e6:	ff 4f       	sbci	r31, 0xFF	; 255
    35e8:	80 81       	ld	r24, Z
    35ea:	91 81       	ldd	r25, Z+1	; 0x01
    35ec:	8d 93       	st	X+, r24
    35ee:	9c 93       	st	X, r25
    35f0:	fe 01       	movw	r30, r28
    35f2:	e9 5b       	subi	r30, 0xB9	; 185
    35f4:	ff 4f       	sbci	r31, 0xFF	; 255
    35f6:	80 81       	ld	r24, Z
    35f8:	91 81       	ldd	r25, Z+1	; 0x01
    35fa:	01 97       	sbiw	r24, 0x01	; 1
    35fc:	f1 f7       	brne	.-4      	; 0x35fa <Robot_voidObstacleAvoidingMode+0x1e6>
    35fe:	fe 01       	movw	r30, r28
    3600:	e9 5b       	subi	r30, 0xB9	; 185
    3602:	ff 4f       	sbci	r31, 0xFF	; 255
    3604:	91 83       	std	Z+1, r25	; 0x01
    3606:	80 83       	st	Z, r24
		_delay_ms(200);
		BUZZER_voidBuzzer_Work(BUZZER_OFF);
    3608:	80 e0       	ldi	r24, 0x00	; 0
    360a:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <BUZZER_voidBuzzer_Work>
		Robot_voidStop();
    360e:	0e 94 00 17 	call	0x2e00	; 0x2e00 <Robot_voidStop>

		SERVO_voidTimer1ServoSetAngleOCR1B(0);
    3612:	60 e0       	ldi	r22, 0x00	; 0
    3614:	70 e0       	ldi	r23, 0x00	; 0
    3616:	80 e0       	ldi	r24, 0x00	; 0
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <SERVO_voidTimer1ServoSetAngleOCR1B>
    361e:	fe 01       	movw	r30, r28
    3620:	ed 5b       	subi	r30, 0xBD	; 189
    3622:	ff 4f       	sbci	r31, 0xFF	; 255
    3624:	80 e0       	ldi	r24, 0x00	; 0
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	a6 e9       	ldi	r26, 0x96	; 150
    362a:	b3 e4       	ldi	r27, 0x43	; 67
    362c:	80 83       	st	Z, r24
    362e:	91 83       	std	Z+1, r25	; 0x01
    3630:	a2 83       	std	Z+2, r26	; 0x02
    3632:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3634:	8e 01       	movw	r16, r28
    3636:	01 5c       	subi	r16, 0xC1	; 193
    3638:	1f 4f       	sbci	r17, 0xFF	; 255
    363a:	fe 01       	movw	r30, r28
    363c:	ed 5b       	subi	r30, 0xBD	; 189
    363e:	ff 4f       	sbci	r31, 0xFF	; 255
    3640:	60 81       	ld	r22, Z
    3642:	71 81       	ldd	r23, Z+1	; 0x01
    3644:	82 81       	ldd	r24, Z+2	; 0x02
    3646:	93 81       	ldd	r25, Z+3	; 0x03
    3648:	20 e0       	ldi	r18, 0x00	; 0
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	4a ef       	ldi	r20, 0xFA	; 250
    364e:	54 e4       	ldi	r21, 0x44	; 68
    3650:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3654:	dc 01       	movw	r26, r24
    3656:	cb 01       	movw	r24, r22
    3658:	f8 01       	movw	r30, r16
    365a:	80 83       	st	Z, r24
    365c:	91 83       	std	Z+1, r25	; 0x01
    365e:	a2 83       	std	Z+2, r26	; 0x02
    3660:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3662:	fe 01       	movw	r30, r28
    3664:	ff 96       	adiw	r30, 0x3f	; 63
    3666:	60 81       	ld	r22, Z
    3668:	71 81       	ldd	r23, Z+1	; 0x01
    366a:	82 81       	ldd	r24, Z+2	; 0x02
    366c:	93 81       	ldd	r25, Z+3	; 0x03
    366e:	20 e0       	ldi	r18, 0x00	; 0
    3670:	30 e0       	ldi	r19, 0x00	; 0
    3672:	40 e8       	ldi	r20, 0x80	; 128
    3674:	5f e3       	ldi	r21, 0x3F	; 63
    3676:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    367a:	88 23       	and	r24, r24
    367c:	2c f4       	brge	.+10     	; 0x3688 <Robot_voidObstacleAvoidingMode+0x274>
		__ticks = 1;
    367e:	81 e0       	ldi	r24, 0x01	; 1
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	9e af       	std	Y+62, r25	; 0x3e
    3684:	8d af       	std	Y+61, r24	; 0x3d
    3686:	46 c0       	rjmp	.+140    	; 0x3714 <Robot_voidObstacleAvoidingMode+0x300>
	else if (__tmp > 65535)
    3688:	fe 01       	movw	r30, r28
    368a:	ff 96       	adiw	r30, 0x3f	; 63
    368c:	60 81       	ld	r22, Z
    368e:	71 81       	ldd	r23, Z+1	; 0x01
    3690:	82 81       	ldd	r24, Z+2	; 0x02
    3692:	93 81       	ldd	r25, Z+3	; 0x03
    3694:	20 e0       	ldi	r18, 0x00	; 0
    3696:	3f ef       	ldi	r19, 0xFF	; 255
    3698:	4f e7       	ldi	r20, 0x7F	; 127
    369a:	57 e4       	ldi	r21, 0x47	; 71
    369c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36a0:	18 16       	cp	r1, r24
    36a2:	64 f5       	brge	.+88     	; 0x36fc <Robot_voidObstacleAvoidingMode+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36a4:	fe 01       	movw	r30, r28
    36a6:	ed 5b       	subi	r30, 0xBD	; 189
    36a8:	ff 4f       	sbci	r31, 0xFF	; 255
    36aa:	60 81       	ld	r22, Z
    36ac:	71 81       	ldd	r23, Z+1	; 0x01
    36ae:	82 81       	ldd	r24, Z+2	; 0x02
    36b0:	93 81       	ldd	r25, Z+3	; 0x03
    36b2:	20 e0       	ldi	r18, 0x00	; 0
    36b4:	30 e0       	ldi	r19, 0x00	; 0
    36b6:	40 e2       	ldi	r20, 0x20	; 32
    36b8:	51 e4       	ldi	r21, 0x41	; 65
    36ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36be:	dc 01       	movw	r26, r24
    36c0:	cb 01       	movw	r24, r22
    36c2:	bc 01       	movw	r22, r24
    36c4:	cd 01       	movw	r24, r26
    36c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ca:	dc 01       	movw	r26, r24
    36cc:	cb 01       	movw	r24, r22
    36ce:	9e af       	std	Y+62, r25	; 0x3e
    36d0:	8d af       	std	Y+61, r24	; 0x3d
    36d2:	0f c0       	rjmp	.+30     	; 0x36f2 <Robot_voidObstacleAvoidingMode+0x2de>
    36d4:	88 ec       	ldi	r24, 0xC8	; 200
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	9c af       	std	Y+60, r25	; 0x3c
    36da:	8b af       	std	Y+59, r24	; 0x3b
    36dc:	8b ad       	ldd	r24, Y+59	; 0x3b
    36de:	9c ad       	ldd	r25, Y+60	; 0x3c
    36e0:	01 97       	sbiw	r24, 0x01	; 1
    36e2:	f1 f7       	brne	.-4      	; 0x36e0 <Robot_voidObstacleAvoidingMode+0x2cc>
    36e4:	9c af       	std	Y+60, r25	; 0x3c
    36e6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    36ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    36ec:	01 97       	sbiw	r24, 0x01	; 1
    36ee:	9e af       	std	Y+62, r25	; 0x3e
    36f0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    36f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    36f6:	00 97       	sbiw	r24, 0x00	; 0
    36f8:	69 f7       	brne	.-38     	; 0x36d4 <Robot_voidObstacleAvoidingMode+0x2c0>
    36fa:	16 c0       	rjmp	.+44     	; 0x3728 <Robot_voidObstacleAvoidingMode+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36fc:	fe 01       	movw	r30, r28
    36fe:	ff 96       	adiw	r30, 0x3f	; 63
    3700:	60 81       	ld	r22, Z
    3702:	71 81       	ldd	r23, Z+1	; 0x01
    3704:	82 81       	ldd	r24, Z+2	; 0x02
    3706:	93 81       	ldd	r25, Z+3	; 0x03
    3708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    370c:	dc 01       	movw	r26, r24
    370e:	cb 01       	movw	r24, r22
    3710:	9e af       	std	Y+62, r25	; 0x3e
    3712:	8d af       	std	Y+61, r24	; 0x3d
    3714:	8d ad       	ldd	r24, Y+61	; 0x3d
    3716:	9e ad       	ldd	r25, Y+62	; 0x3e
    3718:	9a af       	std	Y+58, r25	; 0x3a
    371a:	89 af       	std	Y+57, r24	; 0x39
    371c:	89 ad       	ldd	r24, Y+57	; 0x39
    371e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3720:	01 97       	sbiw	r24, 0x01	; 1
    3722:	f1 f7       	brne	.-4      	; 0x3720 <Robot_voidObstacleAvoidingMode+0x30c>
    3724:	9a af       	std	Y+58, r25	; 0x3a
    3726:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(300);
		Local_u16distance_R = ULTRASONIC_u16GetDistance();
    3728:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <ULTRASONIC_u16GetDistance>
    372c:	fe 01       	movw	r30, r28
    372e:	e9 5a       	subi	r30, 0xA9	; 169
    3730:	ff 4f       	sbci	r31, 0xFF	; 255
    3732:	91 83       	std	Z+1, r25	; 0x01
    3734:	80 83       	st	Z, r24
		if (Local_u16distance_R==0)
    3736:	fe 01       	movw	r30, r28
    3738:	e9 5a       	subi	r30, 0xA9	; 169
    373a:	ff 4f       	sbci	r31, 0xFF	; 255
    373c:	80 81       	ld	r24, Z
    373e:	91 81       	ldd	r25, Z+1	; 0x01
    3740:	00 97       	sbiw	r24, 0x00	; 0
    3742:	39 f4       	brne	.+14     	; 0x3752 <Robot_voidObstacleAvoidingMode+0x33e>
		{
			Local_u16distance_R=100;
    3744:	fe 01       	movw	r30, r28
    3746:	e9 5a       	subi	r30, 0xA9	; 169
    3748:	ff 4f       	sbci	r31, 0xFF	; 255
    374a:	84 e6       	ldi	r24, 0x64	; 100
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	91 83       	std	Z+1, r25	; 0x01
    3750:	80 83       	st	Z, r24
    3752:	80 e0       	ldi	r24, 0x00	; 0
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	a8 ec       	ldi	r26, 0xC8	; 200
    3758:	b2 e4       	ldi	r27, 0x42	; 66
    375a:	8d ab       	std	Y+53, r24	; 0x35
    375c:	9e ab       	std	Y+54, r25	; 0x36
    375e:	af ab       	std	Y+55, r26	; 0x37
    3760:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3762:	6d a9       	ldd	r22, Y+53	; 0x35
    3764:	7e a9       	ldd	r23, Y+54	; 0x36
    3766:	8f a9       	ldd	r24, Y+55	; 0x37
    3768:	98 ad       	ldd	r25, Y+56	; 0x38
    376a:	20 e0       	ldi	r18, 0x00	; 0
    376c:	30 e0       	ldi	r19, 0x00	; 0
    376e:	4a ef       	ldi	r20, 0xFA	; 250
    3770:	54 e4       	ldi	r21, 0x44	; 68
    3772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3776:	dc 01       	movw	r26, r24
    3778:	cb 01       	movw	r24, r22
    377a:	89 ab       	std	Y+49, r24	; 0x31
    377c:	9a ab       	std	Y+50, r25	; 0x32
    377e:	ab ab       	std	Y+51, r26	; 0x33
    3780:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3782:	69 a9       	ldd	r22, Y+49	; 0x31
    3784:	7a a9       	ldd	r23, Y+50	; 0x32
    3786:	8b a9       	ldd	r24, Y+51	; 0x33
    3788:	9c a9       	ldd	r25, Y+52	; 0x34
    378a:	20 e0       	ldi	r18, 0x00	; 0
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	40 e8       	ldi	r20, 0x80	; 128
    3790:	5f e3       	ldi	r21, 0x3F	; 63
    3792:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3796:	88 23       	and	r24, r24
    3798:	2c f4       	brge	.+10     	; 0x37a4 <Robot_voidObstacleAvoidingMode+0x390>
		__ticks = 1;
    379a:	81 e0       	ldi	r24, 0x01	; 1
    379c:	90 e0       	ldi	r25, 0x00	; 0
    379e:	98 ab       	std	Y+48, r25	; 0x30
    37a0:	8f a7       	std	Y+47, r24	; 0x2f
    37a2:	3f c0       	rjmp	.+126    	; 0x3822 <Robot_voidObstacleAvoidingMode+0x40e>
	else if (__tmp > 65535)
    37a4:	69 a9       	ldd	r22, Y+49	; 0x31
    37a6:	7a a9       	ldd	r23, Y+50	; 0x32
    37a8:	8b a9       	ldd	r24, Y+51	; 0x33
    37aa:	9c a9       	ldd	r25, Y+52	; 0x34
    37ac:	20 e0       	ldi	r18, 0x00	; 0
    37ae:	3f ef       	ldi	r19, 0xFF	; 255
    37b0:	4f e7       	ldi	r20, 0x7F	; 127
    37b2:	57 e4       	ldi	r21, 0x47	; 71
    37b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37b8:	18 16       	cp	r1, r24
    37ba:	4c f5       	brge	.+82     	; 0x380e <Robot_voidObstacleAvoidingMode+0x3fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37bc:	6d a9       	ldd	r22, Y+53	; 0x35
    37be:	7e a9       	ldd	r23, Y+54	; 0x36
    37c0:	8f a9       	ldd	r24, Y+55	; 0x37
    37c2:	98 ad       	ldd	r25, Y+56	; 0x38
    37c4:	20 e0       	ldi	r18, 0x00	; 0
    37c6:	30 e0       	ldi	r19, 0x00	; 0
    37c8:	40 e2       	ldi	r20, 0x20	; 32
    37ca:	51 e4       	ldi	r21, 0x41	; 65
    37cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d0:	dc 01       	movw	r26, r24
    37d2:	cb 01       	movw	r24, r22
    37d4:	bc 01       	movw	r22, r24
    37d6:	cd 01       	movw	r24, r26
    37d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37dc:	dc 01       	movw	r26, r24
    37de:	cb 01       	movw	r24, r22
    37e0:	98 ab       	std	Y+48, r25	; 0x30
    37e2:	8f a7       	std	Y+47, r24	; 0x2f
    37e4:	0f c0       	rjmp	.+30     	; 0x3804 <Robot_voidObstacleAvoidingMode+0x3f0>
    37e6:	88 ec       	ldi	r24, 0xC8	; 200
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	9e a7       	std	Y+46, r25	; 0x2e
    37ec:	8d a7       	std	Y+45, r24	; 0x2d
    37ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    37f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    37f2:	01 97       	sbiw	r24, 0x01	; 1
    37f4:	f1 f7       	brne	.-4      	; 0x37f2 <Robot_voidObstacleAvoidingMode+0x3de>
    37f6:	9e a7       	std	Y+46, r25	; 0x2e
    37f8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    37fc:	98 a9       	ldd	r25, Y+48	; 0x30
    37fe:	01 97       	sbiw	r24, 0x01	; 1
    3800:	98 ab       	std	Y+48, r25	; 0x30
    3802:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3804:	8f a5       	ldd	r24, Y+47	; 0x2f
    3806:	98 a9       	ldd	r25, Y+48	; 0x30
    3808:	00 97       	sbiw	r24, 0x00	; 0
    380a:	69 f7       	brne	.-38     	; 0x37e6 <Robot_voidObstacleAvoidingMode+0x3d2>
    380c:	14 c0       	rjmp	.+40     	; 0x3836 <Robot_voidObstacleAvoidingMode+0x422>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    380e:	69 a9       	ldd	r22, Y+49	; 0x31
    3810:	7a a9       	ldd	r23, Y+50	; 0x32
    3812:	8b a9       	ldd	r24, Y+51	; 0x33
    3814:	9c a9       	ldd	r25, Y+52	; 0x34
    3816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    381a:	dc 01       	movw	r26, r24
    381c:	cb 01       	movw	r24, r22
    381e:	98 ab       	std	Y+48, r25	; 0x30
    3820:	8f a7       	std	Y+47, r24	; 0x2f
    3822:	8f a5       	ldd	r24, Y+47	; 0x2f
    3824:	98 a9       	ldd	r25, Y+48	; 0x30
    3826:	9c a7       	std	Y+44, r25	; 0x2c
    3828:	8b a7       	std	Y+43, r24	; 0x2b
    382a:	8b a5       	ldd	r24, Y+43	; 0x2b
    382c:	9c a5       	ldd	r25, Y+44	; 0x2c
    382e:	01 97       	sbiw	r24, 0x01	; 1
    3830:	f1 f7       	brne	.-4      	; 0x382e <Robot_voidObstacleAvoidingMode+0x41a>
    3832:	9c a7       	std	Y+44, r25	; 0x2c
    3834:	8b a7       	std	Y+43, r24	; 0x2b
		}
		_delay_ms(100);
		SERVO_voidTimer1ServoSetAngleOCR1B(170);
    3836:	6a ea       	ldi	r22, 0xAA	; 170
    3838:	70 e0       	ldi	r23, 0x00	; 0
    383a:	80 e0       	ldi	r24, 0x00	; 0
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <SERVO_voidTimer1ServoSetAngleOCR1B>
    3842:	80 e0       	ldi	r24, 0x00	; 0
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	aa ef       	ldi	r26, 0xFA	; 250
    3848:	b3 e4       	ldi	r27, 0x43	; 67
    384a:	8f a3       	std	Y+39, r24	; 0x27
    384c:	98 a7       	std	Y+40, r25	; 0x28
    384e:	a9 a7       	std	Y+41, r26	; 0x29
    3850:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3852:	6f a1       	ldd	r22, Y+39	; 0x27
    3854:	78 a5       	ldd	r23, Y+40	; 0x28
    3856:	89 a5       	ldd	r24, Y+41	; 0x29
    3858:	9a a5       	ldd	r25, Y+42	; 0x2a
    385a:	20 e0       	ldi	r18, 0x00	; 0
    385c:	30 e0       	ldi	r19, 0x00	; 0
    385e:	4a ef       	ldi	r20, 0xFA	; 250
    3860:	54 e4       	ldi	r21, 0x44	; 68
    3862:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3866:	dc 01       	movw	r26, r24
    3868:	cb 01       	movw	r24, r22
    386a:	8b a3       	std	Y+35, r24	; 0x23
    386c:	9c a3       	std	Y+36, r25	; 0x24
    386e:	ad a3       	std	Y+37, r26	; 0x25
    3870:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3872:	6b a1       	ldd	r22, Y+35	; 0x23
    3874:	7c a1       	ldd	r23, Y+36	; 0x24
    3876:	8d a1       	ldd	r24, Y+37	; 0x25
    3878:	9e a1       	ldd	r25, Y+38	; 0x26
    387a:	20 e0       	ldi	r18, 0x00	; 0
    387c:	30 e0       	ldi	r19, 0x00	; 0
    387e:	40 e8       	ldi	r20, 0x80	; 128
    3880:	5f e3       	ldi	r21, 0x3F	; 63
    3882:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3886:	88 23       	and	r24, r24
    3888:	2c f4       	brge	.+10     	; 0x3894 <Robot_voidObstacleAvoidingMode+0x480>
		__ticks = 1;
    388a:	81 e0       	ldi	r24, 0x01	; 1
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	9a a3       	std	Y+34, r25	; 0x22
    3890:	89 a3       	std	Y+33, r24	; 0x21
    3892:	3f c0       	rjmp	.+126    	; 0x3912 <Robot_voidObstacleAvoidingMode+0x4fe>
	else if (__tmp > 65535)
    3894:	6b a1       	ldd	r22, Y+35	; 0x23
    3896:	7c a1       	ldd	r23, Y+36	; 0x24
    3898:	8d a1       	ldd	r24, Y+37	; 0x25
    389a:	9e a1       	ldd	r25, Y+38	; 0x26
    389c:	20 e0       	ldi	r18, 0x00	; 0
    389e:	3f ef       	ldi	r19, 0xFF	; 255
    38a0:	4f e7       	ldi	r20, 0x7F	; 127
    38a2:	57 e4       	ldi	r21, 0x47	; 71
    38a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38a8:	18 16       	cp	r1, r24
    38aa:	4c f5       	brge	.+82     	; 0x38fe <Robot_voidObstacleAvoidingMode+0x4ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ac:	6f a1       	ldd	r22, Y+39	; 0x27
    38ae:	78 a5       	ldd	r23, Y+40	; 0x28
    38b0:	89 a5       	ldd	r24, Y+41	; 0x29
    38b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    38b4:	20 e0       	ldi	r18, 0x00	; 0
    38b6:	30 e0       	ldi	r19, 0x00	; 0
    38b8:	40 e2       	ldi	r20, 0x20	; 32
    38ba:	51 e4       	ldi	r21, 0x41	; 65
    38bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c0:	dc 01       	movw	r26, r24
    38c2:	cb 01       	movw	r24, r22
    38c4:	bc 01       	movw	r22, r24
    38c6:	cd 01       	movw	r24, r26
    38c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38cc:	dc 01       	movw	r26, r24
    38ce:	cb 01       	movw	r24, r22
    38d0:	9a a3       	std	Y+34, r25	; 0x22
    38d2:	89 a3       	std	Y+33, r24	; 0x21
    38d4:	0f c0       	rjmp	.+30     	; 0x38f4 <Robot_voidObstacleAvoidingMode+0x4e0>
    38d6:	88 ec       	ldi	r24, 0xC8	; 200
    38d8:	90 e0       	ldi	r25, 0x00	; 0
    38da:	98 a3       	std	Y+32, r25	; 0x20
    38dc:	8f 8f       	std	Y+31, r24	; 0x1f
    38de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38e0:	98 a1       	ldd	r25, Y+32	; 0x20
    38e2:	01 97       	sbiw	r24, 0x01	; 1
    38e4:	f1 f7       	brne	.-4      	; 0x38e2 <Robot_voidObstacleAvoidingMode+0x4ce>
    38e6:	98 a3       	std	Y+32, r25	; 0x20
    38e8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ea:	89 a1       	ldd	r24, Y+33	; 0x21
    38ec:	9a a1       	ldd	r25, Y+34	; 0x22
    38ee:	01 97       	sbiw	r24, 0x01	; 1
    38f0:	9a a3       	std	Y+34, r25	; 0x22
    38f2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38f4:	89 a1       	ldd	r24, Y+33	; 0x21
    38f6:	9a a1       	ldd	r25, Y+34	; 0x22
    38f8:	00 97       	sbiw	r24, 0x00	; 0
    38fa:	69 f7       	brne	.-38     	; 0x38d6 <Robot_voidObstacleAvoidingMode+0x4c2>
    38fc:	14 c0       	rjmp	.+40     	; 0x3926 <Robot_voidObstacleAvoidingMode+0x512>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38fe:	6b a1       	ldd	r22, Y+35	; 0x23
    3900:	7c a1       	ldd	r23, Y+36	; 0x24
    3902:	8d a1       	ldd	r24, Y+37	; 0x25
    3904:	9e a1       	ldd	r25, Y+38	; 0x26
    3906:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    390a:	dc 01       	movw	r26, r24
    390c:	cb 01       	movw	r24, r22
    390e:	9a a3       	std	Y+34, r25	; 0x22
    3910:	89 a3       	std	Y+33, r24	; 0x21
    3912:	89 a1       	ldd	r24, Y+33	; 0x21
    3914:	9a a1       	ldd	r25, Y+34	; 0x22
    3916:	9e 8f       	std	Y+30, r25	; 0x1e
    3918:	8d 8f       	std	Y+29, r24	; 0x1d
    391a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    391c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    391e:	01 97       	sbiw	r24, 0x01	; 1
    3920:	f1 f7       	brne	.-4      	; 0x391e <Robot_voidObstacleAvoidingMode+0x50a>
    3922:	9e 8f       	std	Y+30, r25	; 0x1e
    3924:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500);
		Local_u16distance_L = ULTRASONIC_u16GetDistance();
    3926:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <ULTRASONIC_u16GetDistance>
    392a:	fe 01       	movw	r30, r28
    392c:	e5 5a       	subi	r30, 0xA5	; 165
    392e:	ff 4f       	sbci	r31, 0xFF	; 255
    3930:	91 83       	std	Z+1, r25	; 0x01
    3932:	80 83       	st	Z, r24
		if (Local_u16distance_L==0)
    3934:	fe 01       	movw	r30, r28
    3936:	e5 5a       	subi	r30, 0xA5	; 165
    3938:	ff 4f       	sbci	r31, 0xFF	; 255
    393a:	80 81       	ld	r24, Z
    393c:	91 81       	ldd	r25, Z+1	; 0x01
    393e:	00 97       	sbiw	r24, 0x00	; 0
    3940:	39 f4       	brne	.+14     	; 0x3950 <Robot_voidObstacleAvoidingMode+0x53c>
		{
			Local_u16distance_L=100;
    3942:	fe 01       	movw	r30, r28
    3944:	e5 5a       	subi	r30, 0xA5	; 165
    3946:	ff 4f       	sbci	r31, 0xFF	; 255
    3948:	84 e6       	ldi	r24, 0x64	; 100
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	91 83       	std	Z+1, r25	; 0x01
    394e:	80 83       	st	Z, r24
    3950:	80 e0       	ldi	r24, 0x00	; 0
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	a8 ec       	ldi	r26, 0xC8	; 200
    3956:	b2 e4       	ldi	r27, 0x42	; 66
    3958:	89 8f       	std	Y+25, r24	; 0x19
    395a:	9a 8f       	std	Y+26, r25	; 0x1a
    395c:	ab 8f       	std	Y+27, r26	; 0x1b
    395e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3960:	69 8d       	ldd	r22, Y+25	; 0x19
    3962:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3964:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3966:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3968:	20 e0       	ldi	r18, 0x00	; 0
    396a:	30 e0       	ldi	r19, 0x00	; 0
    396c:	4a ef       	ldi	r20, 0xFA	; 250
    396e:	54 e4       	ldi	r21, 0x44	; 68
    3970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3974:	dc 01       	movw	r26, r24
    3976:	cb 01       	movw	r24, r22
    3978:	8d 8b       	std	Y+21, r24	; 0x15
    397a:	9e 8b       	std	Y+22, r25	; 0x16
    397c:	af 8b       	std	Y+23, r26	; 0x17
    397e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3980:	6d 89       	ldd	r22, Y+21	; 0x15
    3982:	7e 89       	ldd	r23, Y+22	; 0x16
    3984:	8f 89       	ldd	r24, Y+23	; 0x17
    3986:	98 8d       	ldd	r25, Y+24	; 0x18
    3988:	20 e0       	ldi	r18, 0x00	; 0
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	40 e8       	ldi	r20, 0x80	; 128
    398e:	5f e3       	ldi	r21, 0x3F	; 63
    3990:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3994:	88 23       	and	r24, r24
    3996:	2c f4       	brge	.+10     	; 0x39a2 <Robot_voidObstacleAvoidingMode+0x58e>
		__ticks = 1;
    3998:	81 e0       	ldi	r24, 0x01	; 1
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	9c 8b       	std	Y+20, r25	; 0x14
    399e:	8b 8b       	std	Y+19, r24	; 0x13
    39a0:	3f c0       	rjmp	.+126    	; 0x3a20 <Robot_voidObstacleAvoidingMode+0x60c>
	else if (__tmp > 65535)
    39a2:	6d 89       	ldd	r22, Y+21	; 0x15
    39a4:	7e 89       	ldd	r23, Y+22	; 0x16
    39a6:	8f 89       	ldd	r24, Y+23	; 0x17
    39a8:	98 8d       	ldd	r25, Y+24	; 0x18
    39aa:	20 e0       	ldi	r18, 0x00	; 0
    39ac:	3f ef       	ldi	r19, 0xFF	; 255
    39ae:	4f e7       	ldi	r20, 0x7F	; 127
    39b0:	57 e4       	ldi	r21, 0x47	; 71
    39b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39b6:	18 16       	cp	r1, r24
    39b8:	4c f5       	brge	.+82     	; 0x3a0c <Robot_voidObstacleAvoidingMode+0x5f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39ba:	69 8d       	ldd	r22, Y+25	; 0x19
    39bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39c2:	20 e0       	ldi	r18, 0x00	; 0
    39c4:	30 e0       	ldi	r19, 0x00	; 0
    39c6:	40 e2       	ldi	r20, 0x20	; 32
    39c8:	51 e4       	ldi	r21, 0x41	; 65
    39ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ce:	dc 01       	movw	r26, r24
    39d0:	cb 01       	movw	r24, r22
    39d2:	bc 01       	movw	r22, r24
    39d4:	cd 01       	movw	r24, r26
    39d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39da:	dc 01       	movw	r26, r24
    39dc:	cb 01       	movw	r24, r22
    39de:	9c 8b       	std	Y+20, r25	; 0x14
    39e0:	8b 8b       	std	Y+19, r24	; 0x13
    39e2:	0f c0       	rjmp	.+30     	; 0x3a02 <Robot_voidObstacleAvoidingMode+0x5ee>
    39e4:	88 ec       	ldi	r24, 0xC8	; 200
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	9a 8b       	std	Y+18, r25	; 0x12
    39ea:	89 8b       	std	Y+17, r24	; 0x11
    39ec:	89 89       	ldd	r24, Y+17	; 0x11
    39ee:	9a 89       	ldd	r25, Y+18	; 0x12
    39f0:	01 97       	sbiw	r24, 0x01	; 1
    39f2:	f1 f7       	brne	.-4      	; 0x39f0 <Robot_voidObstacleAvoidingMode+0x5dc>
    39f4:	9a 8b       	std	Y+18, r25	; 0x12
    39f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39f8:	8b 89       	ldd	r24, Y+19	; 0x13
    39fa:	9c 89       	ldd	r25, Y+20	; 0x14
    39fc:	01 97       	sbiw	r24, 0x01	; 1
    39fe:	9c 8b       	std	Y+20, r25	; 0x14
    3a00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a02:	8b 89       	ldd	r24, Y+19	; 0x13
    3a04:	9c 89       	ldd	r25, Y+20	; 0x14
    3a06:	00 97       	sbiw	r24, 0x00	; 0
    3a08:	69 f7       	brne	.-38     	; 0x39e4 <Robot_voidObstacleAvoidingMode+0x5d0>
    3a0a:	14 c0       	rjmp	.+40     	; 0x3a34 <Robot_voidObstacleAvoidingMode+0x620>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a0c:	6d 89       	ldd	r22, Y+21	; 0x15
    3a0e:	7e 89       	ldd	r23, Y+22	; 0x16
    3a10:	8f 89       	ldd	r24, Y+23	; 0x17
    3a12:	98 8d       	ldd	r25, Y+24	; 0x18
    3a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a18:	dc 01       	movw	r26, r24
    3a1a:	cb 01       	movw	r24, r22
    3a1c:	9c 8b       	std	Y+20, r25	; 0x14
    3a1e:	8b 8b       	std	Y+19, r24	; 0x13
    3a20:	8b 89       	ldd	r24, Y+19	; 0x13
    3a22:	9c 89       	ldd	r25, Y+20	; 0x14
    3a24:	98 8b       	std	Y+16, r25	; 0x10
    3a26:	8f 87       	std	Y+15, r24	; 0x0f
    3a28:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a2a:	98 89       	ldd	r25, Y+16	; 0x10
    3a2c:	01 97       	sbiw	r24, 0x01	; 1
    3a2e:	f1 f7       	brne	.-4      	; 0x3a2c <Robot_voidObstacleAvoidingMode+0x618>
    3a30:	98 8b       	std	Y+16, r25	; 0x10
    3a32:	8f 87       	std	Y+15, r24	; 0x0f
		}
		_delay_ms(100);
		SERVO_voidTimer1ServoSetAngleOCR1B(90);
    3a34:	6a e5       	ldi	r22, 0x5A	; 90
    3a36:	70 e0       	ldi	r23, 0x00	; 0
    3a38:	80 e0       	ldi	r24, 0x00	; 0
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <SERVO_voidTimer1ServoSetAngleOCR1B>
    3a40:	80 e0       	ldi	r24, 0x00	; 0
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	a6 e9       	ldi	r26, 0x96	; 150
    3a46:	b3 e4       	ldi	r27, 0x43	; 67
    3a48:	8b 87       	std	Y+11, r24	; 0x0b
    3a4a:	9c 87       	std	Y+12, r25	; 0x0c
    3a4c:	ad 87       	std	Y+13, r26	; 0x0d
    3a4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a50:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a52:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a54:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a56:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a58:	20 e0       	ldi	r18, 0x00	; 0
    3a5a:	30 e0       	ldi	r19, 0x00	; 0
    3a5c:	4a ef       	ldi	r20, 0xFA	; 250
    3a5e:	54 e4       	ldi	r21, 0x44	; 68
    3a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a64:	dc 01       	movw	r26, r24
    3a66:	cb 01       	movw	r24, r22
    3a68:	8f 83       	std	Y+7, r24	; 0x07
    3a6a:	98 87       	std	Y+8, r25	; 0x08
    3a6c:	a9 87       	std	Y+9, r26	; 0x09
    3a6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a70:	6f 81       	ldd	r22, Y+7	; 0x07
    3a72:	78 85       	ldd	r23, Y+8	; 0x08
    3a74:	89 85       	ldd	r24, Y+9	; 0x09
    3a76:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a78:	20 e0       	ldi	r18, 0x00	; 0
    3a7a:	30 e0       	ldi	r19, 0x00	; 0
    3a7c:	40 e8       	ldi	r20, 0x80	; 128
    3a7e:	5f e3       	ldi	r21, 0x3F	; 63
    3a80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a84:	88 23       	and	r24, r24
    3a86:	2c f4       	brge	.+10     	; 0x3a92 <Robot_voidObstacleAvoidingMode+0x67e>
		__ticks = 1;
    3a88:	81 e0       	ldi	r24, 0x01	; 1
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
    3a8c:	9e 83       	std	Y+6, r25	; 0x06
    3a8e:	8d 83       	std	Y+5, r24	; 0x05
    3a90:	3f c0       	rjmp	.+126    	; 0x3b10 <Robot_voidObstacleAvoidingMode+0x6fc>
	else if (__tmp > 65535)
    3a92:	6f 81       	ldd	r22, Y+7	; 0x07
    3a94:	78 85       	ldd	r23, Y+8	; 0x08
    3a96:	89 85       	ldd	r24, Y+9	; 0x09
    3a98:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a9a:	20 e0       	ldi	r18, 0x00	; 0
    3a9c:	3f ef       	ldi	r19, 0xFF	; 255
    3a9e:	4f e7       	ldi	r20, 0x7F	; 127
    3aa0:	57 e4       	ldi	r21, 0x47	; 71
    3aa2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3aa6:	18 16       	cp	r1, r24
    3aa8:	4c f5       	brge	.+82     	; 0x3afc <Robot_voidObstacleAvoidingMode+0x6e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aaa:	6b 85       	ldd	r22, Y+11	; 0x0b
    3aac:	7c 85       	ldd	r23, Y+12	; 0x0c
    3aae:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ab0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ab2:	20 e0       	ldi	r18, 0x00	; 0
    3ab4:	30 e0       	ldi	r19, 0x00	; 0
    3ab6:	40 e2       	ldi	r20, 0x20	; 32
    3ab8:	51 e4       	ldi	r21, 0x41	; 65
    3aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3abe:	dc 01       	movw	r26, r24
    3ac0:	cb 01       	movw	r24, r22
    3ac2:	bc 01       	movw	r22, r24
    3ac4:	cd 01       	movw	r24, r26
    3ac6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aca:	dc 01       	movw	r26, r24
    3acc:	cb 01       	movw	r24, r22
    3ace:	9e 83       	std	Y+6, r25	; 0x06
    3ad0:	8d 83       	std	Y+5, r24	; 0x05
    3ad2:	0f c0       	rjmp	.+30     	; 0x3af2 <Robot_voidObstacleAvoidingMode+0x6de>
    3ad4:	88 ec       	ldi	r24, 0xC8	; 200
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
    3ad8:	9c 83       	std	Y+4, r25	; 0x04
    3ada:	8b 83       	std	Y+3, r24	; 0x03
    3adc:	8b 81       	ldd	r24, Y+3	; 0x03
    3ade:	9c 81       	ldd	r25, Y+4	; 0x04
    3ae0:	01 97       	sbiw	r24, 0x01	; 1
    3ae2:	f1 f7       	brne	.-4      	; 0x3ae0 <Robot_voidObstacleAvoidingMode+0x6cc>
    3ae4:	9c 83       	std	Y+4, r25	; 0x04
    3ae6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    3aea:	9e 81       	ldd	r25, Y+6	; 0x06
    3aec:	01 97       	sbiw	r24, 0x01	; 1
    3aee:	9e 83       	std	Y+6, r25	; 0x06
    3af0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3af2:	8d 81       	ldd	r24, Y+5	; 0x05
    3af4:	9e 81       	ldd	r25, Y+6	; 0x06
    3af6:	00 97       	sbiw	r24, 0x00	; 0
    3af8:	69 f7       	brne	.-38     	; 0x3ad4 <Robot_voidObstacleAvoidingMode+0x6c0>
    3afa:	14 c0       	rjmp	.+40     	; 0x3b24 <Robot_voidObstacleAvoidingMode+0x710>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3afc:	6f 81       	ldd	r22, Y+7	; 0x07
    3afe:	78 85       	ldd	r23, Y+8	; 0x08
    3b00:	89 85       	ldd	r24, Y+9	; 0x09
    3b02:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b08:	dc 01       	movw	r26, r24
    3b0a:	cb 01       	movw	r24, r22
    3b0c:	9e 83       	std	Y+6, r25	; 0x06
    3b0e:	8d 83       	std	Y+5, r24	; 0x05
    3b10:	8d 81       	ldd	r24, Y+5	; 0x05
    3b12:	9e 81       	ldd	r25, Y+6	; 0x06
    3b14:	9a 83       	std	Y+2, r25	; 0x02
    3b16:	89 83       	std	Y+1, r24	; 0x01
    3b18:	89 81       	ldd	r24, Y+1	; 0x01
    3b1a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b1c:	01 97       	sbiw	r24, 0x01	; 1
    3b1e:	f1 f7       	brne	.-4      	; 0x3b1c <Robot_voidObstacleAvoidingMode+0x708>
    3b20:	9a 83       	std	Y+2, r25	; 0x02
    3b22:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(300);
		Robot_voidComparisonlogic(Local_u16distance_L, Local_u16distance_R);
    3b24:	fe 01       	movw	r30, r28
    3b26:	e5 5a       	subi	r30, 0xA5	; 165
    3b28:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2a:	80 81       	ld	r24, Z
    3b2c:	91 81       	ldd	r25, Z+1	; 0x01
    3b2e:	fe 01       	movw	r30, r28
    3b30:	e9 5a       	subi	r30, 0xA9	; 169
    3b32:	ff 4f       	sbci	r31, 0xFF	; 255
    3b34:	20 81       	ld	r18, Z
    3b36:	31 81       	ldd	r19, Z+1	; 0x01
    3b38:	b9 01       	movw	r22, r18
    3b3a:	0e 94 11 18 	call	0x3022	; 0x3022 <Robot_voidComparisonlogic>

	}
}
    3b3e:	c4 5a       	subi	r28, 0xA4	; 164
    3b40:	df 4f       	sbci	r29, 0xFF	; 255
    3b42:	0f b6       	in	r0, 0x3f	; 63
    3b44:	f8 94       	cli
    3b46:	de bf       	out	0x3e, r29	; 62
    3b48:	0f be       	out	0x3f, r0	; 63
    3b4a:	cd bf       	out	0x3d, r28	; 61
    3b4c:	cf 91       	pop	r28
    3b4e:	df 91       	pop	r29
    3b50:	1f 91       	pop	r17
    3b52:	0f 91       	pop	r16
    3b54:	08 95       	ret

00003b56 <Robot_voidBluetoothRCMode>:

/************************************************************ RC Mode ******************************************************/
void Robot_voidBluetoothRCMode(void)
{
    3b56:	df 93       	push	r29
    3b58:	cf 93       	push	r28
    3b5a:	cd b7       	in	r28, 0x3d	; 61
    3b5c:	de b7       	in	r29, 0x3e	; 62
    3b5e:	61 97       	sbiw	r28, 0x11	; 17
    3b60:	0f b6       	in	r0, 0x3f	; 63
    3b62:	f8 94       	cli
    3b64:	de bf       	out	0x3e, r29	; 62
    3b66:	0f be       	out	0x3f, r0	; 63
    3b68:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Data = 0;
    3b6a:	1f 86       	std	Y+15, r1	; 0x0f
	Local_u8Data= UART_u8GetCharBlocking();
    3b6c:	0e 94 3c 08 	call	0x1078	; 0x1078 <UART_u8GetCharBlocking>
    3b70:	8f 87       	std	Y+15, r24	; 0x0f
	switch (Local_u8Data) {
    3b72:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b74:	28 2f       	mov	r18, r24
    3b76:	30 e0       	ldi	r19, 0x00	; 0
    3b78:	39 8b       	std	Y+17, r19	; 0x11
    3b7a:	28 8b       	std	Y+16, r18	; 0x10
    3b7c:	88 89       	ldd	r24, Y+16	; 0x10
    3b7e:	99 89       	ldd	r25, Y+17	; 0x11
    3b80:	8c 34       	cpi	r24, 0x4C	; 76
    3b82:	91 05       	cpc	r25, r1
    3b84:	09 f4       	brne	.+2      	; 0x3b88 <Robot_voidBluetoothRCMode+0x32>
    3b86:	a3 c0       	rjmp	.+326    	; 0x3cce <Robot_voidBluetoothRCMode+0x178>
    3b88:	28 89       	ldd	r18, Y+16	; 0x10
    3b8a:	39 89       	ldd	r19, Y+17	; 0x11
    3b8c:	2d 34       	cpi	r18, 0x4D	; 77
    3b8e:	31 05       	cpc	r19, r1
    3b90:	5c f4       	brge	.+22     	; 0x3ba8 <Robot_voidBluetoothRCMode+0x52>
    3b92:	88 89       	ldd	r24, Y+16	; 0x10
    3b94:	99 89       	ldd	r25, Y+17	; 0x11
    3b96:	82 34       	cpi	r24, 0x42	; 66
    3b98:	91 05       	cpc	r25, r1
    3b9a:	d1 f0       	breq	.+52     	; 0x3bd0 <Robot_voidBluetoothRCMode+0x7a>
    3b9c:	28 89       	ldd	r18, Y+16	; 0x10
    3b9e:	39 89       	ldd	r19, Y+17	; 0x11
    3ba0:	26 34       	cpi	r18, 0x46	; 70
    3ba2:	31 05       	cpc	r19, r1
    3ba4:	71 f0       	breq	.+28     	; 0x3bc2 <Robot_voidBluetoothRCMode+0x6c>
    3ba6:	a7 c0       	rjmp	.+334    	; 0x3cf6 <Robot_voidBluetoothRCMode+0x1a0>
    3ba8:	88 89       	ldd	r24, Y+16	; 0x10
    3baa:	99 89       	ldd	r25, Y+17	; 0x11
    3bac:	82 35       	cpi	r24, 0x52	; 82
    3bae:	91 05       	cpc	r25, r1
    3bb0:	09 f4       	brne	.+2      	; 0x3bb4 <Robot_voidBluetoothRCMode+0x5e>
    3bb2:	94 c0       	rjmp	.+296    	; 0x3cdc <Robot_voidBluetoothRCMode+0x186>
    3bb4:	28 89       	ldd	r18, Y+16	; 0x10
    3bb6:	39 89       	ldd	r19, Y+17	; 0x11
    3bb8:	23 35       	cpi	r18, 0x53	; 83
    3bba:	31 05       	cpc	r19, r1
    3bbc:	09 f4       	brne	.+2      	; 0x3bc0 <Robot_voidBluetoothRCMode+0x6a>
    3bbe:	95 c0       	rjmp	.+298    	; 0x3cea <Robot_voidBluetoothRCMode+0x194>
    3bc0:	9a c0       	rjmp	.+308    	; 0x3cf6 <Robot_voidBluetoothRCMode+0x1a0>
	case 'F':
		SevSeg_voidDisplay(DIO_u8_PORTA, 0);
    3bc2:	80 e0       	ldi	r24, 0x00	; 0
    3bc4:	60 e0       	ldi	r22, 0x00	; 0
    3bc6:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <SevSeg_voidDisplay>
		Robot_voidForward();
    3bca:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <Robot_voidForward>
    3bce:	93 c0       	rjmp	.+294    	; 0x3cf6 <Robot_voidBluetoothRCMode+0x1a0>
		break;
	case 'B':
		SevSeg_voidDisplay(DIO_u8_PORTA, 1);
    3bd0:	80 e0       	ldi	r24, 0x00	; 0
    3bd2:	61 e0       	ldi	r22, 0x01	; 1
    3bd4:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <SevSeg_voidDisplay>
		BUZZER_voidBuzzer_Work(BUZZER_ON);
    3bd8:	81 e0       	ldi	r24, 0x01	; 1
    3bda:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <BUZZER_voidBuzzer_Work>
    3bde:	80 e0       	ldi	r24, 0x00	; 0
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	a8 e4       	ldi	r26, 0x48	; 72
    3be4:	b3 e4       	ldi	r27, 0x43	; 67
    3be6:	8b 87       	std	Y+11, r24	; 0x0b
    3be8:	9c 87       	std	Y+12, r25	; 0x0c
    3bea:	ad 87       	std	Y+13, r26	; 0x0d
    3bec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bee:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bf6:	20 e0       	ldi	r18, 0x00	; 0
    3bf8:	30 e0       	ldi	r19, 0x00	; 0
    3bfa:	4a ef       	ldi	r20, 0xFA	; 250
    3bfc:	54 e4       	ldi	r21, 0x44	; 68
    3bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c02:	dc 01       	movw	r26, r24
    3c04:	cb 01       	movw	r24, r22
    3c06:	8f 83       	std	Y+7, r24	; 0x07
    3c08:	98 87       	std	Y+8, r25	; 0x08
    3c0a:	a9 87       	std	Y+9, r26	; 0x09
    3c0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c0e:	6f 81       	ldd	r22, Y+7	; 0x07
    3c10:	78 85       	ldd	r23, Y+8	; 0x08
    3c12:	89 85       	ldd	r24, Y+9	; 0x09
    3c14:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c16:	20 e0       	ldi	r18, 0x00	; 0
    3c18:	30 e0       	ldi	r19, 0x00	; 0
    3c1a:	40 e8       	ldi	r20, 0x80	; 128
    3c1c:	5f e3       	ldi	r21, 0x3F	; 63
    3c1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c22:	88 23       	and	r24, r24
    3c24:	2c f4       	brge	.+10     	; 0x3c30 <Robot_voidBluetoothRCMode+0xda>
		__ticks = 1;
    3c26:	81 e0       	ldi	r24, 0x01	; 1
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	9e 83       	std	Y+6, r25	; 0x06
    3c2c:	8d 83       	std	Y+5, r24	; 0x05
    3c2e:	3f c0       	rjmp	.+126    	; 0x3cae <Robot_voidBluetoothRCMode+0x158>
	else if (__tmp > 65535)
    3c30:	6f 81       	ldd	r22, Y+7	; 0x07
    3c32:	78 85       	ldd	r23, Y+8	; 0x08
    3c34:	89 85       	ldd	r24, Y+9	; 0x09
    3c36:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c38:	20 e0       	ldi	r18, 0x00	; 0
    3c3a:	3f ef       	ldi	r19, 0xFF	; 255
    3c3c:	4f e7       	ldi	r20, 0x7F	; 127
    3c3e:	57 e4       	ldi	r21, 0x47	; 71
    3c40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c44:	18 16       	cp	r1, r24
    3c46:	4c f5       	brge	.+82     	; 0x3c9a <Robot_voidBluetoothRCMode+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c48:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c50:	20 e0       	ldi	r18, 0x00	; 0
    3c52:	30 e0       	ldi	r19, 0x00	; 0
    3c54:	40 e2       	ldi	r20, 0x20	; 32
    3c56:	51 e4       	ldi	r21, 0x41	; 65
    3c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c5c:	dc 01       	movw	r26, r24
    3c5e:	cb 01       	movw	r24, r22
    3c60:	bc 01       	movw	r22, r24
    3c62:	cd 01       	movw	r24, r26
    3c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c68:	dc 01       	movw	r26, r24
    3c6a:	cb 01       	movw	r24, r22
    3c6c:	9e 83       	std	Y+6, r25	; 0x06
    3c6e:	8d 83       	std	Y+5, r24	; 0x05
    3c70:	0f c0       	rjmp	.+30     	; 0x3c90 <Robot_voidBluetoothRCMode+0x13a>
    3c72:	88 ec       	ldi	r24, 0xC8	; 200
    3c74:	90 e0       	ldi	r25, 0x00	; 0
    3c76:	9c 83       	std	Y+4, r25	; 0x04
    3c78:	8b 83       	std	Y+3, r24	; 0x03
    3c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c7e:	01 97       	sbiw	r24, 0x01	; 1
    3c80:	f1 f7       	brne	.-4      	; 0x3c7e <Robot_voidBluetoothRCMode+0x128>
    3c82:	9c 83       	std	Y+4, r25	; 0x04
    3c84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c86:	8d 81       	ldd	r24, Y+5	; 0x05
    3c88:	9e 81       	ldd	r25, Y+6	; 0x06
    3c8a:	01 97       	sbiw	r24, 0x01	; 1
    3c8c:	9e 83       	std	Y+6, r25	; 0x06
    3c8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c90:	8d 81       	ldd	r24, Y+5	; 0x05
    3c92:	9e 81       	ldd	r25, Y+6	; 0x06
    3c94:	00 97       	sbiw	r24, 0x00	; 0
    3c96:	69 f7       	brne	.-38     	; 0x3c72 <Robot_voidBluetoothRCMode+0x11c>
    3c98:	14 c0       	rjmp	.+40     	; 0x3cc2 <Robot_voidBluetoothRCMode+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c9a:	6f 81       	ldd	r22, Y+7	; 0x07
    3c9c:	78 85       	ldd	r23, Y+8	; 0x08
    3c9e:	89 85       	ldd	r24, Y+9	; 0x09
    3ca0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ca6:	dc 01       	movw	r26, r24
    3ca8:	cb 01       	movw	r24, r22
    3caa:	9e 83       	std	Y+6, r25	; 0x06
    3cac:	8d 83       	std	Y+5, r24	; 0x05
    3cae:	8d 81       	ldd	r24, Y+5	; 0x05
    3cb0:	9e 81       	ldd	r25, Y+6	; 0x06
    3cb2:	9a 83       	std	Y+2, r25	; 0x02
    3cb4:	89 83       	std	Y+1, r24	; 0x01
    3cb6:	89 81       	ldd	r24, Y+1	; 0x01
    3cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    3cba:	01 97       	sbiw	r24, 0x01	; 1
    3cbc:	f1 f7       	brne	.-4      	; 0x3cba <Robot_voidBluetoothRCMode+0x164>
    3cbe:	9a 83       	std	Y+2, r25	; 0x02
    3cc0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
		BUZZER_voidBuzzer_Work(BUZZER_OFF);
    3cc2:	80 e0       	ldi	r24, 0x00	; 0
    3cc4:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <BUZZER_voidBuzzer_Work>
		Robot_voidBackward();
    3cc8:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <Robot_voidBackward>
    3ccc:	14 c0       	rjmp	.+40     	; 0x3cf6 <Robot_voidBluetoothRCMode+0x1a0>
		break;
	case 'L':
		SevSeg_voidDisplay(DIO_u8_PORTA, 3);
    3cce:	80 e0       	ldi	r24, 0x00	; 0
    3cd0:	63 e0       	ldi	r22, 0x03	; 3
    3cd2:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <SevSeg_voidDisplay>
		Robot_voidLeft();
    3cd6:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <Robot_voidLeft>
    3cda:	0d c0       	rjmp	.+26     	; 0x3cf6 <Robot_voidBluetoothRCMode+0x1a0>
		break;
	case 'R':
		SevSeg_voidDisplay(DIO_u8_PORTA, 2);
    3cdc:	80 e0       	ldi	r24, 0x00	; 0
    3cde:	62 e0       	ldi	r22, 0x02	; 2
    3ce0:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <SevSeg_voidDisplay>
		Robot_voidRight();
    3ce4:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <Robot_voidRight>
    3ce8:	06 c0       	rjmp	.+12     	; 0x3cf6 <Robot_voidBluetoothRCMode+0x1a0>
		break;
	case 'S':
		SevSeg_voidDisplay(DIO_u8_PORTA, 4);
    3cea:	80 e0       	ldi	r24, 0x00	; 0
    3cec:	64 e0       	ldi	r22, 0x04	; 4
    3cee:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <SevSeg_voidDisplay>
		Robot_voidStop();
    3cf2:	0e 94 00 17 	call	0x2e00	; 0x2e00 <Robot_voidStop>
		break;
	default:
		break;
	}
}
    3cf6:	61 96       	adiw	r28, 0x11	; 17
    3cf8:	0f b6       	in	r0, 0x3f	; 63
    3cfa:	f8 94       	cli
    3cfc:	de bf       	out	0x3e, r29	; 62
    3cfe:	0f be       	out	0x3f, r0	; 63
    3d00:	cd bf       	out	0x3d, r28	; 61
    3d02:	cf 91       	pop	r28
    3d04:	df 91       	pop	r29
    3d06:	08 95       	ret

00003d08 <Robot_voidInit>:
/*********************************************************** Initialization ****************************************************************/
void Robot_voidInit(void)
{
    3d08:	df 93       	push	r29
    3d0a:	cf 93       	push	r28
    3d0c:	cd b7       	in	r28, 0x3d	; 61
    3d0e:	de b7       	in	r29, 0x3e	; 62
	/***************************** INIT Mode Switch ****************************/
	DIO_voidSetPinDirection(DIO_u8_PORTB , DIO_u8_PIN0 , DIO_u8_PIN_INPUT);
    3d10:	81 e0       	ldi	r24, 0x01	; 1
    3d12:	60 e0       	ldi	r22, 0x00	; 0
    3d14:	40 e0       	ldi	r20, 0x00	; 0
    3d16:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(DIO_u8_PORTB , DIO_u8_PIN0 , DIO_u8_HIGH);
    3d1a:	81 e0       	ldi	r24, 0x01	; 1
    3d1c:	60 e0       	ldi	r22, 0x00	; 0
    3d1e:	41 e0       	ldi	r20, 0x01	; 1
    3d20:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	/************************** Init UART *************************************/
	UART_voidInit();
    3d24:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_voidInit>
	DIO_voidSetPinDirection(DIO_u8_PORTD,DIO_u8_PIN0,DIO_u8_PIN_INPUT);
    3d28:	83 e0       	ldi	r24, 0x03	; 3
    3d2a:	60 e0       	ldi	r22, 0x00	; 0
    3d2c:	40 e0       	ldi	r20, 0x00	; 0
    3d2e:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTD,DIO_u8_PIN1,DIO_u8_PIN_OUTPUT);
    3d32:	83 e0       	ldi	r24, 0x03	; 3
    3d34:	61 e0       	ldi	r22, 0x01	; 1
    3d36:	41 e0       	ldi	r20, 0x01	; 1
    3d38:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DIO_voidSetPinDirection>
	/************************** Init Timer ************************************/
	TIMER_voidTimer0Init();
    3d3c:	0e 94 71 08 	call	0x10e2	; 0x10e2 <TIMER_voidTimer0Init>
	DIO_voidSetPinDirection(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_PIN_OUTPUT);
    3d40:	81 e0       	ldi	r24, 0x01	; 1
    3d42:	63 e0       	ldi	r22, 0x03	; 3
    3d44:	41 e0       	ldi	r20, 0x01	; 1
    3d46:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DIO_voidSetPinDirection>
	TIMER_voidTimer2Init();
    3d4a:	0e 94 b3 09 	call	0x1366	; 0x1366 <TIMER_voidTimer2Init>
	DIO_voidSetPinDirection(DIO_u8_PORTD,DIO_u8_PIN7,DIO_u8_PIN_OUTPUT);
    3d4e:	83 e0       	ldi	r24, 0x03	; 3
    3d50:	67 e0       	ldi	r22, 0x07	; 7
    3d52:	41 e0       	ldi	r20, 0x01	; 1
    3d54:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DIO_voidSetPinDirection>
	/**************************** Init Servo **********************************/
	SERVO_voidTimer1InitOCR1B();
    3d58:	0e 94 23 16 	call	0x2c46	; 0x2c46 <SERVO_voidTimer1InitOCR1B>
	SERVO_voidTimer1ServoSetAngleOCR1B(90);
    3d5c:	6a e5       	ldi	r22, 0x5A	; 90
    3d5e:	70 e0       	ldi	r23, 0x00	; 0
    3d60:	80 e0       	ldi	r24, 0x00	; 0
    3d62:	90 e0       	ldi	r25, 0x00	; 0
    3d64:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <SERVO_voidTimer1ServoSetAngleOCR1B>
	/**************************** Init ULTRASONIC *****************************/
	ULTRASONIC_voidInit();
    3d68:	0e 94 b7 14 	call	0x296e	; 0x296e <ULTRASONIC_voidInit>
	/***************************** INIT SPEAD ****************************/
	Robot_voidSpeed(Robot_u8_INIT_SPEED);
    3d6c:	82 e3       	ldi	r24, 0x32	; 50
    3d6e:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <Robot_voidSpeed>
	/************************************** MOTOR DRIVER L298******************************************************/
	DIO_voidSetPinDirection(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN1,DIO_u8_PIN_OUTPUT);
    3d72:	82 e0       	ldi	r24, 0x02	; 2
    3d74:	61 e0       	ldi	r22, 0x01	; 1
    3d76:	41 e0       	ldi	r20, 0x01	; 1
    3d78:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN2,DIO_u8_PIN_OUTPUT);
    3d7c:	82 e0       	ldi	r24, 0x02	; 2
    3d7e:	62 e0       	ldi	r22, 0x02	; 2
    3d80:	41 e0       	ldi	r20, 0x01	; 1
    3d82:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN3,DIO_u8_PIN_OUTPUT);
    3d86:	82 e0       	ldi	r24, 0x02	; 2
    3d88:	63 e0       	ldi	r22, 0x03	; 3
    3d8a:	41 e0       	ldi	r20, 0x01	; 1
    3d8c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN4,DIO_u8_PIN_OUTPUT);
    3d90:	82 e0       	ldi	r24, 0x02	; 2
    3d92:	64 e0       	ldi	r22, 0x04	; 4
    3d94:	41 e0       	ldi	r20, 0x01	; 1
    3d96:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DIO_voidSetPinDirection>
	/***************************** INIT 7 SEGMENT ****************************/
	DIO_voidSetPortDirection(DIO_u8_PORTA ,DIO_u8_PORT_OUTPUT);
    3d9a:	80 e0       	ldi	r24, 0x00	; 0
    3d9c:	6f ef       	ldi	r22, 0xFF	; 255
    3d9e:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <DIO_voidSetPortDirection>
	/***************************** INIT BUZZER ****************************/
	DIO_voidSetPinDirection(DIO_u8_PORTC , DIO_u8_PIN5 , DIO_u8_PIN_OUTPUT);
    3da2:	82 e0       	ldi	r24, 0x02	; 2
    3da4:	65 e0       	ldi	r22, 0x05	; 5
    3da6:	41 e0       	ldi	r20, 0x01	; 1
    3da8:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DIO_voidSetPinDirection>
}
    3dac:	cf 91       	pop	r28
    3dae:	df 91       	pop	r29
    3db0:	08 95       	ret

00003db2 <main>:
#include "../LIB/BIT_MATH.h"
#include "../MCAL/DIO/DIO_interface.h"
#include "APP.h"

int main(void)
{
    3db2:	df 93       	push	r29
    3db4:	cf 93       	push	r28
    3db6:	0f 92       	push	r0
    3db8:	cd b7       	in	r28, 0x3d	; 61
    3dba:	de b7       	in	r29, 0x3e	; 62
	/* Initialization Robot */
	Robot_voidInit();
    3dbc:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <Robot_voidInit>
	u8 Mode=0;
    3dc0:	19 82       	std	Y+1, r1	; 0x01
    while(1)
    {
    	Mode = DIO_u8GetPinValue(DIO_u8_PORTB , DIO_u8_PIN0);
    3dc2:	81 e0       	ldi	r24, 0x01	; 1
    3dc4:	60 e0       	ldi	r22, 0x00	; 0
    3dc6:	0e 94 fe 12 	call	0x25fc	; 0x25fc <DIO_u8GetPinValue>
    3dca:	89 83       	std	Y+1, r24	; 0x01
		if(Mode == ObstacleAvoidingMode)
    3dcc:	89 81       	ldd	r24, Y+1	; 0x01
    3dce:	88 23       	and	r24, r24
    3dd0:	19 f4       	brne	.+6      	; 0x3dd8 <main+0x26>
		{
			Robot_voidObstacleAvoidingMode();
    3dd2:	0e 94 0a 1a 	call	0x3414	; 0x3414 <Robot_voidObstacleAvoidingMode>
    3dd6:	f5 cf       	rjmp	.-22     	; 0x3dc2 <main+0x10>
		}
		else
		{
			Robot_voidBluetoothRCMode();
    3dd8:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <Robot_voidBluetoothRCMode>
    3ddc:	f2 cf       	rjmp	.-28     	; 0x3dc2 <main+0x10>

00003dde <__mulsi3>:
    3dde:	62 9f       	mul	r22, r18
    3de0:	d0 01       	movw	r26, r0
    3de2:	73 9f       	mul	r23, r19
    3de4:	f0 01       	movw	r30, r0
    3de6:	82 9f       	mul	r24, r18
    3de8:	e0 0d       	add	r30, r0
    3dea:	f1 1d       	adc	r31, r1
    3dec:	64 9f       	mul	r22, r20
    3dee:	e0 0d       	add	r30, r0
    3df0:	f1 1d       	adc	r31, r1
    3df2:	92 9f       	mul	r25, r18
    3df4:	f0 0d       	add	r31, r0
    3df6:	83 9f       	mul	r24, r19
    3df8:	f0 0d       	add	r31, r0
    3dfa:	74 9f       	mul	r23, r20
    3dfc:	f0 0d       	add	r31, r0
    3dfe:	65 9f       	mul	r22, r21
    3e00:	f0 0d       	add	r31, r0
    3e02:	99 27       	eor	r25, r25
    3e04:	72 9f       	mul	r23, r18
    3e06:	b0 0d       	add	r27, r0
    3e08:	e1 1d       	adc	r30, r1
    3e0a:	f9 1f       	adc	r31, r25
    3e0c:	63 9f       	mul	r22, r19
    3e0e:	b0 0d       	add	r27, r0
    3e10:	e1 1d       	adc	r30, r1
    3e12:	f9 1f       	adc	r31, r25
    3e14:	bd 01       	movw	r22, r26
    3e16:	cf 01       	movw	r24, r30
    3e18:	11 24       	eor	r1, r1
    3e1a:	08 95       	ret

00003e1c <__udivmodhi4>:
    3e1c:	aa 1b       	sub	r26, r26
    3e1e:	bb 1b       	sub	r27, r27
    3e20:	51 e1       	ldi	r21, 0x11	; 17
    3e22:	07 c0       	rjmp	.+14     	; 0x3e32 <__udivmodhi4_ep>

00003e24 <__udivmodhi4_loop>:
    3e24:	aa 1f       	adc	r26, r26
    3e26:	bb 1f       	adc	r27, r27
    3e28:	a6 17       	cp	r26, r22
    3e2a:	b7 07       	cpc	r27, r23
    3e2c:	10 f0       	brcs	.+4      	; 0x3e32 <__udivmodhi4_ep>
    3e2e:	a6 1b       	sub	r26, r22
    3e30:	b7 0b       	sbc	r27, r23

00003e32 <__udivmodhi4_ep>:
    3e32:	88 1f       	adc	r24, r24
    3e34:	99 1f       	adc	r25, r25
    3e36:	5a 95       	dec	r21
    3e38:	a9 f7       	brne	.-22     	; 0x3e24 <__udivmodhi4_loop>
    3e3a:	80 95       	com	r24
    3e3c:	90 95       	com	r25
    3e3e:	bc 01       	movw	r22, r24
    3e40:	cd 01       	movw	r24, r26
    3e42:	08 95       	ret

00003e44 <__divmodhi4>:
    3e44:	97 fb       	bst	r25, 7
    3e46:	09 2e       	mov	r0, r25
    3e48:	07 26       	eor	r0, r23
    3e4a:	0a d0       	rcall	.+20     	; 0x3e60 <__divmodhi4_neg1>
    3e4c:	77 fd       	sbrc	r23, 7
    3e4e:	04 d0       	rcall	.+8      	; 0x3e58 <__divmodhi4_neg2>
    3e50:	e5 df       	rcall	.-54     	; 0x3e1c <__udivmodhi4>
    3e52:	06 d0       	rcall	.+12     	; 0x3e60 <__divmodhi4_neg1>
    3e54:	00 20       	and	r0, r0
    3e56:	1a f4       	brpl	.+6      	; 0x3e5e <__divmodhi4_exit>

00003e58 <__divmodhi4_neg2>:
    3e58:	70 95       	com	r23
    3e5a:	61 95       	neg	r22
    3e5c:	7f 4f       	sbci	r23, 0xFF	; 255

00003e5e <__divmodhi4_exit>:
    3e5e:	08 95       	ret

00003e60 <__divmodhi4_neg1>:
    3e60:	f6 f7       	brtc	.-4      	; 0x3e5e <__divmodhi4_exit>
    3e62:	90 95       	com	r25
    3e64:	81 95       	neg	r24
    3e66:	9f 4f       	sbci	r25, 0xFF	; 255
    3e68:	08 95       	ret

00003e6a <__udivmodsi4>:
    3e6a:	a1 e2       	ldi	r26, 0x21	; 33
    3e6c:	1a 2e       	mov	r1, r26
    3e6e:	aa 1b       	sub	r26, r26
    3e70:	bb 1b       	sub	r27, r27
    3e72:	fd 01       	movw	r30, r26
    3e74:	0d c0       	rjmp	.+26     	; 0x3e90 <__udivmodsi4_ep>

00003e76 <__udivmodsi4_loop>:
    3e76:	aa 1f       	adc	r26, r26
    3e78:	bb 1f       	adc	r27, r27
    3e7a:	ee 1f       	adc	r30, r30
    3e7c:	ff 1f       	adc	r31, r31
    3e7e:	a2 17       	cp	r26, r18
    3e80:	b3 07       	cpc	r27, r19
    3e82:	e4 07       	cpc	r30, r20
    3e84:	f5 07       	cpc	r31, r21
    3e86:	20 f0       	brcs	.+8      	; 0x3e90 <__udivmodsi4_ep>
    3e88:	a2 1b       	sub	r26, r18
    3e8a:	b3 0b       	sbc	r27, r19
    3e8c:	e4 0b       	sbc	r30, r20
    3e8e:	f5 0b       	sbc	r31, r21

00003e90 <__udivmodsi4_ep>:
    3e90:	66 1f       	adc	r22, r22
    3e92:	77 1f       	adc	r23, r23
    3e94:	88 1f       	adc	r24, r24
    3e96:	99 1f       	adc	r25, r25
    3e98:	1a 94       	dec	r1
    3e9a:	69 f7       	brne	.-38     	; 0x3e76 <__udivmodsi4_loop>
    3e9c:	60 95       	com	r22
    3e9e:	70 95       	com	r23
    3ea0:	80 95       	com	r24
    3ea2:	90 95       	com	r25
    3ea4:	9b 01       	movw	r18, r22
    3ea6:	ac 01       	movw	r20, r24
    3ea8:	bd 01       	movw	r22, r26
    3eaa:	cf 01       	movw	r24, r30
    3eac:	08 95       	ret

00003eae <__prologue_saves__>:
    3eae:	2f 92       	push	r2
    3eb0:	3f 92       	push	r3
    3eb2:	4f 92       	push	r4
    3eb4:	5f 92       	push	r5
    3eb6:	6f 92       	push	r6
    3eb8:	7f 92       	push	r7
    3eba:	8f 92       	push	r8
    3ebc:	9f 92       	push	r9
    3ebe:	af 92       	push	r10
    3ec0:	bf 92       	push	r11
    3ec2:	cf 92       	push	r12
    3ec4:	df 92       	push	r13
    3ec6:	ef 92       	push	r14
    3ec8:	ff 92       	push	r15
    3eca:	0f 93       	push	r16
    3ecc:	1f 93       	push	r17
    3ece:	cf 93       	push	r28
    3ed0:	df 93       	push	r29
    3ed2:	cd b7       	in	r28, 0x3d	; 61
    3ed4:	de b7       	in	r29, 0x3e	; 62
    3ed6:	ca 1b       	sub	r28, r26
    3ed8:	db 0b       	sbc	r29, r27
    3eda:	0f b6       	in	r0, 0x3f	; 63
    3edc:	f8 94       	cli
    3ede:	de bf       	out	0x3e, r29	; 62
    3ee0:	0f be       	out	0x3f, r0	; 63
    3ee2:	cd bf       	out	0x3d, r28	; 61
    3ee4:	09 94       	ijmp

00003ee6 <__epilogue_restores__>:
    3ee6:	2a 88       	ldd	r2, Y+18	; 0x12
    3ee8:	39 88       	ldd	r3, Y+17	; 0x11
    3eea:	48 88       	ldd	r4, Y+16	; 0x10
    3eec:	5f 84       	ldd	r5, Y+15	; 0x0f
    3eee:	6e 84       	ldd	r6, Y+14	; 0x0e
    3ef0:	7d 84       	ldd	r7, Y+13	; 0x0d
    3ef2:	8c 84       	ldd	r8, Y+12	; 0x0c
    3ef4:	9b 84       	ldd	r9, Y+11	; 0x0b
    3ef6:	aa 84       	ldd	r10, Y+10	; 0x0a
    3ef8:	b9 84       	ldd	r11, Y+9	; 0x09
    3efa:	c8 84       	ldd	r12, Y+8	; 0x08
    3efc:	df 80       	ldd	r13, Y+7	; 0x07
    3efe:	ee 80       	ldd	r14, Y+6	; 0x06
    3f00:	fd 80       	ldd	r15, Y+5	; 0x05
    3f02:	0c 81       	ldd	r16, Y+4	; 0x04
    3f04:	1b 81       	ldd	r17, Y+3	; 0x03
    3f06:	aa 81       	ldd	r26, Y+2	; 0x02
    3f08:	b9 81       	ldd	r27, Y+1	; 0x01
    3f0a:	ce 0f       	add	r28, r30
    3f0c:	d1 1d       	adc	r29, r1
    3f0e:	0f b6       	in	r0, 0x3f	; 63
    3f10:	f8 94       	cli
    3f12:	de bf       	out	0x3e, r29	; 62
    3f14:	0f be       	out	0x3f, r0	; 63
    3f16:	cd bf       	out	0x3d, r28	; 61
    3f18:	ed 01       	movw	r28, r26
    3f1a:	08 95       	ret

00003f1c <_exit>:
    3f1c:	f8 94       	cli

00003f1e <__stop_program>:
    3f1e:	ff cf       	rjmp	.-2      	; 0x3f1e <__stop_program>
